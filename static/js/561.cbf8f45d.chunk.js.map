{"version":3,"file":"static/js/561.cbf8f45d.chunk.js","mappings":"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","sources":["../node_modules/extend/index.js","../node_modules/inline-style-parser/index.js","../node_modules/style-to-object/src/index.ts","../node_modules/@ungap/structured-clone/esm/deserialize.js","../node_modules/@ungap/structured-clone/esm/types.js","../node_modules/@ungap/structured-clone/esm/serialize.js","../node_modules/@ungap/structured-clone/esm/index.js","../node_modules/comma-separated-tokens/index.js","../node_modules/devlop/lib/default.js","../node_modules/property-information/lib/util/schema.js","../node_modules/property-information/lib/util/merge.js","../node_modules/property-information/lib/util/create.js","../node_modules/property-information/lib/xlink.js","../node_modules/property-information/lib/xml.js","../node_modules/property-information/lib/util/case-sensitive-transform.js","../node_modules/property-information/lib/util/case-insensitive-transform.js","../node_modules/property-information/lib/xmlns.js","../node_modules/property-information/lib/aria.js","../node_modules/property-information/lib/html.js","../node_modules/property-information/lib/svg.js","../node_modules/property-information/index.js","../node_modules/property-information/lib/find.js","../node_modules/property-information/lib/normalize.js","../node_modules/property-information/lib/util/defined-info.js","../node_modules/property-information/lib/util/info.js","../node_modules/property-information/lib/util/types.js","../node_modules/estree-util-is-identifier-name/lib/index.js","../node_modules/hast-util-whitespace/lib/index.js","../node_modules/property-information/lib/hast-to-react.js","../node_modules/style-to-object/esm/index.mjs","../node_modules/@babel/runtime/helpers/esm/construct.js","../node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","../node_modules/@babel/runtime/helpers/esm/isNativeFunction.js","../node_modules/unist-util-stringify-position/lib/index.js","../node_modules/vfile-message/lib/index.js","../node_modules/hast-util-to-jsx-runtime/lib/index.js","../node_modules/html-url-attributes/lib/index.js","../node_modules/mdast-util-to-string/lib/index.js","../node_modules/micromark-util-chunked/index.js","../node_modules/micromark-util-subtokenize/lib/splice-buffer.js","../node_modules/micromark-util-subtokenize/index.js","../node_modules/micromark-util-combine-extensions/index.js","../node_modules/micromark-util-character/index.js","../node_modules/micromark-factory-space/index.js","../node_modules/micromark/lib/initialize/content.js","../node_modules/micromark/lib/initialize/document.js","../node_modules/micromark-core-commonmark/lib/blank-line.js","../node_modules/micromark-core-commonmark/lib/content.js","../node_modules/micromark/lib/initialize/flow.js","../node_modules/micromark/lib/initialize/text.js","../node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/micromark-core-commonmark/lib/list.js","../node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/micromark-factory-destination/index.js","../node_modules/micromark-factory-label/index.js","../node_modules/micromark-factory-title/index.js","../node_modules/micromark-factory-whitespace/index.js","../node_modules/micromark-util-normalize-identifier/index.js","../node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/micromark-util-html-tag-name/index.js","../node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/decode-named-character-reference/index.dom.js","../node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/micromark-util-resolve-all/index.js","../node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/micromark-util-classify-character/index.js","../node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/micromark-core-commonmark/lib/code-text.js","../node_modules/micromark/lib/constructs.js","../node_modules/micromark/lib/create-tokenizer.js","../node_modules/micromark/lib/parse.js","../node_modules/micromark/lib/preprocess.js","../node_modules/micromark-util-decode-numeric-character-reference/index.js","../node_modules/micromark-util-decode-string/index.js","../node_modules/mdast-util-from-markdown/lib/index.js","../node_modules/micromark/lib/postprocess.js","../node_modules/remark-parse/lib/index.js","../node_modules/micromark-util-sanitize-uri/index.js","../node_modules/mdast-util-to-hast/lib/footer.js","../node_modules/mdast-util-to-hast/lib/revert.js","../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../node_modules/trim-lines/index.js","../node_modules/mdast-util-to-hast/lib/handlers/index.js","../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../node_modules/mdast-util-to-hast/lib/handlers/break.js","../node_modules/mdast-util-to-hast/lib/handlers/code.js","../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../node_modules/mdast-util-to-hast/lib/handlers/html.js","../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/image.js","../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/link.js","../node_modules/mdast-util-to-hast/lib/handlers/list.js","../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../node_modules/mdast-util-to-hast/lib/handlers/root.js","../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../node_modules/mdast-util-to-hast/lib/handlers/table.js","../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../node_modules/mdast-util-to-hast/lib/handlers/text.js","../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../node_modules/mdast-util-to-hast/lib/state.js","../node_modules/mdast-util-to-hast/lib/index.js","../node_modules/remark-rehype/lib/index.js","../node_modules/bail/index.js","../node_modules/unified/node_modules/is-plain-obj/index.js","../node_modules/trough/lib/index.js","../node_modules/vfile/lib/minpath.browser.js","../node_modules/vfile/lib/minproc.browser.js","../node_modules/vfile/lib/minurl.shared.js","../node_modules/vfile/lib/minurl.browser.js","../node_modules/vfile/lib/index.js","../node_modules/unified/lib/callable-instance.js","../node_modules/unified/lib/index.js","../node_modules/react-markdown/lib/index.js","../node_modules/hast-util-parse-selector/lib/index.js","../node_modules/hastscript/lib/create-h.js","../node_modules/hastscript/lib/svg-case-sensitive-tag-names.js","../node_modules/hastscript/lib/index.js","../node_modules/vfile-location/lib/index.js","../node_modules/web-namespaces/index.js","../node_modules/hast-util-from-parse5/lib/index.js","../node_modules/zwitch/index.js","../node_modules/hast-util-to-parse5/lib/index.js","../node_modules/html-void-elements/index.js","../node_modules/hast-util-raw/node_modules/parse5/dist/common/unicode.js","../node_modules/hast-util-raw/node_modules/parse5/dist/common/error-codes.js","../node_modules/hast-util-raw/node_modules/parse5/dist/tokenizer/preprocessor.js","../node_modules/hast-util-raw/node_modules/parse5/dist/common/token.js","../generated/decode-data-html.ts","../decode.ts","../generated/decode-data-xml.ts","../decode_codepoint.ts","../node_modules/hast-util-raw/node_modules/parse5/dist/common/html.js","../node_modules/hast-util-raw/node_modules/parse5/dist/tokenizer/index.js","../node_modules/hast-util-raw/node_modules/parse5/dist/parser/formatting-element-list.js","../node_modules/hast-util-raw/node_modules/parse5/dist/parser/open-element-stack.js","../node_modules/hast-util-raw/node_modules/parse5/dist/tree-adapters/default.js","../node_modules/hast-util-raw/node_modules/parse5/dist/common/doctype.js","../node_modules/hast-util-raw/node_modules/parse5/dist/common/foreign-content.js","../node_modules/hast-util-raw/node_modules/parse5/dist/parser/index.js","../escape.ts","../node_modules/hast-util-raw/node_modules/parse5/dist/serializer/index.js","../node_modules/hast-util-raw/lib/index.js","../node_modules/rehype-raw/lib/index.js","../node_modules/space-separated-tokens/index.js","../node_modules/unist-util-position/lib/index.js","../node_modules/unist-util-is/lib/index.js","../node_modules/unist-util-visit-parents/lib/index.js","../node_modules/unist-util-visit/lib/index.js"],"sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","import type { Declaration } from 'inline-style-parser';\nimport parse from 'inline-style-parser';\n\nexport { Declaration };\n\ninterface StyleObject {\n  [name: string]: string;\n}\n\ntype Iterator = (\n  property: string,\n  value: string,\n  declaration: Declaration,\n) => void;\n\n/**\n * Parses inline style to object.\n *\n * @param style - Inline style.\n * @param iterator - Iterator.\n * @returns - Style object or null.\n *\n * @example Parsing inline style to object:\n *\n * ```js\n * import parse from 'style-to-object';\n * parse('line-height: 42;'); // { 'line-height': '42' }\n * ```\n */\nexport default function StyleToObject(\n  style: string,\n  iterator?: Iterator,\n): StyleObject | null {\n  let styleObject: StyleObject | null = null;\n\n  if (!style || typeof style !== 'string') {\n    return styleObject;\n  }\n\n  const declarations = parse(style);\n  const hasIterator = typeof iterator === 'function';\n\n  declarations.forEach((declaration) => {\n    if (declaration.type !== 'declaration') {\n      return;\n    }\n\n    const { property, value } = declaration;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      styleObject = styleObject || {};\n      styleObject[property] = value;\n    }\n  });\n\n  return styleObject;\n}\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type)\n          return as([type, [...value]], value);\n  \n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","export function deprecate(fn) {\n  return fn\n}\n\nexport function equal() {}\n\nexport function ok() {}\n\nexport function unreachable() {}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootClonable: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    writingSuggestions: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [jsx=false]\n *   Support JSX identifiers (default: `false`).\n */\n\nconst startRe = /[$_\\p{ID_Start}]/u\nconst contRe = /[$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst contReJsx = /[-$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst nameRe = /^[$_\\p{ID_Start}][$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\nconst nameReJsx = /^[$_\\p{ID_Start}][-$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Checks if the given code point can start an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @returns {boolean}\n *   Whether `code` can start an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function start(code) {\n  return code ? startRe.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given code point can continue an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `code` can continue an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function cont(code, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? contReJsx : contRe\n  return code ? re.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given value is a valid identifier name.\n *\n * @param {string} name\n *   Identifier to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `name` can be an identifier.\n */\nexport function name(name, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? nameReJsx : nameRe\n  return re.test(name)\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","import StyleToObject from '../cjs/index.js';\n\n// ensure compatibility with rollup umd build\nexport default StyleToObject.default || StyleToObject;\n","import setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeFunction from \"./isNativeFunction.js\";\nimport construct from \"./construct.js\";\nexport default function _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}","export default function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","/**\n * @import {Identifier, Literal, MemberExpression} from 'estree'\n * @import {Jsx, JsxDev, Options, Props} from 'hast-util-to-jsx-runtime'\n * @import {Element, Nodes, Parents, Root, Text} from 'hast'\n * @import {MdxFlowExpressionHast, MdxTextExpressionHast} from 'mdast-util-mdx-expression'\n * @import {MdxJsxFlowElementHast, MdxJsxTextElementHast} from 'mdast-util-mdx-jsx'\n * @import {MdxjsEsmHast} from 'mdast-util-mdxjs-esm'\n * @import {Position} from 'unist'\n * @import {Child, Create, Field, State, Style} from './types.js'\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToObject from 'style-to-object'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\n// To do: next major: `Object.hasOwn`.\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\nconst dashSomething = /-([a-z])/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\nconst docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime'\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JSX.Element}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element') {\n    return element(state, node, key)\n  }\n\n  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {\n    return mdxExpression(state, node)\n  }\n\n  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {\n    return mdxJsxElement(state, node, key)\n  }\n\n  if (node.type === 'mdxjsEsm') {\n    return mdxEsm(state, node)\n  }\n\n  if (node.type === 'root') {\n    return root(state, node, key)\n  }\n\n  if (node.type === 'text') {\n    return text(state, node)\n  }\n}\n\n/**\n * Handle element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction element(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type = findComponentFromName(state, node.tagName, false)\n  const props = createElementProps(state, node)\n  let children = createChildren(state, node)\n\n  if (tableElements.has(node.tagName)) {\n    children = children.filter(function (child) {\n      return typeof child === 'string' ? !whitespace(child) : true\n    })\n  }\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle MDX expression.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxFlowExpressionHast | MdxTextExpressionHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxExpression(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    const program = node.data.estree\n    const expression = program.body[0]\n    assert(expression.type === 'ExpressionStatement')\n\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateExpression(expression.expression)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX ESM.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxjsEsmHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxEsm(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateProgram(node.data.estree)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX JSX.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxJsxElement(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.name === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type =\n    node.name === null\n      ? state.Fragment\n      : findComponentFromName(state, node.name, true)\n  const props = createJsxElementProps(state, node)\n  const children = createChildren(state, node)\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Root} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction root(state, node, key) {\n  /** @type {Props} */\n  const props = {}\n\n  addChildren(props, createChildren(state, node))\n\n  return state.create(node, state.Fragment, props, key)\n}\n\n/**\n * Handle text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Text} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction text(_, node) {\n  return node.value\n}\n\n/**\n * Add `node` to props.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Props} props\n *   Props.\n * @param {unknown} type\n *   Type.\n * @param {Element | MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addNode(state, props, type, node) {\n  // If this is swapped out for a component:\n  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {\n    props.node = node\n  }\n}\n\n/**\n * Add children to props.\n *\n * @param {Props} props\n *   Props.\n * @param {Array<Child>} children\n *   Children.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChildren(props, children) {\n  if (children.length > 0) {\n    const value = children.length > 1 ? children : children[0]\n\n    if (value) {\n      props.children = value\n    }\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create props from an element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current element.\n * @returns {Props}\n *   Props.\n */\nfunction createElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n  /** @type {string | undefined} */\n  let alignValue\n  /** @type {string} */\n  let prop\n\n  for (prop in node.properties) {\n    if (prop !== 'children' && own.call(node.properties, prop)) {\n      const result = createProperty(state, prop, node.properties[prop])\n\n      if (result) {\n        const [key, value] = result\n\n        if (\n          state.tableCellAlignToStyle &&\n          key === 'align' &&\n          typeof value === 'string' &&\n          tableCellElement.has(node.tagName)\n        ) {\n          alignValue = value\n        } else {\n          props[key] = value\n        }\n      }\n    }\n  }\n\n  if (alignValue) {\n    // Assume style is an object.\n    const style = /** @type {Style} */ (props.style || (props.style = {}))\n    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =\n      alignValue\n  }\n\n  return props\n}\n\n/**\n * Create props from a JSX element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current JSX element.\n * @returns {Props}\n *   Props.\n */\nfunction createJsxElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n\n  for (const attribute of node.attributes) {\n    if (attribute.type === 'mdxJsxExpressionAttribute') {\n      if (attribute.data && attribute.data.estree && state.evaluater) {\n        const program = attribute.data.estree\n        const expression = program.body[0]\n        assert(expression.type === 'ExpressionStatement')\n        const objectExpression = expression.expression\n        assert(objectExpression.type === 'ObjectExpression')\n        const property = objectExpression.properties[0]\n        assert(property.type === 'SpreadElement')\n\n        Object.assign(\n          props,\n          state.evaluater.evaluateExpression(property.argument)\n        )\n      } else {\n        crashEstree(state, node.position)\n      }\n    } else {\n      // For JSX, the author is responsible of passing in the correct values.\n      const name = attribute.name\n      /** @type {unknown} */\n      let value\n\n      if (attribute.value && typeof attribute.value === 'object') {\n        if (\n          attribute.value.data &&\n          attribute.value.data.estree &&\n          state.evaluater\n        ) {\n          const program = attribute.value.data.estree\n          const expression = program.body[0]\n          assert(expression.type === 'ExpressionStatement')\n          value = state.evaluater.evaluateExpression(expression.expression)\n        } else {\n          crashEstree(state, node.position)\n        }\n      } else {\n        value = attribute.value === null ? true : attribute.value\n      }\n\n      // Assume a prop.\n      props[name] = /** @type {Props[keyof Props]} */ (value)\n    }\n  }\n\n  return props\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys) {\n      const name =\n        child.type === 'element'\n          ? child.tagName\n          : child.type === 'mdxJsxFlowElement' ||\n              child.type === 'mdxJsxTextElement'\n            ? child.name\n            : undefined\n\n      if (name) {\n        const count = countsByName.get(name) || 0\n        key = name + '-' + count\n        countsByName.set(name, count + 1)\n      }\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object' ? value : parseStyle(state, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, value) {\n  /** @type {Style} */\n  const result = {}\n\n  try {\n    styleToObject(value, replacer)\n  } catch (error) {\n    if (!state.ignoreInvalidStyle) {\n      const cause = /** @type {Error} */ (error)\n      const message = new VFileMessage('Cannot parse `style` attribute', {\n        ancestors: state.ancestors,\n        cause,\n        ruleId: 'style',\n        source: 'hast-util-to-jsx-runtime'\n      })\n      message.file = state.filePath || undefined\n      message.url = docs + '#cannot-parse-style-attribute'\n\n      throw message\n    }\n  }\n\n  return result\n\n  /**\n   * Add a CSS property (normal, so with dashes) to `result` as a DOM CSS\n   * property.\n   *\n   * @param {string} name\n   *   Key.\n   * @param {string} value\n   *   Value\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function replacer(name, value) {\n    let key = name\n\n    if (key.slice(0, 2) !== '--') {\n      if (key.slice(0, 4) === '-ms-') key = 'ms-' + key.slice(4)\n      key = key.replace(dashSomething, toCamel)\n    }\n\n    result[key] = value\n  }\n}\n\n/**\n * Create a JSX name from a string.\n *\n * @param {State} state\n *   To do.\n * @param {string} name\n *   Name.\n * @param {boolean} allowExpression\n *   Allow member expressions and identifiers.\n * @returns {unknown}\n *   To do.\n */\nfunction findComponentFromName(state, name, allowExpression) {\n  /** @type {Identifier | Literal | MemberExpression} */\n  let result\n\n  if (!allowExpression) {\n    result = {type: 'Literal', value: name}\n  } else if (name.includes('.')) {\n    const identifiers = name.split('.')\n    let index = -1\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\n    let node\n\n    while (++index < identifiers.length) {\n      /** @type {Identifier | Literal} */\n      const prop = isIdentifierName(identifiers[index])\n        ? {type: 'Identifier', name: identifiers[index]}\n        : {type: 'Literal', value: identifiers[index]}\n      node = node\n        ? {\n            type: 'MemberExpression',\n            object: node,\n            property: prop,\n            computed: Boolean(index && prop.type === 'Literal'),\n            optional: false\n          }\n        : prop\n    }\n\n    assert(node, 'always a result')\n    result = node\n  } else {\n    result =\n      isIdentifierName(name) && !/^[a-z]/.test(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n  }\n\n  // Only literals can be passed in `components` currently.\n  // No identifiers / member expressions.\n  if (result.type === 'Literal') {\n    const name = /** @type {keyof JSX.IntrinsicElements} */ (result.value)\n\n    return own.call(state.components, name) ? state.components[name] : name\n  }\n\n  // Assume component.\n  if (state.evaluater) {\n    return state.evaluater.evaluateExpression(result)\n  }\n\n  crashEstree(state)\n}\n\n/**\n * @param {State} state\n * @param {Position | undefined} [place]\n * @returns {never}\n */\nfunction crashEstree(state, place) {\n  const message = new VFileMessage(\n    'Cannot handle MDX estrees without `createEvaluater`',\n    {\n      ancestors: state.ancestors,\n      place,\n      ruleId: 'mdx-estree',\n      source: 'hast-util-to-jsx-runtime'\n    }\n  )\n  message.file = state.filePath || undefined\n  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater'\n\n  throw message\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$1` capitalized.\n *\n * @param {string} _\n *   Whatever.\n * @param {string} $1\n *   Single ASCII alphabetical.\n * @returns {string}\n *   Capitalized `$1`.\n */\nfunction toCamel(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * HTML URL properties.\n *\n * Each key is a property name and each value is a list of tag names it applies\n * to or `null` if it applies to all elements.\n *\n * @type {Record<string, Array<string> | null>}\n */\nexport const urlAttributes = {\n  action: ['form'],\n  cite: ['blockquote', 'del', 'ins', 'q'],\n  data: ['object'],\n  formAction: ['button', 'input'],\n  href: ['a', 'area', 'base', 'link'],\n  icon: ['menuitem'],\n  itemId: null,\n  manifest: ['html'],\n  ping: ['a', 'area'],\n  poster: ['video'],\n  src: [\n    'audio',\n    'embed',\n    'iframe',\n    'img',\n    'input',\n    'script',\n    'source',\n    'track',\n    'video'\n  ]\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length;\n  let chunkStart = 0;\n  /** @type {Array<unknown>} */\n  let parameters;\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start;\n  } else {\n    start = start > end ? end : start;\n  }\n  remove = remove > 0 ? remove : 0;\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items);\n    parameters.unshift(start, remove);\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters);\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove);\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000);\n      parameters.unshift(start, 0);\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters);\n      chunkStart += 10000;\n      start += 10000;\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items);\n    return list;\n  }\n  return items;\n}","/**\n * Some of the internal operations of micromark do lots of editing\n * operations on very large arrays. This runs into problems with two\n * properties of most circa-2020 JavaScript interpreters:\n *\n *  - Array-length modifications at the high end of an array (push/pop) are\n *    expected to be common and are implemented in (amortized) time\n *    proportional to the number of elements added or removed, whereas\n *    other operations (shift/unshift and splice) are much less efficient.\n *  - Function arguments are passed on the stack, so adding tens of thousands\n *    of elements to an array with `arr.push(...newElements)` will frequently\n *    cause stack overflows. (see <https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why>)\n *\n * SpliceBuffers are an implementation of gap buffers, which are a\n * generalization of the \"queue made of two stacks\" idea. The splice buffer\n * maintains a cursor, and moving the cursor has cost proportional to the\n * distance the cursor moves, but inserting, deleting, or splicing in\n * new information at the cursor is as efficient as the push/pop operation.\n * This allows for an efficient sequence of splices (or pushes, pops, shifts,\n * or unshifts) as long such edits happen at the same part of the array or\n * generally sweep through the array from the beginning to the end.\n *\n * The interface for splice buffers also supports large numbers of inputs by\n * passing a single array argument rather passing multiple arguments on the\n * function call stack.\n *\n * @template T\n *   Item type.\n */\nexport class SpliceBuffer {\n  /**\n   * @param {ReadonlyArray<T> | null | undefined} [initial]\n   *   Initial items (optional).\n   * @returns\n   *   Splice buffer.\n   */\n  constructor(initial) {\n    /** @type {Array<T>} */\n    this.left = initial ? [...initial] : [];\n    /** @type {Array<T>} */\n    this.right = [];\n  }\n\n  /**\n   * Array access;\n   * does not move the cursor.\n   *\n   * @param {number} index\n   *   Index.\n   * @return {T}\n   *   Item.\n   */\n  get(index) {\n    if (index < 0 || index >= this.left.length + this.right.length) {\n      throw new RangeError('Cannot access index `' + index + '` in a splice buffer of size `' + (this.left.length + this.right.length) + '`');\n    }\n    if (index < this.left.length) return this.left[index];\n    return this.right[this.right.length - index + this.left.length - 1];\n  }\n\n  /**\n   * The length of the splice buffer, one greater than the largest index in the\n   * array.\n   */\n  get length() {\n    return this.left.length + this.right.length;\n  }\n\n  /**\n   * Remove and return `list[0]`;\n   * moves the cursor to `0`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  shift() {\n    this.setCursor(0);\n    return this.right.pop();\n  }\n\n  /**\n   * Slice the buffer to get an array;\n   * does not move the cursor.\n   *\n   * @param {number} start\n   *   Start.\n   * @param {number | null | undefined} [end]\n   *   End (optional).\n   * @returns {Array<T>}\n   *   Array of items.\n   */\n  slice(start, end) {\n    /** @type {number} */\n    const stop = end === null || end === undefined ? Number.POSITIVE_INFINITY : end;\n    if (stop < this.left.length) {\n      return this.left.slice(start, stop);\n    }\n    if (start > this.left.length) {\n      return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start + this.left.length).reverse();\n    }\n    return this.left.slice(start).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());\n  }\n\n  /**\n   * Mimics the behavior of Array.prototype.splice() except for the change of\n   * interface necessary to avoid segfaults when patching in very large arrays.\n   *\n   * This operation moves cursor is moved to `start` and results in the cursor\n   * placed after any inserted items.\n   *\n   * @param {number} start\n   *   Start;\n   *   zero-based index at which to start changing the array;\n   *   negative numbers count backwards from the end of the array and values\n   *   that are out-of bounds are clamped to the appropriate end of the array.\n   * @param {number | null | undefined} [deleteCount=0]\n   *   Delete count (default: `0`);\n   *   maximum number of elements to delete, starting from start.\n   * @param {Array<T> | null | undefined} [items=[]]\n   *   Items to include in place of the deleted items (default: `[]`).\n   * @return {Array<T>}\n   *   Any removed items.\n   */\n  splice(start, deleteCount, items) {\n    /** @type {number} */\n    const count = deleteCount || 0;\n    this.setCursor(Math.trunc(start));\n    const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);\n    if (items) chunkedPush(this.left, items);\n    return removed.reverse();\n  }\n\n  /**\n   * Remove and return the highest-numbered item in the array, so\n   * `list[list.length - 1]`;\n   * Moves the cursor to `length`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  pop() {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    return this.left.pop();\n  }\n\n  /**\n   * Inserts a single item to the high-numbered side of the array;\n   * moves the cursor to `length`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  push(item) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    this.left.push(item);\n  }\n\n  /**\n   * Inserts many items to the high-numbered side of the array.\n   * Moves the cursor to `length`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  pushMany(items) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    chunkedPush(this.left, items);\n  }\n\n  /**\n   * Inserts a single item to the low-numbered side of the array;\n   * Moves the cursor to `0`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshift(item) {\n    this.setCursor(0);\n    this.right.push(item);\n  }\n\n  /**\n   * Inserts many items to the low-numbered side of the array;\n   * moves the cursor to `0`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshiftMany(items) {\n    this.setCursor(0);\n    chunkedPush(this.right, items.reverse());\n  }\n\n  /**\n   * Move the cursor to a specific position in the array. Requires\n   * time proportional to the distance moved.\n   *\n   * If `n < 0`, the cursor will end up at the beginning.\n   * If `n > length`, the cursor will end up at the end.\n   *\n   * @param {number} n\n   *   Position.\n   * @return {undefined}\n   *   Nothing.\n   */\n  setCursor(n) {\n    if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;\n    if (n < this.left.length) {\n      // Move cursor to the this.left\n      const removed = this.left.splice(n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.right, removed.reverse());\n    } else {\n      // Move cursor to the this.right\n      const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.left, removed.reverse());\n    }\n  }\n}\n\n/**\n * Avoid stack overflow by pushing items onto the stack in segments\n *\n * @template T\n *   Item type.\n * @param {Array<T>} list\n *   List to inject into.\n * @param {ReadonlyArray<T>} right\n *   Items to inject.\n * @return {undefined}\n *   Nothing.\n */\nfunction chunkedPush(list, right) {\n  /** @type {number} */\n  let chunkStart = 0;\n  if (right.length < 10000) {\n    list.push(...right);\n  } else {\n    while (chunkStart < right.length) {\n      list.push(...right.slice(chunkStart, chunkStart + 10000));\n      chunkStart += 10000;\n    }\n  }\n}","/**\n * @import {Chunk, Event, Token} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { SpliceBuffer } from './lib/splice-buffer.js';\n\n// Hidden API exposed for testing.\nexport { SpliceBuffer } from './lib/splice-buffer.js';\n\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} eventsArray\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\n// eslint-disable-next-line complexity\nexport function subtokenize(eventsArray) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n  let event;\n  /** @type {number | undefined} */\n  let lineIndex;\n  /** @type {number} */\n  let otherIndex;\n  /** @type {Event} */\n  let otherEvent;\n  /** @type {Array<Event>} */\n  let parameters;\n  /** @type {Array<Event>} */\n  let subevents;\n  /** @type {boolean | undefined} */\n  let more;\n  const events = new SpliceBuffer(eventsArray);\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n    event = events.get(index);\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (index && event[1].type === \"chunkFlow\" && events.get(index - 1)[1].type === \"listItemPrefix\") {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"lineEndingBlank\") {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"content\") {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === \"content\") {\n            break;\n          }\n          if (subevents[otherIndex][1].type === \"chunkText\") {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n      while (otherIndex--) {\n        otherEvent = events.get(otherIndex);\n        if (otherEvent[1].type === \"lineEnding\" || otherEvent[1].type === \"lineEndingBlank\") {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events.get(lineIndex)[1].type = \"lineEndingBlank\";\n            }\n            otherEvent[1].type = \"lineEnding\";\n            lineIndex = otherIndex;\n          }\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = {\n          ...events.get(lineIndex)[1].start\n        };\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        events.splice(lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n\n  // The changes to the `events` buffer must be copied back into the eventsArray\n  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));\n  return !more;\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {SpliceBuffer<Event>} events\n *   Events.\n * @param {number} eventIndex\n *   Index.\n * @returns {Record<string, number>}\n *   Gaps.\n */\nfunction subcontent(events, eventIndex) {\n  const token = events.get(eventIndex)[1];\n  const context = events.get(eventIndex)[2];\n  let startPosition = eventIndex - 1;\n  /** @type {Array<number>} */\n  const startPositions = [];\n  const tokenizer = token._tokenizer || context.parser[token.contentType](token.start);\n  const childEvents = tokenizer.events;\n  /** @type {Array<[number, number]>} */\n  const jumps = [];\n  /** @type {Record<string, number>} */\n  const gaps = {};\n  /** @type {Array<Chunk>} */\n  let stream;\n  /** @type {Token | undefined} */\n  let previous;\n  let index = -1;\n  /** @type {Token | undefined} */\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start];\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events.get(++startPosition)[1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    }\n\n    // Unravel the next token.\n    previous = current;\n    current = current.next;\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token;\n  while (++index < childEvents.length) {\n    if (\n    // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start);\n      // Help GC.\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = [];\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length;\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    jumps.push([start, start + slice.length - 1]);\n    events.splice(start, 2, slice);\n  }\n  jumps.reverse();\n  index = -1;\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n  return gaps;\n}","/**\n * @import {\n *   Extension,\n *   Handles,\n *   HtmlExtension,\n *   NormalizedExtension\n * } from 'micromark-util-types'\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {ReadonlyArray<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n *   List of constructs to merge into.\n * @param {Array<unknown>} list\n *   List of constructs to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {ReadonlyArray<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   Single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { markdownSpace } from 'micromark-util-character';\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n    return ok(code);\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok(code);\n  }\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Initializer}\n *   Content.\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);\n  /** @type {Token} */\n  let previous;\n  return contentStart;\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, contentStart, \"linePrefix\");\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter(\"paragraph\");\n    return lineStart(code);\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter(\"chunkText\", {\n      contentType: \"text\",\n      previous\n    });\n    if (previous) {\n      previous.next = token;\n    }\n    previous = token;\n    return data(code);\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit(\"chunkText\");\n      effects.exit(\"paragraph\");\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      effects.exit(\"chunkText\");\n      return lineStart;\n    }\n\n    // Data.\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @import {\n *   Construct,\n *   ContainerState,\n *   InitialConstruct,\n *   Initializer,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n *   Construct and its state.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n};\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeDocument(effects) {\n  const self = this;\n  /** @type {Array<StackItem>} */\n  const stack = [];\n  let continued = 0;\n  /** @type {TokenizeContext | undefined} */\n  let childFlow;\n  /** @type {Token | undefined} */\n  let childToken;\n  /** @type {number} */\n  let lineStartOffset;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued];\n      self.containerState = item[1];\n      return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code);\n    }\n\n    // Done.\n    return checkNewContainers(code);\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++;\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined;\n      if (childFlow) {\n        closeFlow();\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          point = self.events[indexBeforeFlow][1].end;\n          break;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      let index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n      return checkNewContainers(code);\n    }\n    return start(code);\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code);\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code);\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);\n    }\n\n    // Check if there is a new container.\n    self.containerState = {};\n    return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code);\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow();\n    exitContainers(continued);\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length;\n    lineStartOffset = self.now().offset;\n    return flowStart(code);\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {};\n    return effects.attempt(containerConstruct, containerContinue, flowStart)(code);\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++;\n    stack.push([self.currentConstruct, self.containerState]);\n    // Try another.\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow();\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    childFlow = childFlow || self.parser.flow(self.now());\n    effects.enter(\"chunkFlow\", {\n      _tokenizer: childFlow,\n      contentType: \"flow\",\n      previous: childToken\n    });\n    return flowContinue(code);\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit(\"chunkFlow\"), true);\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      writeToChild(effects.exit(\"chunkFlow\"));\n      // Get ready for the next line.\n      continued = 0;\n      self.interrupt = undefined;\n      return start;\n    }\n    effects.consume(code);\n    return flowContinue;\n  }\n\n  /**\n   * @param {Token} token\n   *   Token.\n   * @param {boolean | undefined} [endOfFile]\n   *   Whether the token is at the end of the file (default: `false`).\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function writeToChild(token, endOfFile) {\n    const stream = self.sliceStream(token);\n    if (endOfFile) stream.push(null);\n    token.previous = childToken;\n    if (childToken) childToken.next = token;\n    childToken = token;\n    childFlow.defineSkip(token.start);\n    childFlow.write(stream);\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length;\n      while (index--) {\n        if (\n        // The token starts before the line ending…\n        childFlow.events[index][1].start.offset < lineStartOffset && (\n        // …and either is not ended yet…\n        !childFlow.events[index][1].end ||\n        // …or ends after it.\n        childFlow.events[index][1].end.offset > lineStartOffset)) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return;\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {boolean | undefined} */\n      let seen;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end;\n            break;\n          }\n          seen = true;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n    }\n  }\n\n  /**\n   * @param {number} size\n   *   Size.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exitContainers(size) {\n    let index = stack.length;\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index];\n      self.containerState = entry[1];\n      entry[0].exit.call(self, effects);\n    }\n    stack.length = size;\n  }\n  function closeFlow() {\n    childFlow.write([null]);\n    childToken = undefined;\n    childFlow = undefined;\n    self.containerState._closeFlow = undefined;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n *   Tokenizer.\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(effects, effects.attempt(this.parser.constructs.document, ok, nok), \"linePrefix\", this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4);\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  partial: true,\n  tokenize: tokenizeBlankLine\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  resolve: resolveContent,\n  tokenize: tokenizeContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  partial: true,\n  tokenize: tokenizeContinuation\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter(\"content\");\n    previous = effects.enter(\"chunkContent\", {\n      contentType: \"content\"\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit(\"chunkContent\");\n    effects.exit(\"content\");\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit(\"chunkContent\");\n    previous.next = effects.enter(\"chunkContent\", {\n      contentType: \"content\",\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit(\"chunkContent\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, prefixed, \"linePrefix\");\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nimport { blankLine, content } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeFlow(effects) {\n  const self = this;\n  const initial = effects.attempt(\n  // Try to parse a blank line.\n  blankLine, atBlankEnding,\n  // Try to parse initial flow (essentially, only code).\n  effects.attempt(this.parser.constructs.flowInitial, afterConstruct, factorySpace(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(content, afterConstruct)), \"linePrefix\")));\n  return initial;\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEndingBlank\");\n    effects.consume(code);\n    effects.exit(\"lineEndingBlank\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n}","/**\n * @import {\n *   Code,\n *   InitialConstruct,\n *   Initializer,\n *   Resolver,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n};\nexport const string = initializeFactory('string');\nexport const text = initializeFactory('text');\n\n/**\n * @param {'string' | 'text'} field\n *   Field.\n * @returns {InitialConstruct}\n *   Construct.\n */\nfunction initializeFactory(field) {\n  return {\n    resolveAll: createResolver(field === 'text' ? resolveAllLineSuffixes : undefined),\n    tokenize: initializeText\n  };\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this;\n    const constructs = this.parser.constructs[field];\n    const text = effects.attempt(constructs, start, notText);\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code);\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code);\n        return;\n      }\n      effects.enter(\"data\");\n      effects.consume(code);\n      return data;\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit(\"data\");\n        return text(code);\n      }\n\n      // Data.\n      effects.consume(code);\n      return data;\n    }\n\n    /**\n     * @param {Code} code\n     *   Code.\n     * @returns {boolean}\n     *   Whether the code is a break.\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true;\n      }\n      const list = constructs[code];\n      let index = -1;\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index];\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n *   Resolver.\n * @returns {Resolver}\n *   Resolver.\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText;\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1;\n    /** @type {number | undefined} */\n    let enter;\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === \"data\") {\n          enter = index;\n          index++;\n        }\n      } else if (!events[index] || events[index][1].type !== \"data\") {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end;\n          events.splice(enter + 2, index - enter - 2);\n          index = enter + 2;\n        }\n        enter = undefined;\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events;\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0; // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if ((eventIndex === events.length || events[eventIndex][1].type === \"lineEnding\") && events[eventIndex - 1][1].type === \"data\") {\n      const data = events[eventIndex - 1][1];\n      const chunks = context.sliceStream(data);\n      let index = chunks.length;\n      let bufferIndex = -1;\n      let size = 0;\n      /** @type {boolean | undefined} */\n      let tabs;\n      while (index--) {\n        const chunk = chunks[index];\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length;\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++;\n            bufferIndex--;\n          }\n          if (bufferIndex) break;\n          bufferIndex = -1;\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true;\n          size++;\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++;\n          break;\n        }\n      }\n      if (size) {\n        const token = {\n          type: eventIndex === events.length || tabs || size < 2 ? \"lineSuffix\" : \"hardBreakTrailing\",\n          start: {\n            _bufferIndex: index ? bufferIndex : data.start._bufferIndex + bufferIndex,\n            _index: data.start._index + index,\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size\n          },\n          end: {\n            ...data.end\n          }\n        };\n        data.end = {\n          ...token.start\n        };\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token);\n        } else {\n          events.splice(eventIndex, 0, ['enter', token, context], ['exit', token, context]);\n          eventIndex += 2;\n        }\n      }\n      eventIndex++;\n    }\n  }\n  return events;\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"thematicBreak\");\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(\"thematicBreakSequence\");\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit(\"thematicBreak\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit(\"thematicBreakSequence\");\n    return markdownSpace(code) ? factorySpace(effects, atBreak, \"whitespace\")(code) : atBreak(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\nimport { blankLine } from './blank-line.js';\nimport { thematicBreak } from './thematic-break.js';\n\n/** @type {Construct} */\nexport const list = {\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd,\n  name: 'list',\n  tokenize: tokenizeListStart\n};\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  partial: true,\n  tokenize: tokenizeListItemPrefixWhitespace\n};\n\n/** @type {Construct} */\nconst indentConstruct = {\n  partial: true,\n  tokenize: tokenizeIndent\n};\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? \"listUnordered\" : \"listOrdered\");\n    if (kind === \"listUnordered\" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n      if (kind === \"listUnordered\") {\n        effects.enter(\"listItemPrefix\");\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter(\"listItemPrefix\");\n        effects.enter(\"listItemValue\");\n        return inside(code);\n      }\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit(\"listItemValue\");\n      return atMarker(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter(\"listItemMarker\");\n    effects.consume(code);\n    effects.exit(\"listItemMarker\");\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(blankLine,\n    // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"listItemPrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"listItemPrefixWhitespace\");\n      return endOfPrefix;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit(\"listItemPrefix\"), true).length;\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(blankLine, onBlank, notBlank);\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(effects, ok, \"listItemIndent\", self.containerState.size + 1)(code);\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined;\n      self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n    self.containerState.furtherBlankLines = undefined;\n    self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true;\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined;\n    // Always populated by defaults.\n\n    return factorySpace(effects, effects.attempt(list, ok, nok), \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, \"listItemIndent\", self.containerState.size + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"listItemIndent\" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Exiter}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n\n  // Always populated by defaults.\n\n  return factorySpace(effects, afterPrefix, \"listItemPrefixWhitespace\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === \"listItemPrefixWhitespace\" ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blockQuote = {\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit,\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter(\"blockQuote\", {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter(\"blockQuotePrefix\");\n      effects.enter(\"blockQuoteMarker\");\n      effects.consume(code);\n      effects.exit(\"blockQuoteMarker\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"blockQuotePrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"blockQuotePrefixWhitespace\");\n      effects.exit(\"blockQuotePrefix\");\n      return ok;\n    }\n    effects.exit(\"blockQuotePrefix\");\n    return ok(code);\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(\"blockQuote\");\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { asciiControl, markdownLineEndingOrSpace, markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factoryDestination(effects, ok, nok, type, literalType, literalMarkerType, rawType, stringType, max) {\n  const limit = max || Number.POSITIVE_INFINITY;\n  let balance = 0;\n  return start;\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type);\n      effects.enter(literalType);\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      return enclosedBefore;\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.enter(type);\n    effects.enter(rawType);\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return raw(code);\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      effects.exit(literalType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return enclosed(code);\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      return enclosedBefore(code);\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? enclosedEscape : enclosed;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code);\n      return enclosed;\n    }\n    return enclosed(code);\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (!balance && (code === null || code === 41 || markdownLineEndingOrSpace(code))) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      effects.exit(rawType);\n      effects.exit(type);\n      return ok(code);\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code);\n      balance++;\n      return raw;\n    }\n    if (code === 41) {\n      effects.consume(code);\n      balance--;\n      return raw;\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? rawEscape : raw;\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code);\n      return raw;\n    }\n    return raw(code);\n  }\n}","/**\n * @import {\n *   Effects,\n *   State,\n *   TokenizeContext,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this;\n  let size = 0;\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    effects.enter(stringType);\n    return atBreak;\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (size > 999 || code === null || code === 91 || code === 93 && !seen ||\n    // To do: remove in the future once we’ve switched from\n    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n    // which doesn’t need this.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    code === 94 && !size && '_hiddenFootnoteSupport' in self.parser.constructs) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit(stringType);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return atBreak;\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return labelInside(code);\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (code === null || code === 91 || code === 93 || markdownLineEnding(code) || size++ > 999) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    if (!seen) seen = !markdownSpace(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Effects,\n *   State,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      marker = code === 40 ? 41 : code;\n      return begin;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    return atBreak(code);\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType);\n      return begin(marker);\n    }\n    if (code === null) {\n      return nok(code);\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return factorySpace(effects, atBreak, \"linePrefix\");\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return inside(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? escape : inside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code);\n      return inside;\n    }\n    return inside(code);\n  }\n}","/**\n * @import {Effects, State} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      seen = true;\n      return start;\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, start, seen ? \"linePrefix\" : \"lineSuffix\")(code);\n    }\n    return ok(code);\n  }\n}","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return value\n  // Collapse markdown whitespace.\n  .replace(/[\\t\\n\\r ]+/g, \" \")\n  // Trim.\n  .replace(/^ | $/g, '')\n  // Some characters are considered “uppercase”, but if their lowercase\n  // counterpart is uppercased will result in a different uppercase\n  // character.\n  // Hence, to get that form, we perform both lower- and uppercase.\n  // Upper case makes sure keys will not interact with default prototypal\n  // methods: no method is uppercase.\n  .toLowerCase().toUpperCase();\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n\n/** @type {Construct} */\nconst titleBefore = {\n  partial: true,\n  tokenize: tokenizeTitleBefore\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n  let identifier;\n  return start;\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter(\"definition\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(self, effects, labelAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionLabel\", \"definitionLabelMarker\", \"definitionLabelString\")(code);\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n    if (code === 58) {\n      effects.enter(\"definitionMarker\");\n      effects.consume(code);\n      effects.exit(\"definitionMarker\");\n      return markerAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(effects, destinationAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionDestination\", \"definitionDestinationLiteral\", \"definitionDestinationLiteralMarker\", \"definitionDestinationRaw\", \"definitionDestinationString\")(code);\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, \"whitespace\")(code) : afterWhitespace(code);\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"definition\");\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier);\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore;\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(effects, titleAfter, nok, \"definitionTitle\", \"definitionTitleMarker\", \"definitionTitleString\")(code);\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, \"whitespace\")(code) : titleAfterOptionalWhitespace(code);\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  partial: true,\n  tokenize: tokenizeFurtherStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter(\"codeIndented\");\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return inside(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(\"codeIndented\");\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  resolve: resolveHeadingAtx,\n  tokenize: tokenizeHeadingAtx\n};\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n  let content;\n  /** @type {Token} */\n  let text;\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === \"whitespace\") {\n    contentStart += 2;\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === \"whitespace\") {\n    contentEnd -= 2;\n  }\n  if (events[contentEnd][1].type === \"atxHeadingSequence\" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === \"whitespace\")) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: \"atxHeadingText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: \"chunkText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: \"text\"\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter(\"atxHeading\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"atxHeadingSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return sequenceOpen;\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingSequence\");\n      return atBreak(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter(\"atxHeadingSequence\");\n      return sequenceFurther(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"atxHeading\");\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, \"whitespace\")(code);\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter(\"atxHeadingText\");\n    return data(code);\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequenceFurther;\n    }\n    effects.exit(\"atxHeadingSequence\");\n    return atBreak(code);\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingText\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  resolveTo: resolveToSetextUnderline,\n  tokenize: tokenizeSetextUnderline\n};\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length;\n  /** @type {number | undefined} */\n  let content;\n  /** @type {number | undefined} */\n  let text;\n  /** @type {number | undefined} */\n  let definition;\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === \"content\") {\n        content = index;\n        break;\n      }\n      if (events[index][1].type === \"paragraph\") {\n        text = index;\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === \"content\") {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n      if (!definition && events[index][1].type === \"definition\") {\n        definition = index;\n      }\n    }\n  }\n  const heading = {\n    type: \"setextHeading\",\n    start: {\n      ...events[text][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = \"setextHeadingText\";\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = {\n      ...events[definition][1].end\n    };\n  } else {\n    events[content][1] = heading;\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context]);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length;\n    /** @type {boolean | undefined} */\n    let paragraph;\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (self.events[index][1].type !== \"lineEnding\" && self.events[index][1].type !== \"linePrefix\" && self.events[index][1].type !== \"content\") {\n        paragraph = self.events[index][1].type === \"paragraph\";\n        break;\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(\"setextHeadingLine\");\n      marker = code;\n      return before(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"setextHeadingLineSequence\");\n    return inside(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    effects.exit(\"setextHeadingLineSequence\");\n    return markdownSpace(code) ? factorySpace(effects, after, \"lineSuffix\")(code) : after(code);\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"setextHeadingLine\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  concrete: true,\n  name: 'htmlFlow',\n  resolveTo: resolveToHtmlFlow,\n  tokenize: tokenizeHtmlFlow\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  partial: true,\n  tokenize: tokenizeBlankLineBefore\n};\nconst nonLazyContinuationStart = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuationStart\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === \"htmlFlow\") {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === \"linePrefix\") {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"htmlFlow\");\n    effects.enter(\"htmlFlowData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit(\"htmlFlowData\");\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return continuationBefore;\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter(\"htmlFlowData\");\n    return continuation(code);\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      // Always the case.\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit(\"htmlFlow\");\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuation\n};\n\n/** @type {Construct} */\nexport const codeFenced = {\n  concrete: true,\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  /** @type {Construct} */\n  const closeStart = {\n    partial: true,\n    tokenize: tokenizeCloseStart\n  };\n  let initialPrefix = 0;\n  let sizeOpen = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code);\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1];\n    initialPrefix = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    marker = code;\n    effects.enter(\"codeFenced\");\n    effects.enter(\"codeFencedFence\");\n    effects.enter(\"codeFencedFenceSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++;\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (sizeOpen < 3) {\n      return nok(code);\n    }\n    effects.exit(\"codeFencedFenceSequence\");\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, \"whitespace\")(code) : infoBefore(code);\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFencedFence\");\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFencedFenceInfo\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return info(code);\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return infoBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return factorySpace(effects, metaBefore, \"whitespace\")(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return info;\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code);\n    }\n    effects.enter(\"codeFencedFenceMeta\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return meta(code);\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceMeta\");\n      return infoBefore(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return meta;\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code);\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return contentStart;\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, \"linePrefix\", initialPrefix + 1)(code) : beforeContentChunk(code);\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return contentChunk(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return beforeContentChunk(code);\n    }\n    effects.consume(code);\n    return contentChunk;\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit(\"codeFenced\");\n    return ok(code);\n  }\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0;\n    return startBefore;\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return start;\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter(\"codeFencedFence\");\n      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter(\"codeFencedFenceSequence\");\n        return sequenceClose(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++;\n        effects.consume(code);\n        return sequenceClose;\n      }\n      if (size >= sizeOpen) {\n        effects.exit(\"codeFencedFenceSequence\");\n        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, \"whitespace\")(code) : sequenceCloseAfter(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit(\"codeFencedFence\");\n        return ok(code);\n      }\n      return nok(code);\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineStart;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterReference\");\n    effects.enter(\"characterReferenceMarker\");\n    effects.consume(code);\n    effects.exit(\"characterReferenceMarker\");\n    return open;\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter(\"characterReferenceMarkerNumeric\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerNumeric\");\n      return numeric;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter(\"characterReferenceMarkerHexadecimal\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerHexadecimal\");\n      effects.enter(\"characterReferenceValue\");\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit(\"characterReferenceValue\");\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter(\"characterReferenceMarker\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarker\");\n      effects.exit(\"characterReference\");\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterEscape\");\n    effects.enter(\"escapeMarker\");\n    effects.consume(code);\n    effects.exit(\"escapeMarker\");\n    return inside;\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(\"characterEscapeValue\");\n      effects.consume(code);\n      effects.exit(\"characterEscapeValue\");\n      effects.exit(\"characterEscape\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, ok, \"linePrefix\");\n  }\n}","/**\n * @import {Event, Resolver, TokenizeContext} from 'micromark-util-types'\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {ReadonlyArray<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @import {\n *   Construct,\n *   Event,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  resolveAll: resolveAllLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  tokenize: tokenizeLabelEnd\n};\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n};\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n};\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1;\n  /** @type {Array<Event>} */\n  const newEvents = [];\n  while (++index < events.length) {\n    const token = events[index][1];\n    newEvents.push(events[index]);\n    if (token.type === \"labelImage\" || token.type === \"labelLink\" || token.type === \"labelEnd\") {\n      // Remove the marker.\n      const offset = token.type === \"labelImage\" ? 4 : 2;\n      token.type = \"data\";\n      index += offset;\n    }\n  }\n\n  // If the events are equal, we don't have to copy newEvents to events\n  if (events.length !== newEvents.length) {\n    splice(events, 0, events.length, newEvents);\n  }\n  return events;\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length;\n  let offset = 0;\n  /** @type {Token} */\n  let token;\n  /** @type {number | undefined} */\n  let open;\n  /** @type {number | undefined} */\n  let close;\n  /** @type {Array<Event>} */\n  let media;\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1];\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (token.type === \"link\" || token.type === \"labelLink\" && token._inactive) {\n        break;\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === \"labelLink\") {\n        token._inactive = true;\n      }\n    } else if (close) {\n      if (events[index][0] === 'enter' && (token.type === \"labelImage\" || token.type === \"labelLink\") && !token._balanced) {\n        open = index;\n        if (token.type !== \"labelLink\") {\n          offset = 2;\n          break;\n        }\n      }\n    } else if (token.type === \"labelEnd\") {\n      close = index;\n    }\n  }\n  const group = {\n    type: events[open][1].type === \"labelLink\" ? \"link\" : \"image\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n  const label = {\n    type: \"label\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[close][1].end\n    }\n  };\n  const text = {\n    type: \"labelText\",\n    start: {\n      ...events[open + offset + 2][1].end\n    },\n    end: {\n      ...events[close - 2][1].start\n    }\n  };\n  media = [['enter', group, context], ['enter', label, context]];\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3));\n\n  // Text open.\n  media = push(media, [['enter', text, context]]);\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n\n  // Text close, marker close, label close.\n  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1));\n\n  // Media close.\n  media = push(media, [['exit', group, context]]);\n  splice(events, open, events.length, media);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Token} */\n  let labelStart;\n  /** @type {boolean} */\n  let defined;\n\n  // Find an opening.\n  while (index--) {\n    if ((self.events[index][1].type === \"labelImage\" || self.events[index][1].type === \"labelLink\") && !self.events[index][1]._balanced) {\n      labelStart = self.events[index][1];\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code);\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code);\n    }\n    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    })));\n    effects.enter(\"labelEnd\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelEnd\");\n    return after;\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code);\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code);\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true;\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart;\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter(\"resource\");\n    effects.enter(\"resourceMarker\");\n    effects.consume(code);\n    effects.exit(\"resourceMarker\");\n    return resourceBefore;\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code);\n    }\n    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, \"resourceDestination\", \"resourceDestinationLiteral\", \"resourceDestinationLiteralMarker\", \"resourceDestinationRaw\", \"resourceDestinationString\", 32)(code);\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code);\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(effects, resourceTitleAfter, nok, \"resourceTitle\", \"resourceTitleMarker\", \"resourceTitleString\")(code);\n    }\n    return resourceEnd(code);\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter(\"resourceMarker\");\n      effects.consume(code);\n      effects.exit(\"resourceMarker\");\n      effects.exit(\"resource\");\n      return ok;\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this;\n  return referenceFull;\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, \"reference\", \"referenceMarker\", \"referenceString\")(code);\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart;\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter(\"reference\");\n    effects.enter(\"referenceMarker\");\n    effects.consume(code);\n    effects.exit(\"referenceMarker\");\n    return referenceCollapsedOpen;\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter(\"referenceMarker\");\n      effects.consume(code);\n      effects.exit(\"referenceMarker\");\n      effects.exit(\"reference\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartImage\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelImage\");\n    effects.enter(\"labelImageMarker\");\n    effects.consume(code);\n    effects.exit(\"labelImageMarker\");\n    return open;\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter(\"labelMarker\");\n      effects.consume(code);\n      effects.exit(\"labelMarker\");\n      effects.exit(\"labelImage\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\nimport { markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n    return 1;\n  }\n  if (unicodePunctuation(code)) {\n    return 2;\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Event,\n *   Point,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { push, splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  resolveAll: resolveAllAttention,\n  tokenize: tokenizeAttention\n};\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1;\n  /** @type {number} */\n  let open;\n  /** @type {Token} */\n  let group;\n  /** @type {Token} */\n  let text;\n  /** @type {Token} */\n  let openingSequence;\n  /** @type {Token} */\n  let closingSequence;\n  /** @type {number} */\n  let use;\n  /** @type {Array<Event>} */\n  let nextEvents;\n  /** @type {number} */\n  let offset;\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index;\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&\n        // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          }\n\n          // Number of markers to use from the sequence.\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          const start = {\n            ...events[open][1].end\n          };\n          const end = {\n            ...events[index][1].start\n          };\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start,\n            end: {\n              ...events[open][1].end\n            }\n          };\n          closingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start: {\n              ...events[index][1].start\n            },\n            end\n          };\n          text = {\n            type: use > 1 ? \"strongText\" : \"emphasisText\",\n            start: {\n              ...events[open][1].end\n            },\n            end: {\n              ...events[index][1].start\n            }\n          };\n          group = {\n            type: use > 1 ? \"strong\" : \"emphasis\",\n            start: {\n              ...openingSequence.start\n            },\n            end: {\n              ...closingSequence.end\n            }\n          };\n          events[open][1].end = {\n            ...openingSequence.start\n          };\n          events[index][1].start = {\n            ...closingSequence.end\n          };\n          nextEvents = [];\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n\n          // Closing.\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n          splice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1;\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n  const previous = this.previous;\n  const before = classifyCharacter(previous);\n\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code;\n    effects.enter('attentionSequence');\n    return inside(code);\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    const token = effects.exit('attentionSequence');\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code);\n\n    // Always populated by defaults.\n\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n *   Point.\n * @param {number} offset\n *   Amount to move.\n * @returns {undefined}\n *   Nothing.\n */\nfunction movePoint(point, offset) {\n  point.column += offset;\n  point.offset += offset;\n  point._bufferIndex += offset;\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"autolink\");\n    effects.enter(\"autolinkMarker\");\n    effects.consume(code);\n    effects.exit(\"autolinkMarker\");\n    effects.enter(\"autolinkProtocol\");\n    return open;\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    if (code === 64) {\n      return nok(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit(\"autolinkProtocol\");\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit(\"autolinkProtocol\").type = \"autolinkEmail\";\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  /** @type {number} */\n  let index;\n  /** @type {State} */\n  let returnState;\n  return start;\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"htmlText\");\n    effects.enter(\"htmlTextData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      index = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = undefined;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit(\"htmlTextData\");\n      effects.exit(\"htmlText\");\n      return ok;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit(\"htmlTextData\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineEndingAfter;\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter(\"htmlTextData\");\n    return returnState(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartLink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelLink\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelLink\");\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"hardBreakEscape\");\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(\"hardBreakEscape\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Previous,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  previous,\n  resolve: resolveCodeText,\n  tokenize: tokenizeCodeText\n};\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n  let index;\n  /** @type {number | undefined} */\n  let enter;\n\n  // If we start and end with an EOL or a space.\n  if ((events[headEnterIndex][1].type === \"lineEnding\" || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === \"lineEnding\" || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex;\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === \"codeTextData\") {\n        // Then we have padding.\n        events[headEnterIndex][1].type = \"codeTextPadding\";\n        events[tailExitIndex][1].type = \"codeTextPadding\";\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== \"lineEnding\") {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === \"lineEnding\") {\n      events[enter][1].type = \"codeTextData\";\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n      enter = undefined;\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === \"characterEscape\";\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n  let size;\n  /** @type {Token} */\n  let token;\n  return start;\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"codeText\");\n    effects.enter(\"codeTextSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit(\"codeTextSequence\");\n    return between(code);\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return between;\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter(\"codeTextSequence\");\n      size = 0;\n      return sequenceClose(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return between;\n    }\n\n    // Data.\n    effects.enter(\"codeTextData\");\n    return data(code);\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit(\"codeTextData\");\n      return between(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return sequenceClose;\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit(\"codeTextSequence\");\n      effects.exit(\"codeText\");\n      return ok(code);\n    }\n\n    // More or less accents: mark as data.\n    token.type = \"codeTextData\";\n    return data(code);\n  }\n}","/**\n * @import {Extension} from 'micromark-util-types'\n */\n\nimport { attention, autolink, blockQuote, characterEscape, characterReference, codeFenced, codeIndented, codeText, definition, hardBreakEscape, headingAtx, htmlFlow, htmlText, labelEnd, labelStartImage, labelStartLink, lineEnding, list, setextUnderline, thematicBreak } from 'micromark-core-commonmark';\nimport { resolver as resolveText } from './initialize/text.js';\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n};\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n};\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n};\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n};\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n};\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n};\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n};\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n};\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n};","/**\n * @import {\n *   Chunk,\n *   Code,\n *   ConstructRecord,\n *   Construct,\n *   Effects,\n *   InitialConstruct,\n *   ParseContext,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @callback Restore\n *   Restore the state.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef Info\n *   Info.\n * @property {Restore} restore\n *   Restore.\n * @property {number} from\n *   From.\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n *   Construct.\n * @param {Info} info\n *   Info.\n * @returns {undefined}\n *   Nothing.\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n *   Parser.\n * @param {InitialConstruct} initialize\n *   Construct.\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n *   Point (optional).\n * @returns {TokenizeContext}\n *   Context.\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = {\n    _bufferIndex: -1,\n    _index: 0,\n    line: from && from.line || 1,\n    column: from && from.column || 1,\n    offset: from && from.offset || 0\n  };\n  /** @type {Record<string, number>} */\n  const columnStart = {};\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = [];\n  /** @type {Array<Chunk>} */\n  let chunks = [];\n  /** @type {Array<Token>} */\n  let stack = [];\n  /** @type {boolean | undefined} */\n  let consumed = true;\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    consume,\n    enter,\n    exit,\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  };\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    code: null,\n    containerState: {},\n    defineSkip,\n    events: [],\n    now,\n    parser,\n    previous: null,\n    sliceSerialize,\n    sliceStream,\n    write\n  };\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects);\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode;\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize);\n  }\n  return context;\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice);\n    main();\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return [];\n    }\n    addResult(initialize, 0);\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context);\n    return context.events;\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs);\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token);\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    } = point;\n    return {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    };\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column;\n    accountForPotentialSkip();\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex;\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index];\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index;\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0;\n        }\n        while (point._index === chunkIndex && point._bufferIndex < chunk.length) {\n          go(chunk.charCodeAt(point._bufferIndex));\n        }\n      } else {\n        go(chunk);\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   *   Code.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function go(code) {\n    consumed = undefined;\n    expectedCode = code;\n    state = state(code);\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++;\n      point.column = 1;\n      point.offset += code === -3 ? 2 : 1;\n      accountForPotentialSkip();\n    } else if (code !== -1) {\n      point.column++;\n      point.offset++;\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++;\n    } else {\n      point._bufferIndex++;\n\n      // At end of string chunk.\n      if (point._bufferIndex ===\n      // Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      /** @type {string} */\n      chunks[point._index].length) {\n        point._bufferIndex = -1;\n        point._index++;\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code;\n\n    // Mark as consumed.\n    consumed = true;\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {};\n    token.type = type;\n    token.start = now();\n    context.events.push(['enter', token, context]);\n    stack.push(token);\n    return token;\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop();\n    token.end = now();\n    context.events.push(['exit', token, context]);\n    return token;\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from);\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore();\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   *   Callback.\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   *   Fields.\n   */\n  function constructFactory(onreturn, fields) {\n    return hook;\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | ConstructRecord | Construct} constructs\n     *   Constructs.\n     * @param {State} returnState\n     *   State.\n     * @param {State | undefined} [bogusState]\n     *   State.\n     * @returns {State}\n     *   State.\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {ReadonlyArray<Construct>} */\n      let listOfConstructs;\n      /** @type {number} */\n      let constructIndex;\n      /** @type {Construct} */\n      let currentConstruct;\n      /** @type {Info} */\n      let info;\n      return Array.isArray(constructs) ? /* c8 ignore next 1 */\n      handleListOfConstructs(constructs) : 'tokenize' in constructs ?\n      // Looks like a construct.\n      handleListOfConstructs([(/** @type {Construct} */constructs)]) : handleMapOfConstructs(constructs);\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleMapOfConstructs(map) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          const left = code !== null && map[code];\n          const all = code !== null && map.null;\n          const list = [\n          // To do: add more extension tests.\n          /* c8 ignore next 2 */\n          ...(Array.isArray(left) ? left : left ? [left] : []), ...(Array.isArray(all) ? all : all ? [all] : [])];\n          return handleListOfConstructs(list)(code);\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ReadonlyArray<Construct>} list\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list;\n        constructIndex = 0;\n        if (list.length === 0) {\n          return bogusState;\n        }\n        return handleConstruct(list[constructIndex]);\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       *   Construct.\n       * @returns {State}\n       *   State.\n       */\n      function handleConstruct(construct) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store();\n          currentConstruct = construct;\n          if (!construct.partial) {\n            context.currentConstruct = construct;\n          }\n\n          // Always populated by defaults.\n\n          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {\n            return nok(code);\n          }\n          return construct.tokenize.call(\n          // If we do have fields, create an object w/ `context` as its\n          // prototype.\n          // This allows a “live binding”, which is needed for `interrupt`.\n          fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true;\n        onreturn(currentConstruct, info);\n        return returnState;\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true;\n        info.restore();\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex]);\n        }\n        return bogusState;\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   *   Construct.\n   * @param {number} from\n   *   From.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct);\n    }\n    if (construct.resolve) {\n      splice(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context);\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   *   Info.\n   */\n  function store() {\n    const startPoint = now();\n    const startPrevious = context.previous;\n    const startCurrentConstruct = context.currentConstruct;\n    const startEventsIndex = context.events.length;\n    const startStack = Array.from(stack);\n    return {\n      from: startEventsIndex,\n      restore\n    };\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     *   Nothing.\n     */\n    function restore() {\n      point = startPoint;\n      context.previous = startPrevious;\n      context.currentConstruct = startCurrentConstruct;\n      context.events.length = startEventsIndex;\n      stack = startStack;\n      accountForPotentialSkip();\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line];\n      point.offset += columnStart[point.line] - 1;\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {Pick<Token, 'end' | 'start'>} token\n *   Token.\n * @returns {Array<Chunk>}\n *   Chunks.\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index;\n  const startBufferIndex = token.start._bufferIndex;\n  const endIndex = token.end._index;\n  const endBufferIndex = token.end._bufferIndex;\n  /** @type {Array<Chunk>} */\n  let view;\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];\n  } else {\n    view = chunks.slice(startIndex, endIndex);\n    if (startBufferIndex > -1) {\n      const head = view[0];\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex);\n      } else {\n        view.shift();\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex));\n    }\n  }\n  return view;\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {boolean | undefined} [expandTabs=false]\n *   Whether to expand tabs (default: `false`).\n * @returns {string}\n *   Result.\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1;\n  /** @type {Array<string>} */\n  const result = [];\n  /** @type {boolean | undefined} */\n  let atTab;\n  while (++index < chunks.length) {\n    const chunk = chunks[index];\n    /** @type {string} */\n    let value;\n    if (typeof chunk === 'string') {\n      value = chunk;\n    } else switch (chunk) {\n      case -5:\n        {\n          value = \"\\r\";\n          break;\n        }\n      case -4:\n        {\n          value = \"\\n\";\n          break;\n        }\n      case -3:\n        {\n          value = \"\\r\" + \"\\n\";\n          break;\n        }\n      case -2:\n        {\n          value = expandTabs ? \" \" : \"\\t\";\n          break;\n        }\n      case -1:\n        {\n          if (!expandTabs && atTab) continue;\n          value = \" \";\n          break;\n        }\n      default:\n        {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk);\n        }\n    }\n    atTab = chunk === -2;\n    result.push(value);\n  }\n  return result.join('');\n}","/**\n * @import {\n *   Create,\n *   FullNormalizedExtension,\n *   InitialConstruct,\n *   ParseContext,\n *   ParseOptions\n * } from 'micromark-util-types'\n */\n\nimport { combineExtensions } from 'micromark-util-combine-extensions';\nimport { content } from './initialize/content.js';\nimport { document } from './initialize/document.js';\nimport { flow } from './initialize/flow.js';\nimport { string, text } from './initialize/text.js';\nimport * as defaultConstructs from './constructs.js';\nimport { createTokenizer } from './create-tokenizer.js';\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ParseContext}\n *   Parser.\n */\nexport function parse(options) {\n  const settings = options || {};\n  const constructs = /** @type {FullNormalizedExtension} */\n  combineExtensions([defaultConstructs, ...(settings.extensions || [])]);\n\n  /** @type {ParseContext} */\n  const parser = {\n    constructs,\n    content: create(content),\n    defined: [],\n    document: create(document),\n    flow: create(flow),\n    lazy: {},\n    string: create(string),\n    text: create(text)\n  };\n  return parser;\n\n  /**\n   * @param {InitialConstruct} initial\n   *   Construct to start with.\n   * @returns {Create}\n   *   Create a tokenizer.\n   */\n  function create(initial) {\n    return creator;\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from);\n    }\n  }\n}","/**\n * @import {Chunk, Code, Encoding, Value} from 'micromark-util-types'\n */\n\n/**\n * @callback Preprocessor\n *   Preprocess a value.\n * @param {Value} value\n *   Value.\n * @param {Encoding | null | undefined} [encoding]\n *   Encoding when `value` is a typed array (optional).\n * @param {boolean | null | undefined} [end=false]\n *   Whether this is the last chunk (default: `false`).\n * @returns {Array<Chunk>}\n *   Chunks.\n */\n\nconst search = /[\\0\\t\\n\\r]/g;\n\n/**\n * @returns {Preprocessor}\n *   Preprocess a value.\n */\nexport function preprocess() {\n  let column = 1;\n  let buffer = '';\n  /** @type {boolean | undefined} */\n  let start = true;\n  /** @type {boolean | undefined} */\n  let atCarriageReturn;\n  return preprocessor;\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = [];\n    /** @type {RegExpMatchArray | null} */\n    let match;\n    /** @type {number} */\n    let next;\n    /** @type {number} */\n    let startPosition;\n    /** @type {number} */\n    let endPosition;\n    /** @type {Code} */\n    let code;\n    value = buffer + (typeof value === 'string' ? value.toString() : new TextDecoder(encoding || undefined).decode(value));\n    startPosition = 0;\n    buffer = '';\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++;\n      }\n      start = undefined;\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition;\n      match = search.exec(value);\n      endPosition = match && match.index !== undefined ? match.index : value.length;\n      code = value.charCodeAt(endPosition);\n      if (!match) {\n        buffer = value.slice(startPosition);\n        break;\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3);\n        atCarriageReturn = undefined;\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5);\n          atCarriageReturn = undefined;\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition));\n          column += endPosition - startPosition;\n        }\n        switch (code) {\n          case 0:\n            {\n              chunks.push(65533);\n              column++;\n              break;\n            }\n          case 9:\n            {\n              next = Math.ceil(column / 4) * 4;\n              chunks.push(-2);\n              while (column++ < next) chunks.push(-1);\n              break;\n            }\n          case 10:\n            {\n              chunks.push(-4);\n              column = 1;\n              break;\n            }\n          default:\n            {\n              atCarriageReturn = true;\n              column = 1;\n            }\n        }\n      }\n      startPosition = endPosition + 1;\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5);\n      if (buffer) chunks.push(buffer);\n      chunks.push(null);\n    }\n    return chunks;\n  }\n}","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","import { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nconst characterEscapeOrReference = /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi;\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode);\n}\n\n/**\n * @param {string} $0\n *   Match.\n * @param {string} $1\n *   Character escape.\n * @param {string} $2\n *   Character reference.\n * @returns {string}\n *   Decoded value\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1;\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0);\n  if (head === 35) {\n    const head = $2.charCodeAt(1);\n    const hex = head === 120 || head === 88;\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10);\n  }\n  return decodeNamedCharacterReference($2) || $0;\n}","/**\n * @import {\n *   Break,\n *   Blockquote,\n *   Code,\n *   Definition,\n *   Emphasis,\n *   Heading,\n *   Html,\n *   Image,\n *   InlineCode,\n *   Link,\n *   ListItem,\n *   List,\n *   Nodes,\n *   Paragraph,\n *   PhrasingContent,\n *   ReferenceType,\n *   Root,\n *   Strong,\n *   Text,\n *   ThematicBreak\n * } from 'mdast'\n * @import {\n *   Encoding,\n *   Event,\n *   Token,\n *   Value\n * } from 'micromark-util-types'\n * @import {Point} from 'unist'\n * @import {\n *   CompileContext,\n *   CompileData,\n *   Config,\n *   Extension,\n *   Handle,\n *   OnEnterError,\n *   Options\n * } from './types.js'\n */\n\nimport { toString } from 'mdast-util-to-string';\nimport { parse, postprocess, preprocess } from 'micromark';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { decodeString } from 'micromark-util-decode-string';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { stringifyPosition } from 'unist-util-stringify-position';\nconst own = {}.hasOwnProperty;\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n  return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      characterReference: onexitcharacterreference,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  };\n  configure(config, (options || {}).mdastExtensions || []);\n\n  /** @type {CompileData} */\n  const data = {};\n  return compile;\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    };\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    };\n    /** @type {Array<number>} */\n    const listStack = [];\n    let index = -1;\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (events[index][1].type === \"listOrdered\" || events[index][1].type === \"listUnordered\") {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          const tail = listStack.pop();\n          index = prepareList(events, tail, index);\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      const handler = config[events[index][0]];\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(Object.assign({\n          sliceSerialize: events[index][2].sliceSerialize\n        }, context), events[index][1]);\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1];\n      const handler = tail[1] || defaultOnError;\n      handler.call(context, undefined, tail[0]);\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(events.length > 0 ? events[0][1].start : {\n        line: 1,\n        column: 1,\n        offset: 0\n      }),\n      end: point(events.length > 0 ? events[events.length - 2][1].end : {\n        line: 1,\n        column: 1,\n        offset: 0\n      })\n    };\n\n    // Call transforms.\n    index = -1;\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree;\n    }\n    return tree;\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1;\n    let containerBalance = -1;\n    let listSpread = false;\n    /** @type {Token | undefined} */\n    let listItem;\n    /** @type {number | undefined} */\n    let lineIndex;\n    /** @type {number | undefined} */\n    let firstBlankLineIndex;\n    /** @type {boolean | undefined} */\n    let atMarker;\n    while (++index <= length) {\n      const event = events[index];\n      switch (event[1].type) {\n        case \"listUnordered\":\n        case \"listOrdered\":\n        case \"blockQuote\":\n          {\n            if (event[0] === 'enter') {\n              containerBalance++;\n            } else {\n              containerBalance--;\n            }\n            atMarker = undefined;\n            break;\n          }\n        case \"lineEndingBlank\":\n          {\n            if (event[0] === 'enter') {\n              if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n                firstBlankLineIndex = index;\n              }\n              atMarker = undefined;\n            }\n            break;\n          }\n        case \"linePrefix\":\n        case \"listItemValue\":\n        case \"listItemMarker\":\n        case \"listItemPrefix\":\n        case \"listItemPrefixWhitespace\":\n          {\n            // Empty.\n\n            break;\n          }\n        default:\n          {\n            atMarker = undefined;\n          }\n      }\n      if (!containerBalance && event[0] === 'enter' && event[1].type === \"listItemPrefix\" || containerBalance === -1 && event[0] === 'exit' && (event[1].type === \"listUnordered\" || event[1].type === \"listOrdered\")) {\n        if (listItem) {\n          let tailIndex = index;\n          lineIndex = undefined;\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex];\n            if (tailEvent[1].type === \"lineEnding\" || tailEvent[1].type === \"lineEndingBlank\") {\n              if (tailEvent[0] === 'exit') continue;\n              if (lineIndex) {\n                events[lineIndex][1].type = \"lineEndingBlank\";\n                listSpread = true;\n              }\n              tailEvent[1].type = \"lineEnding\";\n              lineIndex = tailIndex;\n            } else if (tailEvent[1].type === \"linePrefix\" || tailEvent[1].type === \"blockQuotePrefix\" || tailEvent[1].type === \"blockQuotePrefixWhitespace\" || tailEvent[1].type === \"blockQuoteMarker\" || tailEvent[1].type === \"listItemIndent\") {\n              // Empty\n            } else {\n              break;\n            }\n          }\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n            listItem._spread = true;\n          }\n\n          // Fix position.\n          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);\n          index++;\n          length++;\n        }\n\n        // Create a new list item.\n        if (event[1].type === \"listItemPrefix\") {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          };\n          listItem = item;\n          events.splice(index, 0, ['enter', item, event[2]]);\n          index++;\n          length++;\n          firstBlankLineIndex = undefined;\n          atMarker = true;\n        }\n      }\n    }\n    events[start][1]._spread = listSpread;\n    return length;\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token);\n      if (and) and.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['buffer']}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    });\n  }\n\n  /**\n   * @type {CompileContext['enter']}\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children;\n    siblings.push(node);\n    this.stack.push(node);\n    this.tokenStack.push([token, errorHandler || undefined]);\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    };\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token);\n      exit.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['exit']}\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop();\n    const open = this.tokenStack.pop();\n    if (!open) {\n      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({\n        start: token.start,\n        end: token.end\n      }) + '): it’s not open');\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0]);\n      } else {\n        const handler = open[1] || defaultOnError;\n        handler.call(this, token, open[0]);\n      }\n    }\n    node.position.end = point(token.end);\n  }\n\n  /**\n   * @type {CompileContext['resume']}\n   */\n  function resume() {\n    return toString(this.stack.pop());\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2];\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\n      this.data.expectingFirstListItemValue = undefined;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.lang = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.meta = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return;\n    this.buffer();\n    this.data.flowCodeInside = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '');\n    this.data.flowCodeInside = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length;\n      node.depth = depth;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = node.children;\n    let tail = siblings[siblings.length - 1];\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text();\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      };\n      siblings.push(tail);\n    }\n    this.stack.push(tail);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop();\n    tail.value += this.sliceSerialize(token);\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1];\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1];\n      tail.position.end = point(token.end);\n      this.data.atHardBreak = undefined;\n      return;\n    }\n    if (!this.data.setextHeadingSlurpLineEnding && config.canContainEols.includes(context.type)) {\n      onenterdata.call(this, token);\n      onexitdata.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token);\n    const ancestor = this.stack[this.stack.length - 2];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string);\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1];\n    const value = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // Assume a reference.\n    this.data.inReference = true;\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children;\n      node.children = children;\n    } else {\n      node.alt = value;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label;\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n    this.data.referenceType = 'full';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token);\n    const type = this.data.characterReferenceType;\n    /** @type {string} */\n    let value;\n    if (type) {\n      value = decodeNumericCharacterReference(data, type === \"characterReferenceMarkerNumeric\" ? 10 : 16);\n      this.data.characterReferenceType = undefined;\n    } else {\n      const result = decodeNamedCharacterReference(data);\n      value = result;\n    }\n    const tail = this.stack[this.stack.length - 1];\n    tail.value += value;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreference(token) {\n    const tail = this.stack.pop();\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = 'mailto:' + this.sliceSerialize(token);\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    };\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    };\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    };\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    };\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    };\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    };\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    };\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    };\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    };\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    };\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    };\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    };\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    };\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  };\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1;\n  while (++index < extensions.length) {\n    const value = extensions[index];\n    if (Array.isArray(value)) {\n      configure(combined, value);\n    } else {\n      extension(combined, value);\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key;\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'transforms':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'enter':\n        case 'exit':\n          {\n            const right = extension[key];\n            if (right) {\n              Object.assign(combined[key], right);\n            }\n            break;\n          }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({\n      start: left.start,\n      end: left.end\n    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is open');\n  } else {\n    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is still open');\n  }\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\nimport { subtokenize } from 'micromark-util-subtokenize';\n\n/**\n * @param {Array<Event>} events\n *   Events.\n * @returns {Array<Event>}\n *   Events.\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events;\n}","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","import { asciiAlphanumeric } from 'micromark-util-character';\nimport { encode } from 'micromark-util-encode';\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''));\n  if (!protocol) {\n    return value;\n  }\n  const colon = value.indexOf(':');\n  const questionMark = value.indexOf('?');\n  const numberSign = value.indexOf('#');\n  const slash = value.indexOf('/');\n  if (\n  // If there is no protocol, it’s relative.\n  colon < 0 ||\n  // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n  slash > -1 && colon > slash || questionMark > -1 && colon > questionMark || numberSign > -1 && colon > numberSign ||\n  // It is a protocol, it should be allowed.\n  protocol.test(value.slice(0, colon))) {\n    return value;\n  }\n  return '';\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = [];\n  let index = -1;\n  let start = 0;\n  let skip = 0;\n  while (++index < value.length) {\n    const code = value.charCodeAt(index);\n    /** @type {string} */\n    let replace = '';\n\n    // A correct percent encoded value.\n    if (code === 37 && asciiAlphanumeric(value.charCodeAt(index + 1)) && asciiAlphanumeric(value.charCodeAt(index + 2))) {\n      skip = 2;\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code);\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1);\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next);\n        skip = 1;\n      }\n      // Lone surrogate.\n      else {\n        replace = \"\\uFFFD\";\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code);\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace));\n      start = index + skip + 1;\n      replace = '';\n    }\n    if (skip) {\n      index += skip;\n      skip = 0;\n    }\n  }\n  return result.join('') + value.slice(start);\n}","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const definition = state.footnoteById.get(\n      state.footnoteOrder[referenceIndex]\n    )\n\n    if (!definition) {\n      continue\n    }\n\n    const content = state.all(definition)\n    const id = String(definition.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(definition, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(definition.url || ''), alt: node.alt}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(definition.url || '')}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {VFile | null | undefined} [file]\n *   Corresponding virtual file representing the input document (optional).\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","// Include `data` fields in mdast and `raw` nodes in hast.\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @import {Root as HastRoot} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {Options as ToHastOptions} from 'mdast-util-to-hast'\n * @import {Processor} from 'unified'\n * @import {VFile} from 'vfile'\n */\n\n/**\n * @typedef {Omit<ToHastOptions, 'file'>} Options\n *\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * *   if a processor is given, runs the (rehype) plugins used on it with a\n *     hast tree, then discards the result (*bridge mode*)\n * *   otherwise, returns a hast tree, the plugins used after `remarkRehype`\n *     are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**: It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * *   `rehype-stringify` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful if\n *     you completely trust authors\n * *   `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only way\n *     to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given, configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (\n        toHast(tree, {file, ...options})\n      )\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree, file) {\n    // Cast because root in -> root out.\n    // To do: in the future, disallow ` || options` fallback.\n    // With `unified-engine`, `destination` can be `undefined` but\n    // `options` will be the file set.\n    // We should not pass that as `options`.\n    return /** @type {HastRoot} */ (\n      toHast(tree, {file, ...(destination || options)})\n    )\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result && result.then && typeof result.then === 'function') {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const minpath = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [extname]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, extname) {\n  if (extname !== undefined && typeof extname !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (\n    extname === undefined ||\n    extname.length === 0 ||\n    extname.length > path.length\n  ) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (extname === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extnameIndex = extname.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extnameIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === extname.codePointAt(extnameIndex--)) {\n          if (extnameIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extnameIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n      ? '//'\n      : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const minproc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @import {Node, Point, Position} from 'unist'\n * @import {Options as MessageOptions} from 'vfile-message'\n * @import {Compatible, Data, Map, Options, Value} from 'vfile'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {minpath} from '#minpath'\nimport {minproc} from '#minproc'\nimport {urlToPath, isUrl} from '#minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    // Prevent calling `cwd` (which could be expensive) if it’s not needed;\n    // the empty string will be overridden in the next block.\n    this.cwd = 'cwd' in options ? '' : minproc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const field = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        field in options &&\n        options[field] !== undefined &&\n        options[field] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[field] = field === 'history' ? [...options[field]] : options[field]\n      }\n    }\n\n    /** @type {string} */\n    let field\n\n    // Set non-path related properties.\n    for (field in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(field)) {\n        // @ts-expect-error: fine to set other things.\n        this[field] = options[field]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path)\n      : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = minpath.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string'\n      ? minpath.dirname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = minpath.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string'\n      ? minpath.extname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = minpath.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = minpath.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(minpath.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + minpath.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const value = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return value.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        // Not needed for us in `unified`: we only call this on the `copy`\n        // function,\n        // and we don't need to add its fields (`length`, `name`)\n        // over.\n        // See also: GH-246.\n        // const names = Object.getOwnPropertyNames(value)\n        //\n        // for (const p of names) {\n        //   const descriptor = Object.getOwnPropertyDescriptor(value, p)\n        //   if (descriptor) Object.defineProperty(apply, p, descriptor)\n        // }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@linkcode CompileResultMap}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@linkcode Node}\n *   and {@linkcode VFile} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@linkcode CompileResultMap}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@linkcode VFile} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@linkcode Node}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@linkcode VFile} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@linkcode VFile}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@linkcode Processor}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > **Note**: to register custom data in TypeScript, augment the\n   * > {@linkcode Data} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","// Register `Raw` in tree:\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast-util-to-jsx-runtime').Components} JsxRuntimeComponents\n * @typedef {import('remark-rehype').Options} RemarkRehypeOptions\n * @typedef {import('unist-util-visit').BuildVisitor<Root>} Visitor\n * @typedef {import('unified').PluggableList} PluggableList\n */\n\n/**\n * @callback AllowElement\n *   Filter elements.\n * @param {Readonly<Element>} element\n *   Element to check.\n * @param {number} index\n *   Index of `element` in `parent`.\n * @param {Readonly<Parents> | undefined} parent\n *   Parent of `element`.\n * @returns {boolean | null | undefined}\n *   Whether to allow `element` (default: `false`).\n *\n * @typedef {Partial<JsxRuntimeComponents>} Components\n *   Map tag names to components.\n *\n * @typedef Deprecation\n *   Deprecation.\n * @property {string} from\n *   Old field.\n * @property {string} id\n *   ID in readme.\n * @property {keyof Options} [to]\n *   New field.\n *\n * @typedef Options\n *   Configuration.\n * @property {AllowElement | null | undefined} [allowElement]\n *   Filter elements (optional);\n *   `allowedElements` / `disallowedElements` is used first.\n * @property {ReadonlyArray<string> | null | undefined} [allowedElements]\n *   Tag names to allow (default: all tag names);\n *   cannot combine w/ `disallowedElements`.\n * @property {string | null | undefined} [children]\n *   Markdown.\n * @property {string | null | undefined} [className]\n *   Wrap in a `div` with this class name.\n * @property {Components | null | undefined} [components]\n *   Map tag names to components.\n * @property {ReadonlyArray<string> | null | undefined} [disallowedElements]\n *   Tag names to disallow (default: `[]`);\n *   cannot combine w/ `allowedElements`.\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins to use.\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins to use.\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype`.\n * @property {boolean | null | undefined} [skipHtml=false]\n *   Ignore HTML in markdown completely (default: `false`).\n * @property {boolean | null | undefined} [unwrapDisallowed=false]\n *   Extract (unwrap) what’s in disallowed elements (default: `false`);\n *   normally when say `strong` is not allowed, it and it’s children are dropped,\n *   with `unwrapDisallowed` the element itself is replaced by its children.\n * @property {UrlTransform | null | undefined} [urlTransform]\n *   Change URLs (default: `defaultUrlTransform`)\n *\n * @callback UrlTransform\n *   Transform all URLs.\n * @param {string} url\n *   URL.\n * @param {string} key\n *   Property name (example: `'href'`).\n * @param {Readonly<Element>} node\n *   Node.\n * @returns {string | null | undefined}\n *   Transformed URL (optional).\n */\n\nimport {unreachable} from 'devlop'\nimport {toJsxRuntime} from 'hast-util-to-jsx-runtime'\nimport {urlAttributes} from 'html-url-attributes'\n// @ts-expect-error: untyped.\nimport {Fragment, jsx, jsxs} from 'react/jsx-runtime'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\nimport {visit} from 'unist-util-visit'\nimport {VFile} from 'vfile'\n\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {PluggableList} */\nconst emptyPlugins = []\n/** @type {Readonly<RemarkRehypeOptions>} */\nconst emptyRemarkRehypeOptions = {allowDangerousHtml: true}\nconst safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i\n\n// Mutable because we `delete` any time it’s used and a message is sent.\n/** @type {ReadonlyArray<Readonly<Deprecation>>} */\nconst deprecations = [\n  {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {\n    from: 'allowNode',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowElement'\n  },\n  {\n    from: 'allowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowedElements'\n  },\n  {\n    from: 'disallowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'disallowedElements'\n  },\n  {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'includeElementIndex', id: '#remove-includeelementindex'},\n  {\n    from: 'includeNodeIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  },\n  {from: 'linkTarget', id: 'remove-linktarget'},\n  {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},\n  {from: 'rawSourcePos', id: '#remove-rawsourcepos'},\n  {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},\n  {from: 'source', id: 'change-source-to-children', to: 'children'},\n  {from: 'sourcePos', id: '#remove-sourcepos'},\n  {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},\n  {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}\n]\n\n/**\n * Component to render markdown.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {JSX.Element}\n *   React element.\n */\nexport function Markdown(options) {\n  const allowedElements = options.allowedElements\n  const allowElement = options.allowElement\n  const children = options.children || ''\n  const className = options.className\n  const components = options.components\n  const disallowedElements = options.disallowedElements\n  const rehypePlugins = options.rehypePlugins || emptyPlugins\n  const remarkPlugins = options.remarkPlugins || emptyPlugins\n  const remarkRehypeOptions = options.remarkRehypeOptions\n    ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}\n    : emptyRemarkRehypeOptions\n  const skipHtml = options.skipHtml\n  const unwrapDisallowed = options.unwrapDisallowed\n  const urlTransform = options.urlTransform || defaultUrlTransform\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(remarkPlugins)\n    .use(remarkRehype, remarkRehypeOptions)\n    .use(rehypePlugins)\n\n  const file = new VFile()\n\n  if (typeof children === 'string') {\n    file.value = children\n  } else {\n    unreachable(\n      'Unexpected value `' +\n        children +\n        '` for `children` prop, expected `string`'\n    )\n  }\n\n  if (allowedElements && disallowedElements) {\n    unreachable(\n      'Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other'\n    )\n  }\n\n  for (const deprecation of deprecations) {\n    if (Object.hasOwn(options, deprecation.from)) {\n      unreachable(\n        'Unexpected `' +\n          deprecation.from +\n          '` prop, ' +\n          (deprecation.to\n            ? 'use `' + deprecation.to + '` instead'\n            : 'remove it') +\n          ' (see <' +\n          changelog +\n          '#' +\n          deprecation.id +\n          '> for more info)'\n      )\n    }\n  }\n\n  const mdastTree = processor.parse(file)\n  /** @type {Nodes} */\n  let hastTree = processor.runSync(mdastTree, file)\n\n  // Wrap in `div` if there’s a class name.\n  if (className) {\n    hastTree = {\n      type: 'element',\n      tagName: 'div',\n      properties: {className},\n      // Assume no doctypes.\n      children: /** @type {Array<ElementContent>} */ (\n        hastTree.type === 'root' ? hastTree.children : [hastTree]\n      )\n    }\n  }\n\n  visit(hastTree, transform)\n\n  return toJsxRuntime(hastTree, {\n    Fragment,\n    components,\n    ignoreInvalidStyle: true,\n    jsx,\n    jsxs,\n    passKeys: true,\n    passNode: true\n  })\n\n  /** @type {Visitor} */\n  function transform(node, index, parent) {\n    if (node.type === 'raw' && parent && typeof index === 'number') {\n      if (skipHtml) {\n        parent.children.splice(index, 1)\n      } else {\n        parent.children[index] = {type: 'text', value: node.value}\n      }\n\n      return index\n    }\n\n    if (node.type === 'element') {\n      /** @type {string} */\n      let key\n\n      for (key in urlAttributes) {\n        if (\n          Object.hasOwn(urlAttributes, key) &&\n          Object.hasOwn(node.properties, key)\n        ) {\n          const value = node.properties[key]\n          const test = urlAttributes[key]\n          if (test === null || test.includes(node.tagName)) {\n            node.properties[key] = urlTransform(String(value || ''), key, node)\n          }\n        }\n      }\n    }\n\n    if (node.type === 'element') {\n      let remove = allowedElements\n        ? !allowedElements.includes(node.tagName)\n        : disallowedElements\n        ? disallowedElements.includes(node.tagName)\n        : false\n\n      if (!remove && allowElement && typeof index === 'number') {\n        remove = !allowElement(node, index, parent)\n      }\n\n      if (remove && parent && typeof index === 'number') {\n        if (unwrapDisallowed && node.children) {\n          parent.children.splice(index, 1, ...node.children)\n        } else {\n          parent.children.splice(index, 1)\n        }\n\n        return index\n      }\n    }\n  }\n}\n\n/**\n * Make a URL safe.\n *\n * @satisfies {UrlTransform}\n * @param {string} value\n *   URL.\n * @returns {string}\n *   Safe URL.\n */\nexport function defaultUrlTransform(value) {\n  // Same as:\n  // <https://github.com/micromark/micromark/blob/929275e/packages/micromark-util-sanitize-uri/dev/index.js#L34>\n  // But without the `encode` part.\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    safeProtocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n */\n\n/**\n * @template {string} SimpleSelector\n *   Selector type.\n * @template {string} DefaultTagName\n *   Default tag name.\n * @typedef {(\n *   SimpleSelector extends ''\n *     ? DefaultTagName\n *     : SimpleSelector extends `${infer TagName}.${infer Rest}`\n *     ? ExtractTagName<TagName, DefaultTagName>\n *     : SimpleSelector extends `${infer TagName}#${infer Rest}`\n *     ? ExtractTagName<TagName, DefaultTagName>\n *     : SimpleSelector extends string\n *     ? SimpleSelector\n *     : DefaultTagName\n * )} ExtractTagName\n *   Extract tag name from a simple selector.\n */\n\nconst search = /[#.]/g\n\n/**\n * Create a hast element from a simple CSS selector.\n *\n * @template {string} Selector\n *   Type of selector.\n * @template {string} [DefaultTagName='div']\n *   Type of default tag name (default: `'div'`).\n * @param {Selector | null | undefined} [selector]\n *   Simple CSS selector (optional).\n *\n *   Can contain a tag name (`foo`), classes (`.bar`), and an ID (`#baz`).\n *   Multiple classes are allowed.\n *   Uses the last ID if multiple IDs are found.\n * @param {DefaultTagName | null | undefined} [defaultTagName='div']\n *   Tag name to use if `selector` does not specify one (default: `'div'`).\n * @returns {Element & {tagName: ExtractTagName<Selector, DefaultTagName>}}\n *   Built element.\n */\nexport function parseSelector(selector, defaultTagName) {\n  const value = selector || ''\n  /** @type {Properties} */\n  const props = {}\n  let start = 0\n  /** @type {string | undefined} */\n  let previous\n  /** @type {string | undefined} */\n  let tagName\n\n  while (start < value.length) {\n    search.lastIndex = start\n    const match = search.exec(value)\n    const subvalue = value.slice(start, match ? match.index : value.length)\n\n    if (subvalue) {\n      if (!previous) {\n        tagName = subvalue\n      } else if (previous === '#') {\n        props.id = subvalue\n      } else if (Array.isArray(props.className)) {\n        props.className.push(subvalue)\n      } else {\n        props.className = [subvalue]\n      }\n\n      start += subvalue.length\n    }\n\n    if (match) {\n      previous = match[0]\n      start++\n    }\n  }\n\n  return {\n    type: 'element',\n    // @ts-expect-error: tag name is parsed.\n    tagName: tagName || defaultTagName || 'div',\n    properties: props,\n    children: []\n  }\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').RootContent} RootContent\n *\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n */\n\n/**\n * @typedef {Element | Root} Result\n *   Result from a `h` (or `s`) call.\n *\n * @typedef {number | string} StyleValue\n *   Value for a CSS style field.\n * @typedef {Record<string, StyleValue>} Style\n *   Supported value of a `style` prop.\n * @typedef {boolean | number | string | null | undefined} PrimitiveValue\n *   Primitive property value.\n * @typedef {Array<number | string>} ArrayValue\n *   List of property values for space- or comma separated values (such as `className`).\n * @typedef {ArrayValue | PrimitiveValue} PropertyValue\n *   Primitive value or list value.\n * @typedef {{[property: string]: PropertyValue | Style}} Properties\n *   Acceptable value for element properties.\n *\n * @typedef {number | string | null | undefined} PrimitiveChild\n *   Primitive children, either ignored (nullish), or turned into text nodes.\n * @typedef {Array<ArrayChildNested | Nodes | PrimitiveChild>} ArrayChild\n *   List of children.\n * @typedef {Array<Nodes | PrimitiveChild>} ArrayChildNested\n *   List of children (deep).\n * @typedef {ArrayChild | Nodes | PrimitiveChild} Child\n *   Acceptable child value.\n */\n\nimport {parse as commas} from 'comma-separated-tokens'\nimport {parseSelector} from 'hast-util-parse-selector'\nimport {find, normalize} from 'property-information'\nimport {parse as spaces} from 'space-separated-tokens'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Schema} schema\n *   Schema to use.\n * @param {string} defaultTagName\n *   Default tag name.\n * @param {Array<string> | undefined} [caseSensitive]\n *   Case-sensitive tag names (default: `undefined`).\n * @returns\n *   `h`.\n */\nexport function createH(schema, defaultTagName, caseSensitive) {\n  const adjust = caseSensitive && createAdjustMap(caseSensitive)\n\n  /**\n   * Hyperscript compatible DSL for creating virtual hast trees.\n   *\n   * @overload\n   * @param {null | undefined} [selector]\n   * @param {...Child} children\n   * @returns {Root}\n   *\n   * @overload\n   * @param {string} selector\n   * @param {Properties} properties\n   * @param {...Child} children\n   * @returns {Element}\n   *\n   * @overload\n   * @param {string} selector\n   * @param {...Child} children\n   * @returns {Element}\n   *\n   * @param {string | null | undefined} [selector]\n   *   Selector.\n   * @param {Child | Properties | null | undefined} [properties]\n   *   Properties (or first child) (default: `undefined`).\n   * @param {...Child} children\n   *   Children.\n   * @returns {Result}\n   *   Result.\n   */\n  function h(selector, properties, ...children) {\n    let index = -1\n    /** @type {Result} */\n    let node\n\n    if (selector === undefined || selector === null) {\n      node = {type: 'root', children: []}\n      // Properties are not supported for roots.\n      const child = /** @type {Child} */ (properties)\n      children.unshift(child)\n    } else {\n      node = parseSelector(selector, defaultTagName)\n      // Normalize the name.\n      node.tagName = node.tagName.toLowerCase()\n      if (adjust && own.call(adjust, node.tagName)) {\n        node.tagName = adjust[node.tagName]\n      }\n\n      // Handle props.\n      if (isChild(properties)) {\n        children.unshift(properties)\n      } else {\n        /** @type {string} */\n        let key\n\n        for (key in properties) {\n          if (own.call(properties, key)) {\n            addProperty(schema, node.properties, key, properties[key])\n          }\n        }\n      }\n    }\n\n    // Handle children.\n    while (++index < children.length) {\n      addChild(node.children, children[index])\n    }\n\n    if (node.type === 'element' && node.tagName === 'template') {\n      node.content = {type: 'root', children: node.children}\n      node.children = []\n    }\n\n    return node\n  }\n\n  return h\n}\n\n/**\n * Check if something is properties or a child.\n *\n * @param {Child | Properties} value\n *   Value to check.\n * @returns {value is Child}\n *   Whether `value` is definitely a child.\n */\nfunction isChild(value) {\n  // Never properties if not an object.\n  if (value === null || typeof value !== 'object' || Array.isArray(value)) {\n    return true\n  }\n\n  // Never node without `type`; that’s the main discriminator.\n  if (typeof value.type !== 'string') return false\n\n  // Slower check: never property value if object or array with\n  // non-number/strings.\n  const record = /** @type {Record<string, unknown>} */ (value)\n  const keys = Object.keys(value)\n\n  for (const key of keys) {\n    const value = record[key]\n\n    if (value && typeof value === 'object') {\n      if (!Array.isArray(value)) return true\n\n      const list = /** @type {Array<unknown>} */ (value)\n\n      for (const item of list) {\n        if (typeof item !== 'number' && typeof item !== 'string') {\n          return true\n        }\n      }\n    }\n  }\n\n  // Also see empty `children` as a node.\n  if ('children' in value && Array.isArray(value.children)) {\n    return true\n  }\n\n  // Default to properties, someone can always pass an empty object,\n  // put `data: {}` in a node,\n  // or wrap it in an array.\n  return false\n}\n\n/**\n * @param {Schema} schema\n *   Schema.\n * @param {Properties} properties\n *   Properties object.\n * @param {string} key\n *   Property name.\n * @param {PropertyValue | Style} value\n *   Property value.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addProperty(schema, properties, key, value) {\n  const info = find(schema, key)\n  let index = -1\n  /** @type {PropertyValue} */\n  let result\n\n  // Ignore nullish and NaN values.\n  if (value === undefined || value === null) return\n\n  if (typeof value === 'number') {\n    // Ignore NaN.\n    if (Number.isNaN(value)) return\n\n    result = value\n  }\n  // Booleans.\n  else if (typeof value === 'boolean') {\n    result = value\n  }\n  // Handle list values.\n  else if (typeof value === 'string') {\n    if (info.spaceSeparated) {\n      result = spaces(value)\n    } else if (info.commaSeparated) {\n      result = commas(value)\n    } else if (info.commaOrSpaceSeparated) {\n      result = spaces(commas(value).join(' '))\n    } else {\n      result = parsePrimitive(info, info.property, value)\n    }\n  } else if (Array.isArray(value)) {\n    result = value.concat()\n  } else {\n    result = info.property === 'style' ? style(value) : String(value)\n  }\n\n  if (Array.isArray(result)) {\n    /** @type {Array<number | string>} */\n    const finalResult = []\n\n    while (++index < result.length) {\n      // Assume no booleans in array.\n      const value = /** @type {number | string} */ (\n        parsePrimitive(info, info.property, result[index])\n      )\n      finalResult[index] = value\n    }\n\n    result = finalResult\n  }\n\n  // Class names (which can be added both on the `selector` and here).\n  if (info.property === 'className' && Array.isArray(properties.className)) {\n    // Assume no booleans in `className`.\n    const value = /** @type {number | string} */ (result)\n    result = properties.className.concat(value)\n  }\n\n  properties[info.property] = result\n}\n\n/**\n * @param {Array<RootContent>} nodes\n *   Children.\n * @param {Child} value\n *   Child.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChild(nodes, value) {\n  let index = -1\n\n  if (value === undefined || value === null) {\n    // Empty.\n  } else if (typeof value === 'string' || typeof value === 'number') {\n    nodes.push({type: 'text', value: String(value)})\n  } else if (Array.isArray(value)) {\n    while (++index < value.length) {\n      addChild(nodes, value[index])\n    }\n  } else if (typeof value === 'object' && 'type' in value) {\n    if (value.type === 'root') {\n      addChild(nodes, value.children)\n    } else {\n      nodes.push(value)\n    }\n  } else {\n    throw new Error('Expected node, nodes, or string, got `' + value + '`')\n  }\n}\n\n/**\n * Parse a single primitives.\n *\n * @param {Info} info\n *   Property information.\n * @param {string} name\n *   Property name.\n * @param {PrimitiveValue} value\n *   Property value.\n * @returns {PrimitiveValue}\n *   Property value.\n */\nfunction parsePrimitive(info, name, value) {\n  if (typeof value === 'string') {\n    if (info.number && value && !Number.isNaN(Number(value))) {\n      return Number(value)\n    }\n\n    if (\n      (info.boolean || info.overloadedBoolean) &&\n      (value === '' || normalize(value) === normalize(name))\n    ) {\n      return true\n    }\n  }\n\n  return value\n}\n\n/**\n * Serialize a `style` object as a string.\n *\n * @param {Style} value\n *   Style object.\n * @returns {string}\n *   CSS string.\n */\nfunction style(value) {\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      result.push([key, value[key]].join(': '))\n    }\n  }\n\n  return result.join('; ')\n}\n\n/**\n * Create a map to adjust casing.\n *\n * @param {Array<string>} values\n *   List of properly cased keys.\n * @returns {Record<string, string>}\n *   Map of lowercase keys to uppercase keys.\n */\nfunction createAdjustMap(values) {\n  /** @type {Record<string, string>} */\n  const result = {}\n  let index = -1\n\n  while (++index < values.length) {\n    result[values[index].toLowerCase()] = values[index]\n  }\n\n  return result\n}\n","export const svgCaseSensitiveTagNames = [\n  'altGlyph',\n  'altGlyphDef',\n  'altGlyphItem',\n  'animateColor',\n  'animateMotion',\n  'animateTransform',\n  'clipPath',\n  'feBlend',\n  'feColorMatrix',\n  'feComponentTransfer',\n  'feComposite',\n  'feConvolveMatrix',\n  'feDiffuseLighting',\n  'feDisplacementMap',\n  'feDistantLight',\n  'feDropShadow',\n  'feFlood',\n  'feFuncA',\n  'feFuncB',\n  'feFuncG',\n  'feFuncR',\n  'feGaussianBlur',\n  'feImage',\n  'feMerge',\n  'feMergeNode',\n  'feMorphology',\n  'feOffset',\n  'fePointLight',\n  'feSpecularLighting',\n  'feSpotLight',\n  'feTile',\n  'feTurbulence',\n  'foreignObject',\n  'glyphRef',\n  'linearGradient',\n  'radialGradient',\n  'solidColor',\n  'textArea',\n  'textPath'\n]\n","/**\n * @typedef {import('./create-h.js').Child} Child\n *   Acceptable child value.\n * @typedef {import('./create-h.js').Properties} Properties\n *   Acceptable value for element properties.\n * @typedef {import('./create-h.js').Result} Result\n *   Result from a `h` (or `s`) call.\n */\n\n// Register the JSX namespace on `h`.\n/**\n * @typedef {import('./jsx-classic.js').Element} h.JSX.Element\n * @typedef {import('./jsx-classic.js').ElementChildrenAttribute} h.JSX.ElementChildrenAttribute\n * @typedef {import('./jsx-classic.js').IntrinsicAttributes} h.JSX.IntrinsicAttributes\n * @typedef {import('./jsx-classic.js').IntrinsicElements} h.JSX.IntrinsicElements\n */\n\n// Register the JSX namespace on `s`.\n/**\n * @typedef {import('./jsx-classic.js').Element} s.JSX.Element\n * @typedef {import('./jsx-classic.js').ElementChildrenAttribute} s.JSX.ElementChildrenAttribute\n * @typedef {import('./jsx-classic.js').IntrinsicAttributes} s.JSX.IntrinsicAttributes\n * @typedef {import('./jsx-classic.js').IntrinsicElements} s.JSX.IntrinsicElements\n */\n\nimport {html, svg} from 'property-information'\nimport {createH} from './create-h.js'\nimport {svgCaseSensitiveTagNames} from './svg-case-sensitive-tag-names.js'\n\n// Note: this explicit type is needed, otherwise TS creates broken types.\n/** @type {ReturnType<createH>} */\nexport const h = createH(html, 'div')\n\n// Note: this explicit type is needed, otherwise TS creates broken types.\n/** @type {ReturnType<createH>} */\nexport const s = createH(svg, 'g', svgCaseSensitiveTagNames)\n","/**\n * @import {VFile, Value} from 'vfile'\n * @import {Location} from 'vfile-location'\n */\n\n/**\n * Create an index of the given document to translate between line/column and\n * offset based positional info.\n *\n * Also implemented in Rust in [`wooorm/markdown-rs`][markdown-rs].\n *\n * [markdown-rs]: https://github.com/wooorm/markdown-rs/blob/main/src/util/location.rs\n *\n * @param {VFile | Value} file\n *   File to index.\n * @returns {Location}\n *   Accessors for index.\n */\nexport function location(file) {\n  const value = String(file)\n  /**\n   * List, where each index is a line number (0-based), and each value is the\n   * byte index *after* where the line ends.\n   *\n   * @type {Array<number>}\n   */\n  const indices = []\n\n  return {toOffset, toPoint}\n\n  /** @type {Location['toPoint']} */\n  function toPoint(offset) {\n    if (typeof offset === 'number' && offset > -1 && offset <= value.length) {\n      let index = 0\n\n      while (true) {\n        let end = indices[index]\n\n        if (end === undefined) {\n          const eol = next(value, indices[index - 1])\n          end = eol === -1 ? value.length + 1 : eol + 1\n          indices[index] = end\n        }\n\n        if (end > offset) {\n          return {\n            line: index + 1,\n            column: offset - (index > 0 ? indices[index - 1] : 0) + 1,\n            offset\n          }\n        }\n\n        index++\n      }\n    }\n  }\n\n  /** @type {Location['toOffset']} */\n  function toOffset(point) {\n    if (\n      point &&\n      typeof point.line === 'number' &&\n      typeof point.column === 'number' &&\n      !Number.isNaN(point.line) &&\n      !Number.isNaN(point.column)\n    ) {\n      while (indices.length < point.line) {\n        const from = indices[indices.length - 1]\n        const eol = next(value, from)\n        const end = eol === -1 ? value.length + 1 : eol + 1\n        if (from === end) break\n        indices.push(end)\n      }\n\n      const offset =\n        (point.line > 1 ? indices[point.line - 2] : 0) + point.column - 1\n      // The given `column` could not exist on this line.\n      if (offset < indices[point.line - 1]) return offset\n    }\n  }\n}\n\n/**\n * @param {string} value\n * @param {number} from\n */\nfunction next(value, from) {\n  const cr = value.indexOf('\\r', from)\n  const lf = value.indexOf('\\n', from)\n  if (lf === -1) return cr\n  if (cr === -1 || cr + 1 === lf) return lf\n  return cr < lf ? cr : lf\n}\n","/**\n * Map of web namespaces.\n *\n * @type {Record<string, string>}\n */\nexport const webNamespaces = {\n  html: 'http://www.w3.org/1999/xhtml',\n  mathml: 'http://www.w3.org/1998/Math/MathML',\n  svg: 'http://www.w3.org/2000/svg',\n  xlink: 'http://www.w3.org/1999/xlink',\n  xml: 'http://www.w3.org/XML/1998/namespace',\n  xmlns: 'http://www.w3.org/2000/xmlns/'\n}\n","/**\n * @import {ElementData, Element, Nodes, RootContent, Root} from 'hast'\n * @import {DefaultTreeAdapterMap, Token} from 'parse5'\n * @import {Schema} from 'property-information'\n * @import {Point, Position} from 'unist'\n * @import {VFile} from 'vfile'\n * @import {Options} from 'hast-util-from-parse5'\n */\n\n/**\n * @typedef State\n *   Info passed around about the current state.\n * @property {VFile | undefined} file\n *   Corresponding file.\n * @property {boolean} location\n *   Whether location info was found.\n * @property {Schema} schema\n *   Current schema.\n * @property {boolean | undefined} verbose\n *   Add extra positional info.\n */\n\nimport {ok as assert} from 'devlop'\nimport {h, s} from 'hastscript'\nimport {find, html, svg} from 'property-information'\nimport {location} from 'vfile-location'\nimport {webNamespaces} from 'web-namespaces'\n\nconst own = {}.hasOwnProperty\n/** @type {unknown} */\n// type-coverage:ignore-next-line\nconst proto = Object.prototype\n\n/**\n * Transform a `parse5` AST to hast.\n *\n * @param {DefaultTreeAdapterMap['node']} tree\n *   `parse5` tree to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {Nodes}\n *   hast tree.\n */\nexport function fromParse5(tree, options) {\n  const settings = options || {}\n\n  return one(\n    {\n      file: settings.file || undefined,\n      location: false,\n      schema: settings.space === 'svg' ? svg : html,\n      verbose: settings.verbose || false\n    },\n    tree\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {DefaultTreeAdapterMap['node']} node\n *   p5 node.\n * @returns {Nodes}\n *   hast node.\n */\nfunction one(state, node) {\n  /** @type {Nodes} */\n  let result\n\n  switch (node.nodeName) {\n    case '#comment': {\n      const reference = /** @type {DefaultTreeAdapterMap['commentNode']} */ (\n        node\n      )\n      result = {type: 'comment', value: reference.data}\n      patch(state, reference, result)\n      return result\n    }\n\n    case '#document':\n    case '#document-fragment': {\n      const reference =\n        /** @type {DefaultTreeAdapterMap['document'] | DefaultTreeAdapterMap['documentFragment']} */ (\n          node\n        )\n      const quirksMode =\n        'mode' in reference\n          ? reference.mode === 'quirks' || reference.mode === 'limited-quirks'\n          : false\n\n      result = {\n        type: 'root',\n        children: all(state, node.childNodes),\n        data: {quirksMode}\n      }\n\n      if (state.file && state.location) {\n        const document = String(state.file)\n        const loc = location(document)\n        const start = loc.toPoint(0)\n        const end = loc.toPoint(document.length)\n        // Always defined as we give valid input.\n        assert(start, 'expected `start`')\n        assert(end, 'expected `end`')\n        result.position = {start, end}\n      }\n\n      return result\n    }\n\n    case '#documentType': {\n      const reference = /** @type {DefaultTreeAdapterMap['documentType']} */ (\n        node\n      )\n      result = {type: 'doctype'}\n      patch(state, reference, result)\n      return result\n    }\n\n    case '#text': {\n      const reference = /** @type {DefaultTreeAdapterMap['textNode']} */ (node)\n      result = {type: 'text', value: reference.value}\n      patch(state, reference, result)\n      return result\n    }\n\n    // Element.\n    default: {\n      const reference = /** @type {DefaultTreeAdapterMap['element']} */ (node)\n      result = element(state, reference)\n      return result\n    }\n  }\n}\n\n/**\n * Transform children.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Array<DefaultTreeAdapterMap['node']>} nodes\n *   Nodes.\n * @returns {Array<RootContent>}\n *   hast nodes.\n */\nfunction all(state, nodes) {\n  let index = -1\n  /** @type {Array<RootContent>} */\n  const results = []\n\n  while (++index < nodes.length) {\n    // Assume no roots in `nodes`.\n    const result = /** @type {RootContent} */ (one(state, nodes[index]))\n    results.push(result)\n  }\n\n  return results\n}\n\n/**\n * Transform an element.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {DefaultTreeAdapterMap['element']} node\n *   `parse5` node to transform.\n * @returns {Element}\n *   hast node.\n */\nfunction element(state, node) {\n  const schema = state.schema\n\n  state.schema = node.namespaceURI === webNamespaces.svg ? svg : html\n\n  // Props.\n  let index = -1\n  /** @type {Record<string, string>} */\n  const properties = {}\n\n  while (++index < node.attrs.length) {\n    const attribute = node.attrs[index]\n    const name =\n      (attribute.prefix ? attribute.prefix + ':' : '') + attribute.name\n    if (!own.call(proto, name)) {\n      properties[name] = attribute.value\n    }\n  }\n\n  // Build.\n  const x = state.schema.space === 'svg' ? s : h\n  const result = x(node.tagName, properties, all(state, node.childNodes))\n  patch(state, node, result)\n\n  // Switch content.\n  if (result.tagName === 'template') {\n    const reference = /** @type {DefaultTreeAdapterMap['template']} */ (node)\n    const pos = reference.sourceCodeLocation\n    const startTag = pos && pos.startTag && position(pos.startTag)\n    const endTag = pos && pos.endTag && position(pos.endTag)\n\n    // Root in, root out.\n    const content = /** @type {Root} */ (one(state, reference.content))\n\n    if (startTag && endTag && state.file) {\n      content.position = {start: startTag.end, end: endTag.start}\n    }\n\n    result.content = content\n  }\n\n  state.schema = schema\n\n  return result\n}\n\n/**\n * Patch positional info from `from` onto `to`.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {DefaultTreeAdapterMap['node']} from\n *   p5 node.\n * @param {Nodes} to\n *   hast node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(state, from, to) {\n  if ('sourceCodeLocation' in from && from.sourceCodeLocation && state.file) {\n    const position = createLocation(state, to, from.sourceCodeLocation)\n\n    if (position) {\n      state.location = true\n      to.position = position\n    }\n  }\n}\n\n/**\n * Create clean positional information.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Nodes} node\n *   hast node.\n * @param {Token.ElementLocation} location\n *   p5 location info.\n * @returns {Position | undefined}\n *   Position, or nothing.\n */\nfunction createLocation(state, node, location) {\n  const result = position(location)\n\n  if (node.type === 'element') {\n    const tail = node.children[node.children.length - 1]\n\n    // Bug for unclosed with children.\n    // See: <https://github.com/inikulin/parse5/issues/109>.\n    if (\n      result &&\n      !location.endTag &&\n      tail &&\n      tail.position &&\n      tail.position.end\n    ) {\n      result.end = Object.assign({}, tail.position.end)\n    }\n\n    if (state.verbose) {\n      /** @type {Record<string, Position | undefined>} */\n      const properties = {}\n      /** @type {string} */\n      let key\n\n      if (location.attrs) {\n        for (key in location.attrs) {\n          if (own.call(location.attrs, key)) {\n            properties[find(state.schema, key).property] = position(\n              location.attrs[key]\n            )\n          }\n        }\n      }\n\n      assert(location.startTag, 'a start tag should exist')\n      const opening = position(location.startTag)\n      const closing = location.endTag ? position(location.endTag) : undefined\n      /** @type {ElementData['position']} */\n      const data = {opening}\n      if (closing) data.closing = closing\n      data.properties = properties\n\n      node.data = {position: data}\n    }\n  }\n\n  return result\n}\n\n/**\n * Turn a p5 location into a position.\n *\n * @param {Token.Location} loc\n *   Location.\n * @returns {Position | undefined}\n *   Position or nothing.\n */\nfunction position(loc) {\n  const start = point({\n    line: loc.startLine,\n    column: loc.startCol,\n    offset: loc.startOffset\n  })\n  const end = point({\n    line: loc.endLine,\n    column: loc.endCol,\n    offset: loc.endOffset\n  })\n\n  // @ts-expect-error: we do use `undefined` for points if one or the other\n  // exists.\n  return start || end ? {start, end} : undefined\n}\n\n/**\n * Filter out invalid points.\n *\n * @param {Point} point\n *   Point with potentially `undefined` values.\n * @returns {Point | undefined}\n *   Point or nothing.\n */\nfunction point(point) {\n  return point.line && point.column ? point : undefined\n}\n","/**\n * @callback Handler\n *   Handle a value, with a certain ID field set to a certain value.\n *   The ID field is passed to `zwitch`, and it’s value is this function’s\n *   place on the `handlers` record.\n * @param {...any} parameters\n *   Arbitrary parameters passed to the zwitch.\n *   The first will be an object with a certain ID field set to a certain value.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback UnknownHandler\n *   Handle values that do have a certain ID field, but it’s set to a value\n *   that is not listed in the `handlers` record.\n * @param {unknown} value\n *   An object with a certain ID field set to an unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback InvalidHandler\n *   Handle values that do not have a certain ID field.\n * @param {unknown} value\n *   Any unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {void|null|undefined|never}\n *   This should crash or return nothing.\n */\n\n/**\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @typedef Options\n *   Configuration (required).\n * @property {Invalid} [invalid]\n *   Handler to use for invalid values.\n * @property {Unknown} [unknown]\n *   Handler to use for unknown values.\n * @property {Handlers} [handlers]\n *   Handlers to use.\n */\n\nconst own = {}.hasOwnProperty\n\n/**\n * Handle values based on a field.\n *\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @param {string} key\n *   Field to switch on.\n * @param {Options<Invalid, Unknown, Handlers>} [options]\n *   Configuration (required).\n * @returns {{unknown: Unknown, invalid: Invalid, handlers: Handlers, (...parameters: Parameters<Handlers[keyof Handlers]>): ReturnType<Handlers[keyof Handlers]>, (...parameters: Parameters<Unknown>): ReturnType<Unknown>}}\n */\nexport function zwitch(key, options) {\n  const settings = options || {}\n\n  /**\n   * Handle one value.\n   *\n   * Based on the bound `key`, a respective handler will be called.\n   * If `value` is not an object, or doesn’t have a `key` property, the special\n   * “invalid” handler will be called.\n   * If `value` has an unknown `key`, the special “unknown” handler will be\n   * called.\n   *\n   * All arguments, and the context object, are passed through to the handler,\n   * and it’s result is returned.\n   *\n   * @this {unknown}\n   *   Any context object.\n   * @param {unknown} [value]\n   *   Any value.\n   * @param {...unknown} parameters\n   *   Arbitrary parameters passed to the zwitch.\n   * @property {Handler} invalid\n   *   Handle for values that do not have a certain ID field.\n   * @property {Handler} unknown\n   *   Handle values that do have a certain ID field, but it’s set to a value\n   *   that is not listed in the `handlers` record.\n   * @property {Handlers} handlers\n   *   Record of handlers.\n   * @returns {unknown}\n   *   Anything.\n   */\n  function one(value, ...parameters) {\n    /** @type {Handler|undefined} */\n    let fn = one.invalid\n    const handlers = one.handlers\n\n    if (value && own.call(value, key)) {\n      // @ts-expect-error Indexable.\n      const id = String(value[key])\n      // @ts-expect-error Indexable.\n      fn = own.call(handlers, id) ? handlers[id] : one.unknown\n    }\n\n    if (fn) {\n      return fn.call(this, value, ...parameters)\n    }\n  }\n\n  one.handlers = settings.handlers || {}\n  one.invalid = settings.invalid\n  one.unknown = settings.unknown\n\n  // @ts-expect-error: matches!\n  return one\n}\n","/**\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').Doctype} Doctype\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').RootContent} RootContent\n * @typedef {import('hast').Text} Text\n *\n * @typedef {import('parse5').DefaultTreeAdapterMap['document']} Parse5Document\n * @typedef {import('parse5').DefaultTreeAdapterMap['documentFragment']} Parse5Fragment\n * @typedef {import('parse5').DefaultTreeAdapterMap['element']} Parse5Element\n * @typedef {import('parse5').DefaultTreeAdapterMap['node']} Parse5Nodes\n * @typedef {import('parse5').DefaultTreeAdapterMap['documentType']} Parse5Doctype\n * @typedef {import('parse5').DefaultTreeAdapterMap['commentNode']} Parse5Comment\n * @typedef {import('parse5').DefaultTreeAdapterMap['textNode']} Parse5Text\n * @typedef {import('parse5').DefaultTreeAdapterMap['parentNode']} Parse5Parent\n * @typedef {import('parse5').Token.Attribute} Parse5Attribute\n *\n * @typedef {import('property-information').Schema} Schema\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {Space | null | undefined} [space='html']\n *   Which space the document is in (default: `'html'`).\n *\n *   When an `<svg>` element is found in the HTML space, this package already\n *   automatically switches to and from the SVG space when entering and exiting\n *   it.\n *\n * @typedef {Exclude<Parse5Nodes, Parse5Document | Parse5Fragment>} Parse5Content\n *\n * @typedef {'html' | 'svg'} Space\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {find, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {webNamespaces} from 'web-namespaces'\nimport {zwitch} from 'zwitch'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\nconst own = {}.hasOwnProperty\n\nconst one = zwitch('type', {handlers: {root, element, text, comment, doctype}})\n\n/**\n * Transform a hast tree to a `parse5` AST.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {Parse5Nodes}\n *   `parse5` node.\n */\nexport function toParse5(tree, options) {\n  const settings = options || emptyOptions\n  const space = settings.space\n  return one(tree, space === 'svg' ? svg : html)\n}\n\n/**\n * @param {Root} node\n *   Node (hast) to transform.\n * @param {Schema} schema\n *   Current schema.\n * @returns {Parse5Document}\n *   Parse5 node.\n */\nfunction root(node, schema) {\n  /** @type {Parse5Document} */\n  const result = {\n    nodeName: '#document',\n    // @ts-expect-error: `parse5` uses enums, which are actually strings.\n    mode: (node.data || {}).quirksMode ? 'quirks' : 'no-quirks',\n    childNodes: []\n  }\n  result.childNodes = all(node.children, result, schema)\n  patch(node, result)\n  return result\n}\n\n/**\n * @param {Root} node\n *   Node (hast) to transform.\n * @param {Schema} schema\n *   Current schema.\n * @returns {Parse5Fragment}\n *   Parse5 node.\n */\nfunction fragment(node, schema) {\n  /** @type {Parse5Fragment} */\n  const result = {nodeName: '#document-fragment', childNodes: []}\n  result.childNodes = all(node.children, result, schema)\n  patch(node, result)\n  return result\n}\n\n/**\n * @param {Doctype} node\n *   Node (hast) to transform.\n * @returns {Parse5Doctype}\n *   Parse5 node.\n */\nfunction doctype(node) {\n  /** @type {Parse5Doctype} */\n  const result = {\n    nodeName: '#documentType',\n    name: 'html',\n    publicId: '',\n    systemId: '',\n    parentNode: null\n  }\n\n  patch(node, result)\n  return result\n}\n\n/**\n * @param {Text} node\n *   Node (hast) to transform.\n * @returns {Parse5Text}\n *   Parse5 node.\n */\nfunction text(node) {\n  /** @type {Parse5Text} */\n  const result = {\n    nodeName: '#text',\n    value: node.value,\n    parentNode: null\n  }\n  patch(node, result)\n  return result\n}\n\n/**\n * @param {Comment} node\n *   Node (hast) to transform.\n * @returns {Parse5Comment}\n *   Parse5 node.\n */\nfunction comment(node) {\n  /** @type {Parse5Comment} */\n  const result = {\n    nodeName: '#comment',\n    data: node.value,\n    parentNode: null\n  }\n\n  patch(node, result)\n\n  return result\n}\n\n/**\n * @param {Element} node\n *   Node (hast) to transform.\n * @param {Schema} schema\n *   Current schema.\n * @returns {Parse5Element}\n *   Parse5 node.\n */\nfunction element(node, schema) {\n  const parentSchema = schema\n  let currentSchema = parentSchema\n\n  if (\n    node.type === 'element' &&\n    node.tagName.toLowerCase() === 'svg' &&\n    parentSchema.space === 'html'\n  ) {\n    currentSchema = svg\n  }\n\n  /** @type {Array<Parse5Attribute>} */\n  const attrs = []\n  /** @type {string} */\n  let prop\n\n  if (node.properties) {\n    for (prop in node.properties) {\n      if (prop !== 'children' && own.call(node.properties, prop)) {\n        const result = createProperty(\n          currentSchema,\n          prop,\n          node.properties[prop]\n        )\n\n        if (result) {\n          attrs.push(result)\n        }\n      }\n    }\n  }\n\n  const space = currentSchema.space\n  // `html` and `svg` both have a space.\n  assert(space)\n\n  /** @type {Parse5Element} */\n  const result = {\n    nodeName: node.tagName,\n    tagName: node.tagName,\n    attrs,\n    // @ts-expect-error: `parse5` types are wrong.\n    namespaceURI: webNamespaces[space],\n    childNodes: [],\n    parentNode: null\n  }\n  result.childNodes = all(node.children, result, currentSchema)\n  patch(node, result)\n\n  if (node.tagName === 'template' && node.content) {\n    // @ts-expect-error: `parse5` types are wrong.\n    result.content = fragment(node.content, currentSchema)\n  }\n\n  return result\n}\n\n/**\n * Handle a property.\n *\n * @param {Schema} schema\n *   Current schema.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Parse5Attribute | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(schema, prop, value) {\n  const info = find(schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === false ||\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value)) ||\n    (!value && info.boolean)\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  /** @type {Parse5Attribute} */\n  const attribute = {\n    name: info.attribute,\n    value: value === true ? '' : String(value)\n  }\n\n  if (info.space && info.space !== 'html' && info.space !== 'svg') {\n    const index = attribute.name.indexOf(':')\n\n    if (index < 0) {\n      attribute.prefix = ''\n    } else {\n      attribute.name = attribute.name.slice(index + 1)\n      attribute.prefix = info.attribute.slice(0, index)\n    }\n\n    attribute.namespace = webNamespaces[info.space]\n  }\n\n  return attribute\n}\n\n/**\n * Transform all hast nodes.\n *\n * @param {Array<RootContent>} children\n *   List of children.\n * @param {Parse5Parent} parentNode\n *   `parse5` parent node.\n * @param {Schema} schema\n *   Current schema.\n * @returns {Array<Parse5Content>}\n *   Transformed children.\n */\nfunction all(children, parentNode, schema) {\n  let index = -1\n  /** @type {Array<Parse5Content>} */\n  const results = []\n\n  if (children) {\n    while (++index < children.length) {\n      /** @type {Parse5Content} */\n      const child = one(children[index], schema)\n\n      child.parentNode = parentNode\n\n      results.push(child)\n    }\n  }\n\n  return results\n}\n\n/**\n * Add position info from `from` to `to`.\n *\n * @param {Nodes} from\n *   hast node.\n * @param {Parse5Nodes} to\n *   `parse5` node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  const position = from.position\n\n  if (position && position.start && position.end) {\n    assert(typeof position.start.offset === 'number')\n    assert(typeof position.end.offset === 'number')\n\n    to.sourceCodeLocation = {\n      startLine: position.start.line,\n      startCol: position.start.column,\n      startOffset: position.start.offset,\n      endLine: position.end.line,\n      endCol: position.end.column,\n      endOffset: position.end.offset\n    }\n  }\n}\n","/**\n * List of HTML void tag names.\n *\n * @type {Array<string>}\n */\nexport const htmlVoidElements = [\n  'area',\n  'base',\n  'basefont',\n  'bgsound',\n  'br',\n  'col',\n  'command',\n  'embed',\n  'frame',\n  'hr',\n  'image',\n  'img',\n  'input',\n  'keygen',\n  'link',\n  'meta',\n  'param',\n  'source',\n  'track',\n  'wbr'\n]\n","const UNDEFINED_CODE_POINTS = new Set([\n    65534, 65535, 131070, 131071, 196606, 196607, 262142, 262143, 327678, 327679, 393214,\n    393215, 458750, 458751, 524286, 524287, 589822, 589823, 655358, 655359, 720894,\n    720895, 786430, 786431, 851966, 851967, 917502, 917503, 983038, 983039, 1048574,\n    1048575, 1114110, 1114111,\n]);\nexport const REPLACEMENT_CHARACTER = '\\uFFFD';\nexport var CODE_POINTS;\n(function (CODE_POINTS) {\n    CODE_POINTS[CODE_POINTS[\"EOF\"] = -1] = \"EOF\";\n    CODE_POINTS[CODE_POINTS[\"NULL\"] = 0] = \"NULL\";\n    CODE_POINTS[CODE_POINTS[\"TABULATION\"] = 9] = \"TABULATION\";\n    CODE_POINTS[CODE_POINTS[\"CARRIAGE_RETURN\"] = 13] = \"CARRIAGE_RETURN\";\n    CODE_POINTS[CODE_POINTS[\"LINE_FEED\"] = 10] = \"LINE_FEED\";\n    CODE_POINTS[CODE_POINTS[\"FORM_FEED\"] = 12] = \"FORM_FEED\";\n    CODE_POINTS[CODE_POINTS[\"SPACE\"] = 32] = \"SPACE\";\n    CODE_POINTS[CODE_POINTS[\"EXCLAMATION_MARK\"] = 33] = \"EXCLAMATION_MARK\";\n    CODE_POINTS[CODE_POINTS[\"QUOTATION_MARK\"] = 34] = \"QUOTATION_MARK\";\n    CODE_POINTS[CODE_POINTS[\"AMPERSAND\"] = 38] = \"AMPERSAND\";\n    CODE_POINTS[CODE_POINTS[\"APOSTROPHE\"] = 39] = \"APOSTROPHE\";\n    CODE_POINTS[CODE_POINTS[\"HYPHEN_MINUS\"] = 45] = \"HYPHEN_MINUS\";\n    CODE_POINTS[CODE_POINTS[\"SOLIDUS\"] = 47] = \"SOLIDUS\";\n    CODE_POINTS[CODE_POINTS[\"DIGIT_0\"] = 48] = \"DIGIT_0\";\n    CODE_POINTS[CODE_POINTS[\"DIGIT_9\"] = 57] = \"DIGIT_9\";\n    CODE_POINTS[CODE_POINTS[\"SEMICOLON\"] = 59] = \"SEMICOLON\";\n    CODE_POINTS[CODE_POINTS[\"LESS_THAN_SIGN\"] = 60] = \"LESS_THAN_SIGN\";\n    CODE_POINTS[CODE_POINTS[\"EQUALS_SIGN\"] = 61] = \"EQUALS_SIGN\";\n    CODE_POINTS[CODE_POINTS[\"GREATER_THAN_SIGN\"] = 62] = \"GREATER_THAN_SIGN\";\n    CODE_POINTS[CODE_POINTS[\"QUESTION_MARK\"] = 63] = \"QUESTION_MARK\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_CAPITAL_A\"] = 65] = \"LATIN_CAPITAL_A\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_CAPITAL_Z\"] = 90] = \"LATIN_CAPITAL_Z\";\n    CODE_POINTS[CODE_POINTS[\"RIGHT_SQUARE_BRACKET\"] = 93] = \"RIGHT_SQUARE_BRACKET\";\n    CODE_POINTS[CODE_POINTS[\"GRAVE_ACCENT\"] = 96] = \"GRAVE_ACCENT\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_SMALL_A\"] = 97] = \"LATIN_SMALL_A\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_SMALL_Z\"] = 122] = \"LATIN_SMALL_Z\";\n})(CODE_POINTS || (CODE_POINTS = {}));\nexport const SEQUENCES = {\n    DASH_DASH: '--',\n    CDATA_START: '[CDATA[',\n    DOCTYPE: 'doctype',\n    SCRIPT: 'script',\n    PUBLIC: 'public',\n    SYSTEM: 'system',\n};\n//Surrogates\nexport function isSurrogate(cp) {\n    return cp >= 55296 && cp <= 57343;\n}\nexport function isSurrogatePair(cp) {\n    return cp >= 56320 && cp <= 57343;\n}\nexport function getSurrogatePairCodePoint(cp1, cp2) {\n    return (cp1 - 55296) * 1024 + 9216 + cp2;\n}\n//NOTE: excluding NULL and ASCII whitespace\nexport function isControlCodePoint(cp) {\n    return ((cp !== 0x20 && cp !== 0x0a && cp !== 0x0d && cp !== 0x09 && cp !== 0x0c && cp >= 0x01 && cp <= 0x1f) ||\n        (cp >= 0x7f && cp <= 0x9f));\n}\nexport function isUndefinedCodePoint(cp) {\n    return (cp >= 64976 && cp <= 65007) || UNDEFINED_CODE_POINTS.has(cp);\n}\n","export var ERR;\n(function (ERR) {\n    ERR[\"controlCharacterInInputStream\"] = \"control-character-in-input-stream\";\n    ERR[\"noncharacterInInputStream\"] = \"noncharacter-in-input-stream\";\n    ERR[\"surrogateInInputStream\"] = \"surrogate-in-input-stream\";\n    ERR[\"nonVoidHtmlElementStartTagWithTrailingSolidus\"] = \"non-void-html-element-start-tag-with-trailing-solidus\";\n    ERR[\"endTagWithAttributes\"] = \"end-tag-with-attributes\";\n    ERR[\"endTagWithTrailingSolidus\"] = \"end-tag-with-trailing-solidus\";\n    ERR[\"unexpectedSolidusInTag\"] = \"unexpected-solidus-in-tag\";\n    ERR[\"unexpectedNullCharacter\"] = \"unexpected-null-character\";\n    ERR[\"unexpectedQuestionMarkInsteadOfTagName\"] = \"unexpected-question-mark-instead-of-tag-name\";\n    ERR[\"invalidFirstCharacterOfTagName\"] = \"invalid-first-character-of-tag-name\";\n    ERR[\"unexpectedEqualsSignBeforeAttributeName\"] = \"unexpected-equals-sign-before-attribute-name\";\n    ERR[\"missingEndTagName\"] = \"missing-end-tag-name\";\n    ERR[\"unexpectedCharacterInAttributeName\"] = \"unexpected-character-in-attribute-name\";\n    ERR[\"unknownNamedCharacterReference\"] = \"unknown-named-character-reference\";\n    ERR[\"missingSemicolonAfterCharacterReference\"] = \"missing-semicolon-after-character-reference\";\n    ERR[\"unexpectedCharacterAfterDoctypeSystemIdentifier\"] = \"unexpected-character-after-doctype-system-identifier\";\n    ERR[\"unexpectedCharacterInUnquotedAttributeValue\"] = \"unexpected-character-in-unquoted-attribute-value\";\n    ERR[\"eofBeforeTagName\"] = \"eof-before-tag-name\";\n    ERR[\"eofInTag\"] = \"eof-in-tag\";\n    ERR[\"missingAttributeValue\"] = \"missing-attribute-value\";\n    ERR[\"missingWhitespaceBetweenAttributes\"] = \"missing-whitespace-between-attributes\";\n    ERR[\"missingWhitespaceAfterDoctypePublicKeyword\"] = \"missing-whitespace-after-doctype-public-keyword\";\n    ERR[\"missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers\"] = \"missing-whitespace-between-doctype-public-and-system-identifiers\";\n    ERR[\"missingWhitespaceAfterDoctypeSystemKeyword\"] = \"missing-whitespace-after-doctype-system-keyword\";\n    ERR[\"missingQuoteBeforeDoctypePublicIdentifier\"] = \"missing-quote-before-doctype-public-identifier\";\n    ERR[\"missingQuoteBeforeDoctypeSystemIdentifier\"] = \"missing-quote-before-doctype-system-identifier\";\n    ERR[\"missingDoctypePublicIdentifier\"] = \"missing-doctype-public-identifier\";\n    ERR[\"missingDoctypeSystemIdentifier\"] = \"missing-doctype-system-identifier\";\n    ERR[\"abruptDoctypePublicIdentifier\"] = \"abrupt-doctype-public-identifier\";\n    ERR[\"abruptDoctypeSystemIdentifier\"] = \"abrupt-doctype-system-identifier\";\n    ERR[\"cdataInHtmlContent\"] = \"cdata-in-html-content\";\n    ERR[\"incorrectlyOpenedComment\"] = \"incorrectly-opened-comment\";\n    ERR[\"eofInScriptHtmlCommentLikeText\"] = \"eof-in-script-html-comment-like-text\";\n    ERR[\"eofInDoctype\"] = \"eof-in-doctype\";\n    ERR[\"nestedComment\"] = \"nested-comment\";\n    ERR[\"abruptClosingOfEmptyComment\"] = \"abrupt-closing-of-empty-comment\";\n    ERR[\"eofInComment\"] = \"eof-in-comment\";\n    ERR[\"incorrectlyClosedComment\"] = \"incorrectly-closed-comment\";\n    ERR[\"eofInCdata\"] = \"eof-in-cdata\";\n    ERR[\"absenceOfDigitsInNumericCharacterReference\"] = \"absence-of-digits-in-numeric-character-reference\";\n    ERR[\"nullCharacterReference\"] = \"null-character-reference\";\n    ERR[\"surrogateCharacterReference\"] = \"surrogate-character-reference\";\n    ERR[\"characterReferenceOutsideUnicodeRange\"] = \"character-reference-outside-unicode-range\";\n    ERR[\"controlCharacterReference\"] = \"control-character-reference\";\n    ERR[\"noncharacterCharacterReference\"] = \"noncharacter-character-reference\";\n    ERR[\"missingWhitespaceBeforeDoctypeName\"] = \"missing-whitespace-before-doctype-name\";\n    ERR[\"missingDoctypeName\"] = \"missing-doctype-name\";\n    ERR[\"invalidCharacterSequenceAfterDoctypeName\"] = \"invalid-character-sequence-after-doctype-name\";\n    ERR[\"duplicateAttribute\"] = \"duplicate-attribute\";\n    ERR[\"nonConformingDoctype\"] = \"non-conforming-doctype\";\n    ERR[\"missingDoctype\"] = \"missing-doctype\";\n    ERR[\"misplacedDoctype\"] = \"misplaced-doctype\";\n    ERR[\"endTagWithoutMatchingOpenElement\"] = \"end-tag-without-matching-open-element\";\n    ERR[\"closingOfElementWithOpenChildElements\"] = \"closing-of-element-with-open-child-elements\";\n    ERR[\"disallowedContentInNoscriptInHead\"] = \"disallowed-content-in-noscript-in-head\";\n    ERR[\"openElementsLeftAfterEof\"] = \"open-elements-left-after-eof\";\n    ERR[\"abandonedHeadElementChild\"] = \"abandoned-head-element-child\";\n    ERR[\"misplacedStartTagForHeadElement\"] = \"misplaced-start-tag-for-head-element\";\n    ERR[\"nestedNoscriptInHead\"] = \"nested-noscript-in-head\";\n    ERR[\"eofInElementThatCanContainOnlyText\"] = \"eof-in-element-that-can-contain-only-text\";\n})(ERR || (ERR = {}));\n","import { CODE_POINTS as $, getSurrogatePairCodePoint, isControlCodePoint, isSurrogate, isSurrogatePair, isUndefinedCodePoint, } from '../common/unicode.js';\nimport { ERR } from '../common/error-codes.js';\n//Const\nconst DEFAULT_BUFFER_WATERLINE = 1 << 16;\n//Preprocessor\n//NOTE: HTML input preprocessing\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#preprocessing-the-input-stream)\nexport class Preprocessor {\n    constructor(handler) {\n        this.handler = handler;\n        this.html = '';\n        this.pos = -1;\n        // NOTE: Initial `lastGapPos` is -2, to ensure `col` on initialisation is 0\n        this.lastGapPos = -2;\n        this.gapStack = [];\n        this.skipNextNewLine = false;\n        this.lastChunkWritten = false;\n        this.endOfChunkHit = false;\n        this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;\n        this.isEol = false;\n        this.lineStartPos = 0;\n        this.droppedBufferSize = 0;\n        this.line = 1;\n        //NOTE: avoid reporting errors twice on advance/retreat\n        this.lastErrOffset = -1;\n    }\n    /** The column on the current line. If we just saw a gap (eg. a surrogate pair), return the index before. */\n    get col() {\n        return this.pos - this.lineStartPos + Number(this.lastGapPos !== this.pos);\n    }\n    get offset() {\n        return this.droppedBufferSize + this.pos;\n    }\n    getError(code, cpOffset) {\n        const { line, col, offset } = this;\n        const startCol = col + cpOffset;\n        const startOffset = offset + cpOffset;\n        return {\n            code,\n            startLine: line,\n            endLine: line,\n            startCol,\n            endCol: startCol,\n            startOffset,\n            endOffset: startOffset,\n        };\n    }\n    _err(code) {\n        if (this.handler.onParseError && this.lastErrOffset !== this.offset) {\n            this.lastErrOffset = this.offset;\n            this.handler.onParseError(this.getError(code, 0));\n        }\n    }\n    _addGap() {\n        this.gapStack.push(this.lastGapPos);\n        this.lastGapPos = this.pos;\n    }\n    _processSurrogate(cp) {\n        //NOTE: try to peek a surrogate pair\n        if (this.pos !== this.html.length - 1) {\n            const nextCp = this.html.charCodeAt(this.pos + 1);\n            if (isSurrogatePair(nextCp)) {\n                //NOTE: we have a surrogate pair. Peek pair character and recalculate code point.\n                this.pos++;\n                //NOTE: add a gap that should be avoided during retreat\n                this._addGap();\n                return getSurrogatePairCodePoint(cp, nextCp);\n            }\n        }\n        //NOTE: we are at the end of a chunk, therefore we can't infer the surrogate pair yet.\n        else if (!this.lastChunkWritten) {\n            this.endOfChunkHit = true;\n            return $.EOF;\n        }\n        //NOTE: isolated surrogate\n        this._err(ERR.surrogateInInputStream);\n        return cp;\n    }\n    willDropParsedChunk() {\n        return this.pos > this.bufferWaterline;\n    }\n    dropParsedChunk() {\n        if (this.willDropParsedChunk()) {\n            this.html = this.html.substring(this.pos);\n            this.lineStartPos -= this.pos;\n            this.droppedBufferSize += this.pos;\n            this.pos = 0;\n            this.lastGapPos = -2;\n            this.gapStack.length = 0;\n        }\n    }\n    write(chunk, isLastChunk) {\n        if (this.html.length > 0) {\n            this.html += chunk;\n        }\n        else {\n            this.html = chunk;\n        }\n        this.endOfChunkHit = false;\n        this.lastChunkWritten = isLastChunk;\n    }\n    insertHtmlAtCurrentPos(chunk) {\n        this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1);\n        this.endOfChunkHit = false;\n    }\n    startsWith(pattern, caseSensitive) {\n        // Check if our buffer has enough characters\n        if (this.pos + pattern.length > this.html.length) {\n            this.endOfChunkHit = !this.lastChunkWritten;\n            return false;\n        }\n        if (caseSensitive) {\n            return this.html.startsWith(pattern, this.pos);\n        }\n        for (let i = 0; i < pattern.length; i++) {\n            const cp = this.html.charCodeAt(this.pos + i) | 0x20;\n            if (cp !== pattern.charCodeAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    peek(offset) {\n        const pos = this.pos + offset;\n        if (pos >= this.html.length) {\n            this.endOfChunkHit = !this.lastChunkWritten;\n            return $.EOF;\n        }\n        const code = this.html.charCodeAt(pos);\n        return code === $.CARRIAGE_RETURN ? $.LINE_FEED : code;\n    }\n    advance() {\n        this.pos++;\n        //NOTE: LF should be in the last column of the line\n        if (this.isEol) {\n            this.isEol = false;\n            this.line++;\n            this.lineStartPos = this.pos;\n        }\n        if (this.pos >= this.html.length) {\n            this.endOfChunkHit = !this.lastChunkWritten;\n            return $.EOF;\n        }\n        let cp = this.html.charCodeAt(this.pos);\n        //NOTE: all U+000D CARRIAGE RETURN (CR) characters must be converted to U+000A LINE FEED (LF) characters\n        if (cp === $.CARRIAGE_RETURN) {\n            this.isEol = true;\n            this.skipNextNewLine = true;\n            return $.LINE_FEED;\n        }\n        //NOTE: any U+000A LINE FEED (LF) characters that immediately follow a U+000D CARRIAGE RETURN (CR) character\n        //must be ignored.\n        if (cp === $.LINE_FEED) {\n            this.isEol = true;\n            if (this.skipNextNewLine) {\n                // `line` will be bumped again in the recursive call.\n                this.line--;\n                this.skipNextNewLine = false;\n                this._addGap();\n                return this.advance();\n            }\n        }\n        this.skipNextNewLine = false;\n        if (isSurrogate(cp)) {\n            cp = this._processSurrogate(cp);\n        }\n        //OPTIMIZATION: first check if code point is in the common allowed\n        //range (ASCII alphanumeric, whitespaces, big chunk of BMP)\n        //before going into detailed performance cost validation.\n        const isCommonValidRange = this.handler.onParseError === null ||\n            (cp > 0x1f && cp < 0x7f) ||\n            cp === $.LINE_FEED ||\n            cp === $.CARRIAGE_RETURN ||\n            (cp > 0x9f && cp < 64976);\n        if (!isCommonValidRange) {\n            this._checkForProblematicCharacters(cp);\n        }\n        return cp;\n    }\n    _checkForProblematicCharacters(cp) {\n        if (isControlCodePoint(cp)) {\n            this._err(ERR.controlCharacterInInputStream);\n        }\n        else if (isUndefinedCodePoint(cp)) {\n            this._err(ERR.noncharacterInInputStream);\n        }\n    }\n    retreat(count) {\n        this.pos -= count;\n        while (this.pos < this.lastGapPos) {\n            this.lastGapPos = this.gapStack.pop();\n            this.pos--;\n        }\n        this.isEol = false;\n    }\n}\n","export var TokenType;\n(function (TokenType) {\n    TokenType[TokenType[\"CHARACTER\"] = 0] = \"CHARACTER\";\n    TokenType[TokenType[\"NULL_CHARACTER\"] = 1] = \"NULL_CHARACTER\";\n    TokenType[TokenType[\"WHITESPACE_CHARACTER\"] = 2] = \"WHITESPACE_CHARACTER\";\n    TokenType[TokenType[\"START_TAG\"] = 3] = \"START_TAG\";\n    TokenType[TokenType[\"END_TAG\"] = 4] = \"END_TAG\";\n    TokenType[TokenType[\"COMMENT\"] = 5] = \"COMMENT\";\n    TokenType[TokenType[\"DOCTYPE\"] = 6] = \"DOCTYPE\";\n    TokenType[TokenType[\"EOF\"] = 7] = \"EOF\";\n    TokenType[TokenType[\"HIBERNATION\"] = 8] = \"HIBERNATION\";\n})(TokenType || (TokenType = {}));\nexport function getTokenAttr(token, attrName) {\n    for (let i = token.attrs.length - 1; i >= 0; i--) {\n        if (token.attrs[i].name === attrName) {\n            return token.attrs[i].value;\n        }\n    }\n    return null;\n}\n",null,null,null,null,"/** All valid namespaces in HTML. */\nexport var NS;\n(function (NS) {\n    NS[\"HTML\"] = \"http://www.w3.org/1999/xhtml\";\n    NS[\"MATHML\"] = \"http://www.w3.org/1998/Math/MathML\";\n    NS[\"SVG\"] = \"http://www.w3.org/2000/svg\";\n    NS[\"XLINK\"] = \"http://www.w3.org/1999/xlink\";\n    NS[\"XML\"] = \"http://www.w3.org/XML/1998/namespace\";\n    NS[\"XMLNS\"] = \"http://www.w3.org/2000/xmlns/\";\n})(NS || (NS = {}));\nexport var ATTRS;\n(function (ATTRS) {\n    ATTRS[\"TYPE\"] = \"type\";\n    ATTRS[\"ACTION\"] = \"action\";\n    ATTRS[\"ENCODING\"] = \"encoding\";\n    ATTRS[\"PROMPT\"] = \"prompt\";\n    ATTRS[\"NAME\"] = \"name\";\n    ATTRS[\"COLOR\"] = \"color\";\n    ATTRS[\"FACE\"] = \"face\";\n    ATTRS[\"SIZE\"] = \"size\";\n})(ATTRS || (ATTRS = {}));\n/**\n * The mode of the document.\n *\n * @see {@link https://dom.spec.whatwg.org/#concept-document-limited-quirks}\n */\nexport var DOCUMENT_MODE;\n(function (DOCUMENT_MODE) {\n    DOCUMENT_MODE[\"NO_QUIRKS\"] = \"no-quirks\";\n    DOCUMENT_MODE[\"QUIRKS\"] = \"quirks\";\n    DOCUMENT_MODE[\"LIMITED_QUIRKS\"] = \"limited-quirks\";\n})(DOCUMENT_MODE || (DOCUMENT_MODE = {}));\nexport var TAG_NAMES;\n(function (TAG_NAMES) {\n    TAG_NAMES[\"A\"] = \"a\";\n    TAG_NAMES[\"ADDRESS\"] = \"address\";\n    TAG_NAMES[\"ANNOTATION_XML\"] = \"annotation-xml\";\n    TAG_NAMES[\"APPLET\"] = \"applet\";\n    TAG_NAMES[\"AREA\"] = \"area\";\n    TAG_NAMES[\"ARTICLE\"] = \"article\";\n    TAG_NAMES[\"ASIDE\"] = \"aside\";\n    TAG_NAMES[\"B\"] = \"b\";\n    TAG_NAMES[\"BASE\"] = \"base\";\n    TAG_NAMES[\"BASEFONT\"] = \"basefont\";\n    TAG_NAMES[\"BGSOUND\"] = \"bgsound\";\n    TAG_NAMES[\"BIG\"] = \"big\";\n    TAG_NAMES[\"BLOCKQUOTE\"] = \"blockquote\";\n    TAG_NAMES[\"BODY\"] = \"body\";\n    TAG_NAMES[\"BR\"] = \"br\";\n    TAG_NAMES[\"BUTTON\"] = \"button\";\n    TAG_NAMES[\"CAPTION\"] = \"caption\";\n    TAG_NAMES[\"CENTER\"] = \"center\";\n    TAG_NAMES[\"CODE\"] = \"code\";\n    TAG_NAMES[\"COL\"] = \"col\";\n    TAG_NAMES[\"COLGROUP\"] = \"colgroup\";\n    TAG_NAMES[\"DD\"] = \"dd\";\n    TAG_NAMES[\"DESC\"] = \"desc\";\n    TAG_NAMES[\"DETAILS\"] = \"details\";\n    TAG_NAMES[\"DIALOG\"] = \"dialog\";\n    TAG_NAMES[\"DIR\"] = \"dir\";\n    TAG_NAMES[\"DIV\"] = \"div\";\n    TAG_NAMES[\"DL\"] = \"dl\";\n    TAG_NAMES[\"DT\"] = \"dt\";\n    TAG_NAMES[\"EM\"] = \"em\";\n    TAG_NAMES[\"EMBED\"] = \"embed\";\n    TAG_NAMES[\"FIELDSET\"] = \"fieldset\";\n    TAG_NAMES[\"FIGCAPTION\"] = \"figcaption\";\n    TAG_NAMES[\"FIGURE\"] = \"figure\";\n    TAG_NAMES[\"FONT\"] = \"font\";\n    TAG_NAMES[\"FOOTER\"] = \"footer\";\n    TAG_NAMES[\"FOREIGN_OBJECT\"] = \"foreignObject\";\n    TAG_NAMES[\"FORM\"] = \"form\";\n    TAG_NAMES[\"FRAME\"] = \"frame\";\n    TAG_NAMES[\"FRAMESET\"] = \"frameset\";\n    TAG_NAMES[\"H1\"] = \"h1\";\n    TAG_NAMES[\"H2\"] = \"h2\";\n    TAG_NAMES[\"H3\"] = \"h3\";\n    TAG_NAMES[\"H4\"] = \"h4\";\n    TAG_NAMES[\"H5\"] = \"h5\";\n    TAG_NAMES[\"H6\"] = \"h6\";\n    TAG_NAMES[\"HEAD\"] = \"head\";\n    TAG_NAMES[\"HEADER\"] = \"header\";\n    TAG_NAMES[\"HGROUP\"] = \"hgroup\";\n    TAG_NAMES[\"HR\"] = \"hr\";\n    TAG_NAMES[\"HTML\"] = \"html\";\n    TAG_NAMES[\"I\"] = \"i\";\n    TAG_NAMES[\"IMG\"] = \"img\";\n    TAG_NAMES[\"IMAGE\"] = \"image\";\n    TAG_NAMES[\"INPUT\"] = \"input\";\n    TAG_NAMES[\"IFRAME\"] = \"iframe\";\n    TAG_NAMES[\"KEYGEN\"] = \"keygen\";\n    TAG_NAMES[\"LABEL\"] = \"label\";\n    TAG_NAMES[\"LI\"] = \"li\";\n    TAG_NAMES[\"LINK\"] = \"link\";\n    TAG_NAMES[\"LISTING\"] = \"listing\";\n    TAG_NAMES[\"MAIN\"] = \"main\";\n    TAG_NAMES[\"MALIGNMARK\"] = \"malignmark\";\n    TAG_NAMES[\"MARQUEE\"] = \"marquee\";\n    TAG_NAMES[\"MATH\"] = \"math\";\n    TAG_NAMES[\"MENU\"] = \"menu\";\n    TAG_NAMES[\"META\"] = \"meta\";\n    TAG_NAMES[\"MGLYPH\"] = \"mglyph\";\n    TAG_NAMES[\"MI\"] = \"mi\";\n    TAG_NAMES[\"MO\"] = \"mo\";\n    TAG_NAMES[\"MN\"] = \"mn\";\n    TAG_NAMES[\"MS\"] = \"ms\";\n    TAG_NAMES[\"MTEXT\"] = \"mtext\";\n    TAG_NAMES[\"NAV\"] = \"nav\";\n    TAG_NAMES[\"NOBR\"] = \"nobr\";\n    TAG_NAMES[\"NOFRAMES\"] = \"noframes\";\n    TAG_NAMES[\"NOEMBED\"] = \"noembed\";\n    TAG_NAMES[\"NOSCRIPT\"] = \"noscript\";\n    TAG_NAMES[\"OBJECT\"] = \"object\";\n    TAG_NAMES[\"OL\"] = \"ol\";\n    TAG_NAMES[\"OPTGROUP\"] = \"optgroup\";\n    TAG_NAMES[\"OPTION\"] = \"option\";\n    TAG_NAMES[\"P\"] = \"p\";\n    TAG_NAMES[\"PARAM\"] = \"param\";\n    TAG_NAMES[\"PLAINTEXT\"] = \"plaintext\";\n    TAG_NAMES[\"PRE\"] = \"pre\";\n    TAG_NAMES[\"RB\"] = \"rb\";\n    TAG_NAMES[\"RP\"] = \"rp\";\n    TAG_NAMES[\"RT\"] = \"rt\";\n    TAG_NAMES[\"RTC\"] = \"rtc\";\n    TAG_NAMES[\"RUBY\"] = \"ruby\";\n    TAG_NAMES[\"S\"] = \"s\";\n    TAG_NAMES[\"SCRIPT\"] = \"script\";\n    TAG_NAMES[\"SEARCH\"] = \"search\";\n    TAG_NAMES[\"SECTION\"] = \"section\";\n    TAG_NAMES[\"SELECT\"] = \"select\";\n    TAG_NAMES[\"SOURCE\"] = \"source\";\n    TAG_NAMES[\"SMALL\"] = \"small\";\n    TAG_NAMES[\"SPAN\"] = \"span\";\n    TAG_NAMES[\"STRIKE\"] = \"strike\";\n    TAG_NAMES[\"STRONG\"] = \"strong\";\n    TAG_NAMES[\"STYLE\"] = \"style\";\n    TAG_NAMES[\"SUB\"] = \"sub\";\n    TAG_NAMES[\"SUMMARY\"] = \"summary\";\n    TAG_NAMES[\"SUP\"] = \"sup\";\n    TAG_NAMES[\"TABLE\"] = \"table\";\n    TAG_NAMES[\"TBODY\"] = \"tbody\";\n    TAG_NAMES[\"TEMPLATE\"] = \"template\";\n    TAG_NAMES[\"TEXTAREA\"] = \"textarea\";\n    TAG_NAMES[\"TFOOT\"] = \"tfoot\";\n    TAG_NAMES[\"TD\"] = \"td\";\n    TAG_NAMES[\"TH\"] = \"th\";\n    TAG_NAMES[\"THEAD\"] = \"thead\";\n    TAG_NAMES[\"TITLE\"] = \"title\";\n    TAG_NAMES[\"TR\"] = \"tr\";\n    TAG_NAMES[\"TRACK\"] = \"track\";\n    TAG_NAMES[\"TT\"] = \"tt\";\n    TAG_NAMES[\"U\"] = \"u\";\n    TAG_NAMES[\"UL\"] = \"ul\";\n    TAG_NAMES[\"SVG\"] = \"svg\";\n    TAG_NAMES[\"VAR\"] = \"var\";\n    TAG_NAMES[\"WBR\"] = \"wbr\";\n    TAG_NAMES[\"XMP\"] = \"xmp\";\n})(TAG_NAMES || (TAG_NAMES = {}));\n/**\n * Tag IDs are numeric IDs for known tag names.\n *\n * We use tag IDs to improve the performance of tag name comparisons.\n */\nexport var TAG_ID;\n(function (TAG_ID) {\n    TAG_ID[TAG_ID[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    TAG_ID[TAG_ID[\"A\"] = 1] = \"A\";\n    TAG_ID[TAG_ID[\"ADDRESS\"] = 2] = \"ADDRESS\";\n    TAG_ID[TAG_ID[\"ANNOTATION_XML\"] = 3] = \"ANNOTATION_XML\";\n    TAG_ID[TAG_ID[\"APPLET\"] = 4] = \"APPLET\";\n    TAG_ID[TAG_ID[\"AREA\"] = 5] = \"AREA\";\n    TAG_ID[TAG_ID[\"ARTICLE\"] = 6] = \"ARTICLE\";\n    TAG_ID[TAG_ID[\"ASIDE\"] = 7] = \"ASIDE\";\n    TAG_ID[TAG_ID[\"B\"] = 8] = \"B\";\n    TAG_ID[TAG_ID[\"BASE\"] = 9] = \"BASE\";\n    TAG_ID[TAG_ID[\"BASEFONT\"] = 10] = \"BASEFONT\";\n    TAG_ID[TAG_ID[\"BGSOUND\"] = 11] = \"BGSOUND\";\n    TAG_ID[TAG_ID[\"BIG\"] = 12] = \"BIG\";\n    TAG_ID[TAG_ID[\"BLOCKQUOTE\"] = 13] = \"BLOCKQUOTE\";\n    TAG_ID[TAG_ID[\"BODY\"] = 14] = \"BODY\";\n    TAG_ID[TAG_ID[\"BR\"] = 15] = \"BR\";\n    TAG_ID[TAG_ID[\"BUTTON\"] = 16] = \"BUTTON\";\n    TAG_ID[TAG_ID[\"CAPTION\"] = 17] = \"CAPTION\";\n    TAG_ID[TAG_ID[\"CENTER\"] = 18] = \"CENTER\";\n    TAG_ID[TAG_ID[\"CODE\"] = 19] = \"CODE\";\n    TAG_ID[TAG_ID[\"COL\"] = 20] = \"COL\";\n    TAG_ID[TAG_ID[\"COLGROUP\"] = 21] = \"COLGROUP\";\n    TAG_ID[TAG_ID[\"DD\"] = 22] = \"DD\";\n    TAG_ID[TAG_ID[\"DESC\"] = 23] = \"DESC\";\n    TAG_ID[TAG_ID[\"DETAILS\"] = 24] = \"DETAILS\";\n    TAG_ID[TAG_ID[\"DIALOG\"] = 25] = \"DIALOG\";\n    TAG_ID[TAG_ID[\"DIR\"] = 26] = \"DIR\";\n    TAG_ID[TAG_ID[\"DIV\"] = 27] = \"DIV\";\n    TAG_ID[TAG_ID[\"DL\"] = 28] = \"DL\";\n    TAG_ID[TAG_ID[\"DT\"] = 29] = \"DT\";\n    TAG_ID[TAG_ID[\"EM\"] = 30] = \"EM\";\n    TAG_ID[TAG_ID[\"EMBED\"] = 31] = \"EMBED\";\n    TAG_ID[TAG_ID[\"FIELDSET\"] = 32] = \"FIELDSET\";\n    TAG_ID[TAG_ID[\"FIGCAPTION\"] = 33] = \"FIGCAPTION\";\n    TAG_ID[TAG_ID[\"FIGURE\"] = 34] = \"FIGURE\";\n    TAG_ID[TAG_ID[\"FONT\"] = 35] = \"FONT\";\n    TAG_ID[TAG_ID[\"FOOTER\"] = 36] = \"FOOTER\";\n    TAG_ID[TAG_ID[\"FOREIGN_OBJECT\"] = 37] = \"FOREIGN_OBJECT\";\n    TAG_ID[TAG_ID[\"FORM\"] = 38] = \"FORM\";\n    TAG_ID[TAG_ID[\"FRAME\"] = 39] = \"FRAME\";\n    TAG_ID[TAG_ID[\"FRAMESET\"] = 40] = \"FRAMESET\";\n    TAG_ID[TAG_ID[\"H1\"] = 41] = \"H1\";\n    TAG_ID[TAG_ID[\"H2\"] = 42] = \"H2\";\n    TAG_ID[TAG_ID[\"H3\"] = 43] = \"H3\";\n    TAG_ID[TAG_ID[\"H4\"] = 44] = \"H4\";\n    TAG_ID[TAG_ID[\"H5\"] = 45] = \"H5\";\n    TAG_ID[TAG_ID[\"H6\"] = 46] = \"H6\";\n    TAG_ID[TAG_ID[\"HEAD\"] = 47] = \"HEAD\";\n    TAG_ID[TAG_ID[\"HEADER\"] = 48] = \"HEADER\";\n    TAG_ID[TAG_ID[\"HGROUP\"] = 49] = \"HGROUP\";\n    TAG_ID[TAG_ID[\"HR\"] = 50] = \"HR\";\n    TAG_ID[TAG_ID[\"HTML\"] = 51] = \"HTML\";\n    TAG_ID[TAG_ID[\"I\"] = 52] = \"I\";\n    TAG_ID[TAG_ID[\"IMG\"] = 53] = \"IMG\";\n    TAG_ID[TAG_ID[\"IMAGE\"] = 54] = \"IMAGE\";\n    TAG_ID[TAG_ID[\"INPUT\"] = 55] = \"INPUT\";\n    TAG_ID[TAG_ID[\"IFRAME\"] = 56] = \"IFRAME\";\n    TAG_ID[TAG_ID[\"KEYGEN\"] = 57] = \"KEYGEN\";\n    TAG_ID[TAG_ID[\"LABEL\"] = 58] = \"LABEL\";\n    TAG_ID[TAG_ID[\"LI\"] = 59] = \"LI\";\n    TAG_ID[TAG_ID[\"LINK\"] = 60] = \"LINK\";\n    TAG_ID[TAG_ID[\"LISTING\"] = 61] = \"LISTING\";\n    TAG_ID[TAG_ID[\"MAIN\"] = 62] = \"MAIN\";\n    TAG_ID[TAG_ID[\"MALIGNMARK\"] = 63] = \"MALIGNMARK\";\n    TAG_ID[TAG_ID[\"MARQUEE\"] = 64] = \"MARQUEE\";\n    TAG_ID[TAG_ID[\"MATH\"] = 65] = \"MATH\";\n    TAG_ID[TAG_ID[\"MENU\"] = 66] = \"MENU\";\n    TAG_ID[TAG_ID[\"META\"] = 67] = \"META\";\n    TAG_ID[TAG_ID[\"MGLYPH\"] = 68] = \"MGLYPH\";\n    TAG_ID[TAG_ID[\"MI\"] = 69] = \"MI\";\n    TAG_ID[TAG_ID[\"MO\"] = 70] = \"MO\";\n    TAG_ID[TAG_ID[\"MN\"] = 71] = \"MN\";\n    TAG_ID[TAG_ID[\"MS\"] = 72] = \"MS\";\n    TAG_ID[TAG_ID[\"MTEXT\"] = 73] = \"MTEXT\";\n    TAG_ID[TAG_ID[\"NAV\"] = 74] = \"NAV\";\n    TAG_ID[TAG_ID[\"NOBR\"] = 75] = \"NOBR\";\n    TAG_ID[TAG_ID[\"NOFRAMES\"] = 76] = \"NOFRAMES\";\n    TAG_ID[TAG_ID[\"NOEMBED\"] = 77] = \"NOEMBED\";\n    TAG_ID[TAG_ID[\"NOSCRIPT\"] = 78] = \"NOSCRIPT\";\n    TAG_ID[TAG_ID[\"OBJECT\"] = 79] = \"OBJECT\";\n    TAG_ID[TAG_ID[\"OL\"] = 80] = \"OL\";\n    TAG_ID[TAG_ID[\"OPTGROUP\"] = 81] = \"OPTGROUP\";\n    TAG_ID[TAG_ID[\"OPTION\"] = 82] = \"OPTION\";\n    TAG_ID[TAG_ID[\"P\"] = 83] = \"P\";\n    TAG_ID[TAG_ID[\"PARAM\"] = 84] = \"PARAM\";\n    TAG_ID[TAG_ID[\"PLAINTEXT\"] = 85] = \"PLAINTEXT\";\n    TAG_ID[TAG_ID[\"PRE\"] = 86] = \"PRE\";\n    TAG_ID[TAG_ID[\"RB\"] = 87] = \"RB\";\n    TAG_ID[TAG_ID[\"RP\"] = 88] = \"RP\";\n    TAG_ID[TAG_ID[\"RT\"] = 89] = \"RT\";\n    TAG_ID[TAG_ID[\"RTC\"] = 90] = \"RTC\";\n    TAG_ID[TAG_ID[\"RUBY\"] = 91] = \"RUBY\";\n    TAG_ID[TAG_ID[\"S\"] = 92] = \"S\";\n    TAG_ID[TAG_ID[\"SCRIPT\"] = 93] = \"SCRIPT\";\n    TAG_ID[TAG_ID[\"SEARCH\"] = 94] = \"SEARCH\";\n    TAG_ID[TAG_ID[\"SECTION\"] = 95] = \"SECTION\";\n    TAG_ID[TAG_ID[\"SELECT\"] = 96] = \"SELECT\";\n    TAG_ID[TAG_ID[\"SOURCE\"] = 97] = \"SOURCE\";\n    TAG_ID[TAG_ID[\"SMALL\"] = 98] = \"SMALL\";\n    TAG_ID[TAG_ID[\"SPAN\"] = 99] = \"SPAN\";\n    TAG_ID[TAG_ID[\"STRIKE\"] = 100] = \"STRIKE\";\n    TAG_ID[TAG_ID[\"STRONG\"] = 101] = \"STRONG\";\n    TAG_ID[TAG_ID[\"STYLE\"] = 102] = \"STYLE\";\n    TAG_ID[TAG_ID[\"SUB\"] = 103] = \"SUB\";\n    TAG_ID[TAG_ID[\"SUMMARY\"] = 104] = \"SUMMARY\";\n    TAG_ID[TAG_ID[\"SUP\"] = 105] = \"SUP\";\n    TAG_ID[TAG_ID[\"TABLE\"] = 106] = \"TABLE\";\n    TAG_ID[TAG_ID[\"TBODY\"] = 107] = \"TBODY\";\n    TAG_ID[TAG_ID[\"TEMPLATE\"] = 108] = \"TEMPLATE\";\n    TAG_ID[TAG_ID[\"TEXTAREA\"] = 109] = \"TEXTAREA\";\n    TAG_ID[TAG_ID[\"TFOOT\"] = 110] = \"TFOOT\";\n    TAG_ID[TAG_ID[\"TD\"] = 111] = \"TD\";\n    TAG_ID[TAG_ID[\"TH\"] = 112] = \"TH\";\n    TAG_ID[TAG_ID[\"THEAD\"] = 113] = \"THEAD\";\n    TAG_ID[TAG_ID[\"TITLE\"] = 114] = \"TITLE\";\n    TAG_ID[TAG_ID[\"TR\"] = 115] = \"TR\";\n    TAG_ID[TAG_ID[\"TRACK\"] = 116] = \"TRACK\";\n    TAG_ID[TAG_ID[\"TT\"] = 117] = \"TT\";\n    TAG_ID[TAG_ID[\"U\"] = 118] = \"U\";\n    TAG_ID[TAG_ID[\"UL\"] = 119] = \"UL\";\n    TAG_ID[TAG_ID[\"SVG\"] = 120] = \"SVG\";\n    TAG_ID[TAG_ID[\"VAR\"] = 121] = \"VAR\";\n    TAG_ID[TAG_ID[\"WBR\"] = 122] = \"WBR\";\n    TAG_ID[TAG_ID[\"XMP\"] = 123] = \"XMP\";\n})(TAG_ID || (TAG_ID = {}));\nconst TAG_NAME_TO_ID = new Map([\n    [TAG_NAMES.A, TAG_ID.A],\n    [TAG_NAMES.ADDRESS, TAG_ID.ADDRESS],\n    [TAG_NAMES.ANNOTATION_XML, TAG_ID.ANNOTATION_XML],\n    [TAG_NAMES.APPLET, TAG_ID.APPLET],\n    [TAG_NAMES.AREA, TAG_ID.AREA],\n    [TAG_NAMES.ARTICLE, TAG_ID.ARTICLE],\n    [TAG_NAMES.ASIDE, TAG_ID.ASIDE],\n    [TAG_NAMES.B, TAG_ID.B],\n    [TAG_NAMES.BASE, TAG_ID.BASE],\n    [TAG_NAMES.BASEFONT, TAG_ID.BASEFONT],\n    [TAG_NAMES.BGSOUND, TAG_ID.BGSOUND],\n    [TAG_NAMES.BIG, TAG_ID.BIG],\n    [TAG_NAMES.BLOCKQUOTE, TAG_ID.BLOCKQUOTE],\n    [TAG_NAMES.BODY, TAG_ID.BODY],\n    [TAG_NAMES.BR, TAG_ID.BR],\n    [TAG_NAMES.BUTTON, TAG_ID.BUTTON],\n    [TAG_NAMES.CAPTION, TAG_ID.CAPTION],\n    [TAG_NAMES.CENTER, TAG_ID.CENTER],\n    [TAG_NAMES.CODE, TAG_ID.CODE],\n    [TAG_NAMES.COL, TAG_ID.COL],\n    [TAG_NAMES.COLGROUP, TAG_ID.COLGROUP],\n    [TAG_NAMES.DD, TAG_ID.DD],\n    [TAG_NAMES.DESC, TAG_ID.DESC],\n    [TAG_NAMES.DETAILS, TAG_ID.DETAILS],\n    [TAG_NAMES.DIALOG, TAG_ID.DIALOG],\n    [TAG_NAMES.DIR, TAG_ID.DIR],\n    [TAG_NAMES.DIV, TAG_ID.DIV],\n    [TAG_NAMES.DL, TAG_ID.DL],\n    [TAG_NAMES.DT, TAG_ID.DT],\n    [TAG_NAMES.EM, TAG_ID.EM],\n    [TAG_NAMES.EMBED, TAG_ID.EMBED],\n    [TAG_NAMES.FIELDSET, TAG_ID.FIELDSET],\n    [TAG_NAMES.FIGCAPTION, TAG_ID.FIGCAPTION],\n    [TAG_NAMES.FIGURE, TAG_ID.FIGURE],\n    [TAG_NAMES.FONT, TAG_ID.FONT],\n    [TAG_NAMES.FOOTER, TAG_ID.FOOTER],\n    [TAG_NAMES.FOREIGN_OBJECT, TAG_ID.FOREIGN_OBJECT],\n    [TAG_NAMES.FORM, TAG_ID.FORM],\n    [TAG_NAMES.FRAME, TAG_ID.FRAME],\n    [TAG_NAMES.FRAMESET, TAG_ID.FRAMESET],\n    [TAG_NAMES.H1, TAG_ID.H1],\n    [TAG_NAMES.H2, TAG_ID.H2],\n    [TAG_NAMES.H3, TAG_ID.H3],\n    [TAG_NAMES.H4, TAG_ID.H4],\n    [TAG_NAMES.H5, TAG_ID.H5],\n    [TAG_NAMES.H6, TAG_ID.H6],\n    [TAG_NAMES.HEAD, TAG_ID.HEAD],\n    [TAG_NAMES.HEADER, TAG_ID.HEADER],\n    [TAG_NAMES.HGROUP, TAG_ID.HGROUP],\n    [TAG_NAMES.HR, TAG_ID.HR],\n    [TAG_NAMES.HTML, TAG_ID.HTML],\n    [TAG_NAMES.I, TAG_ID.I],\n    [TAG_NAMES.IMG, TAG_ID.IMG],\n    [TAG_NAMES.IMAGE, TAG_ID.IMAGE],\n    [TAG_NAMES.INPUT, TAG_ID.INPUT],\n    [TAG_NAMES.IFRAME, TAG_ID.IFRAME],\n    [TAG_NAMES.KEYGEN, TAG_ID.KEYGEN],\n    [TAG_NAMES.LABEL, TAG_ID.LABEL],\n    [TAG_NAMES.LI, TAG_ID.LI],\n    [TAG_NAMES.LINK, TAG_ID.LINK],\n    [TAG_NAMES.LISTING, TAG_ID.LISTING],\n    [TAG_NAMES.MAIN, TAG_ID.MAIN],\n    [TAG_NAMES.MALIGNMARK, TAG_ID.MALIGNMARK],\n    [TAG_NAMES.MARQUEE, TAG_ID.MARQUEE],\n    [TAG_NAMES.MATH, TAG_ID.MATH],\n    [TAG_NAMES.MENU, TAG_ID.MENU],\n    [TAG_NAMES.META, TAG_ID.META],\n    [TAG_NAMES.MGLYPH, TAG_ID.MGLYPH],\n    [TAG_NAMES.MI, TAG_ID.MI],\n    [TAG_NAMES.MO, TAG_ID.MO],\n    [TAG_NAMES.MN, TAG_ID.MN],\n    [TAG_NAMES.MS, TAG_ID.MS],\n    [TAG_NAMES.MTEXT, TAG_ID.MTEXT],\n    [TAG_NAMES.NAV, TAG_ID.NAV],\n    [TAG_NAMES.NOBR, TAG_ID.NOBR],\n    [TAG_NAMES.NOFRAMES, TAG_ID.NOFRAMES],\n    [TAG_NAMES.NOEMBED, TAG_ID.NOEMBED],\n    [TAG_NAMES.NOSCRIPT, TAG_ID.NOSCRIPT],\n    [TAG_NAMES.OBJECT, TAG_ID.OBJECT],\n    [TAG_NAMES.OL, TAG_ID.OL],\n    [TAG_NAMES.OPTGROUP, TAG_ID.OPTGROUP],\n    [TAG_NAMES.OPTION, TAG_ID.OPTION],\n    [TAG_NAMES.P, TAG_ID.P],\n    [TAG_NAMES.PARAM, TAG_ID.PARAM],\n    [TAG_NAMES.PLAINTEXT, TAG_ID.PLAINTEXT],\n    [TAG_NAMES.PRE, TAG_ID.PRE],\n    [TAG_NAMES.RB, TAG_ID.RB],\n    [TAG_NAMES.RP, TAG_ID.RP],\n    [TAG_NAMES.RT, TAG_ID.RT],\n    [TAG_NAMES.RTC, TAG_ID.RTC],\n    [TAG_NAMES.RUBY, TAG_ID.RUBY],\n    [TAG_NAMES.S, TAG_ID.S],\n    [TAG_NAMES.SCRIPT, TAG_ID.SCRIPT],\n    [TAG_NAMES.SEARCH, TAG_ID.SEARCH],\n    [TAG_NAMES.SECTION, TAG_ID.SECTION],\n    [TAG_NAMES.SELECT, TAG_ID.SELECT],\n    [TAG_NAMES.SOURCE, TAG_ID.SOURCE],\n    [TAG_NAMES.SMALL, TAG_ID.SMALL],\n    [TAG_NAMES.SPAN, TAG_ID.SPAN],\n    [TAG_NAMES.STRIKE, TAG_ID.STRIKE],\n    [TAG_NAMES.STRONG, TAG_ID.STRONG],\n    [TAG_NAMES.STYLE, TAG_ID.STYLE],\n    [TAG_NAMES.SUB, TAG_ID.SUB],\n    [TAG_NAMES.SUMMARY, TAG_ID.SUMMARY],\n    [TAG_NAMES.SUP, TAG_ID.SUP],\n    [TAG_NAMES.TABLE, TAG_ID.TABLE],\n    [TAG_NAMES.TBODY, TAG_ID.TBODY],\n    [TAG_NAMES.TEMPLATE, TAG_ID.TEMPLATE],\n    [TAG_NAMES.TEXTAREA, TAG_ID.TEXTAREA],\n    [TAG_NAMES.TFOOT, TAG_ID.TFOOT],\n    [TAG_NAMES.TD, TAG_ID.TD],\n    [TAG_NAMES.TH, TAG_ID.TH],\n    [TAG_NAMES.THEAD, TAG_ID.THEAD],\n    [TAG_NAMES.TITLE, TAG_ID.TITLE],\n    [TAG_NAMES.TR, TAG_ID.TR],\n    [TAG_NAMES.TRACK, TAG_ID.TRACK],\n    [TAG_NAMES.TT, TAG_ID.TT],\n    [TAG_NAMES.U, TAG_ID.U],\n    [TAG_NAMES.UL, TAG_ID.UL],\n    [TAG_NAMES.SVG, TAG_ID.SVG],\n    [TAG_NAMES.VAR, TAG_ID.VAR],\n    [TAG_NAMES.WBR, TAG_ID.WBR],\n    [TAG_NAMES.XMP, TAG_ID.XMP],\n]);\nexport function getTagID(tagName) {\n    var _a;\n    return (_a = TAG_NAME_TO_ID.get(tagName)) !== null && _a !== void 0 ? _a : TAG_ID.UNKNOWN;\n}\nconst $ = TAG_ID;\nexport const SPECIAL_ELEMENTS = {\n    [NS.HTML]: new Set([\n        $.ADDRESS,\n        $.APPLET,\n        $.AREA,\n        $.ARTICLE,\n        $.ASIDE,\n        $.BASE,\n        $.BASEFONT,\n        $.BGSOUND,\n        $.BLOCKQUOTE,\n        $.BODY,\n        $.BR,\n        $.BUTTON,\n        $.CAPTION,\n        $.CENTER,\n        $.COL,\n        $.COLGROUP,\n        $.DD,\n        $.DETAILS,\n        $.DIR,\n        $.DIV,\n        $.DL,\n        $.DT,\n        $.EMBED,\n        $.FIELDSET,\n        $.FIGCAPTION,\n        $.FIGURE,\n        $.FOOTER,\n        $.FORM,\n        $.FRAME,\n        $.FRAMESET,\n        $.H1,\n        $.H2,\n        $.H3,\n        $.H4,\n        $.H5,\n        $.H6,\n        $.HEAD,\n        $.HEADER,\n        $.HGROUP,\n        $.HR,\n        $.HTML,\n        $.IFRAME,\n        $.IMG,\n        $.INPUT,\n        $.LI,\n        $.LINK,\n        $.LISTING,\n        $.MAIN,\n        $.MARQUEE,\n        $.MENU,\n        $.META,\n        $.NAV,\n        $.NOEMBED,\n        $.NOFRAMES,\n        $.NOSCRIPT,\n        $.OBJECT,\n        $.OL,\n        $.P,\n        $.PARAM,\n        $.PLAINTEXT,\n        $.PRE,\n        $.SCRIPT,\n        $.SECTION,\n        $.SELECT,\n        $.SOURCE,\n        $.STYLE,\n        $.SUMMARY,\n        $.TABLE,\n        $.TBODY,\n        $.TD,\n        $.TEMPLATE,\n        $.TEXTAREA,\n        $.TFOOT,\n        $.TH,\n        $.THEAD,\n        $.TITLE,\n        $.TR,\n        $.TRACK,\n        $.UL,\n        $.WBR,\n        $.XMP,\n    ]),\n    [NS.MATHML]: new Set([$.MI, $.MO, $.MN, $.MS, $.MTEXT, $.ANNOTATION_XML]),\n    [NS.SVG]: new Set([$.TITLE, $.FOREIGN_OBJECT, $.DESC]),\n    [NS.XLINK]: new Set(),\n    [NS.XML]: new Set(),\n    [NS.XMLNS]: new Set(),\n};\nexport const NUMBERED_HEADERS = new Set([$.H1, $.H2, $.H3, $.H4, $.H5, $.H6]);\nconst UNESCAPED_TEXT = new Set([\n    TAG_NAMES.STYLE,\n    TAG_NAMES.SCRIPT,\n    TAG_NAMES.XMP,\n    TAG_NAMES.IFRAME,\n    TAG_NAMES.NOEMBED,\n    TAG_NAMES.NOFRAMES,\n    TAG_NAMES.PLAINTEXT,\n]);\nexport function hasUnescapedText(tn, scriptingEnabled) {\n    return UNESCAPED_TEXT.has(tn) || (scriptingEnabled && tn === TAG_NAMES.NOSCRIPT);\n}\n","import { Preprocessor } from './preprocessor.js';\nimport { CODE_POINTS as $, SEQUENCES as $$, REPLACEMENT_CHARACTER, isSurrogate, isUndefinedCodePoint, isControlCodePoint, } from '../common/unicode.js';\nimport { TokenType, getTokenAttr, } from '../common/token.js';\nimport { htmlDecodeTree, EntityDecoder, DecodingMode } from 'entities/lib/decode.js';\nimport { ERR } from '../common/error-codes.js';\nimport { TAG_ID, getTagID } from '../common/html.js';\n//States\nvar State;\n(function (State) {\n    State[State[\"DATA\"] = 0] = \"DATA\";\n    State[State[\"RCDATA\"] = 1] = \"RCDATA\";\n    State[State[\"RAWTEXT\"] = 2] = \"RAWTEXT\";\n    State[State[\"SCRIPT_DATA\"] = 3] = \"SCRIPT_DATA\";\n    State[State[\"PLAINTEXT\"] = 4] = \"PLAINTEXT\";\n    State[State[\"TAG_OPEN\"] = 5] = \"TAG_OPEN\";\n    State[State[\"END_TAG_OPEN\"] = 6] = \"END_TAG_OPEN\";\n    State[State[\"TAG_NAME\"] = 7] = \"TAG_NAME\";\n    State[State[\"RCDATA_LESS_THAN_SIGN\"] = 8] = \"RCDATA_LESS_THAN_SIGN\";\n    State[State[\"RCDATA_END_TAG_OPEN\"] = 9] = \"RCDATA_END_TAG_OPEN\";\n    State[State[\"RCDATA_END_TAG_NAME\"] = 10] = \"RCDATA_END_TAG_NAME\";\n    State[State[\"RAWTEXT_LESS_THAN_SIGN\"] = 11] = \"RAWTEXT_LESS_THAN_SIGN\";\n    State[State[\"RAWTEXT_END_TAG_OPEN\"] = 12] = \"RAWTEXT_END_TAG_OPEN\";\n    State[State[\"RAWTEXT_END_TAG_NAME\"] = 13] = \"RAWTEXT_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_LESS_THAN_SIGN\"] = 14] = \"SCRIPT_DATA_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_END_TAG_OPEN\"] = 15] = \"SCRIPT_DATA_END_TAG_OPEN\";\n    State[State[\"SCRIPT_DATA_END_TAG_NAME\"] = 16] = \"SCRIPT_DATA_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_ESCAPE_START\"] = 17] = \"SCRIPT_DATA_ESCAPE_START\";\n    State[State[\"SCRIPT_DATA_ESCAPE_START_DASH\"] = 18] = \"SCRIPT_DATA_ESCAPE_START_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED\"] = 19] = \"SCRIPT_DATA_ESCAPED\";\n    State[State[\"SCRIPT_DATA_ESCAPED_DASH\"] = 20] = \"SCRIPT_DATA_ESCAPED_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED_DASH_DASH\"] = 21] = \"SCRIPT_DATA_ESCAPED_DASH_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\"] = 22] = \"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\"] = 23] = \"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\";\n    State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_NAME\"] = 24] = \"SCRIPT_DATA_ESCAPED_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_START\"] = 25] = \"SCRIPT_DATA_DOUBLE_ESCAPE_START\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED\"] = 26] = \"SCRIPT_DATA_DOUBLE_ESCAPED\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\"] = 27] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\"] = 28] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\"] = 29] = \"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_END\"] = 30] = \"SCRIPT_DATA_DOUBLE_ESCAPE_END\";\n    State[State[\"BEFORE_ATTRIBUTE_NAME\"] = 31] = \"BEFORE_ATTRIBUTE_NAME\";\n    State[State[\"ATTRIBUTE_NAME\"] = 32] = \"ATTRIBUTE_NAME\";\n    State[State[\"AFTER_ATTRIBUTE_NAME\"] = 33] = \"AFTER_ATTRIBUTE_NAME\";\n    State[State[\"BEFORE_ATTRIBUTE_VALUE\"] = 34] = \"BEFORE_ATTRIBUTE_VALUE\";\n    State[State[\"ATTRIBUTE_VALUE_DOUBLE_QUOTED\"] = 35] = \"ATTRIBUTE_VALUE_DOUBLE_QUOTED\";\n    State[State[\"ATTRIBUTE_VALUE_SINGLE_QUOTED\"] = 36] = \"ATTRIBUTE_VALUE_SINGLE_QUOTED\";\n    State[State[\"ATTRIBUTE_VALUE_UNQUOTED\"] = 37] = \"ATTRIBUTE_VALUE_UNQUOTED\";\n    State[State[\"AFTER_ATTRIBUTE_VALUE_QUOTED\"] = 38] = \"AFTER_ATTRIBUTE_VALUE_QUOTED\";\n    State[State[\"SELF_CLOSING_START_TAG\"] = 39] = \"SELF_CLOSING_START_TAG\";\n    State[State[\"BOGUS_COMMENT\"] = 40] = \"BOGUS_COMMENT\";\n    State[State[\"MARKUP_DECLARATION_OPEN\"] = 41] = \"MARKUP_DECLARATION_OPEN\";\n    State[State[\"COMMENT_START\"] = 42] = \"COMMENT_START\";\n    State[State[\"COMMENT_START_DASH\"] = 43] = \"COMMENT_START_DASH\";\n    State[State[\"COMMENT\"] = 44] = \"COMMENT\";\n    State[State[\"COMMENT_LESS_THAN_SIGN\"] = 45] = \"COMMENT_LESS_THAN_SIGN\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG\"] = 46] = \"COMMENT_LESS_THAN_SIGN_BANG\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH\"] = 47] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\"] = 48] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\";\n    State[State[\"COMMENT_END_DASH\"] = 49] = \"COMMENT_END_DASH\";\n    State[State[\"COMMENT_END\"] = 50] = \"COMMENT_END\";\n    State[State[\"COMMENT_END_BANG\"] = 51] = \"COMMENT_END_BANG\";\n    State[State[\"DOCTYPE\"] = 52] = \"DOCTYPE\";\n    State[State[\"BEFORE_DOCTYPE_NAME\"] = 53] = \"BEFORE_DOCTYPE_NAME\";\n    State[State[\"DOCTYPE_NAME\"] = 54] = \"DOCTYPE_NAME\";\n    State[State[\"AFTER_DOCTYPE_NAME\"] = 55] = \"AFTER_DOCTYPE_NAME\";\n    State[State[\"AFTER_DOCTYPE_PUBLIC_KEYWORD\"] = 56] = \"AFTER_DOCTYPE_PUBLIC_KEYWORD\";\n    State[State[\"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\"] = 57] = \"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\";\n    State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\"] = 58] = \"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\";\n    State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\"] = 59] = \"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\";\n    State[State[\"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\"] = 60] = \"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\";\n    State[State[\"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\"] = 61] = \"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\";\n    State[State[\"AFTER_DOCTYPE_SYSTEM_KEYWORD\"] = 62] = \"AFTER_DOCTYPE_SYSTEM_KEYWORD\";\n    State[State[\"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\"] = 63] = \"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\";\n    State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\"] = 64] = \"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\";\n    State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\"] = 65] = \"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\";\n    State[State[\"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\"] = 66] = \"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\";\n    State[State[\"BOGUS_DOCTYPE\"] = 67] = \"BOGUS_DOCTYPE\";\n    State[State[\"CDATA_SECTION\"] = 68] = \"CDATA_SECTION\";\n    State[State[\"CDATA_SECTION_BRACKET\"] = 69] = \"CDATA_SECTION_BRACKET\";\n    State[State[\"CDATA_SECTION_END\"] = 70] = \"CDATA_SECTION_END\";\n    State[State[\"CHARACTER_REFERENCE\"] = 71] = \"CHARACTER_REFERENCE\";\n    State[State[\"AMBIGUOUS_AMPERSAND\"] = 72] = \"AMBIGUOUS_AMPERSAND\";\n})(State || (State = {}));\n//Tokenizer initial states for different modes\nexport const TokenizerMode = {\n    DATA: State.DATA,\n    RCDATA: State.RCDATA,\n    RAWTEXT: State.RAWTEXT,\n    SCRIPT_DATA: State.SCRIPT_DATA,\n    PLAINTEXT: State.PLAINTEXT,\n    CDATA_SECTION: State.CDATA_SECTION,\n};\n//Utils\n//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline\n//this functions if they will be situated in another module due to context switch.\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\nfunction isAsciiDigit(cp) {\n    return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;\n}\nfunction isAsciiUpper(cp) {\n    return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;\n}\nfunction isAsciiLower(cp) {\n    return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;\n}\nfunction isAsciiLetter(cp) {\n    return isAsciiLower(cp) || isAsciiUpper(cp);\n}\nfunction isAsciiAlphaNumeric(cp) {\n    return isAsciiLetter(cp) || isAsciiDigit(cp);\n}\nfunction toAsciiLower(cp) {\n    return cp + 32;\n}\nfunction isWhitespace(cp) {\n    return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;\n}\nfunction isScriptDataDoubleEscapeSequenceEnd(cp) {\n    return isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN;\n}\nfunction getErrorForNumericCharacterReference(code) {\n    if (code === $.NULL) {\n        return ERR.nullCharacterReference;\n    }\n    else if (code > 1114111) {\n        return ERR.characterReferenceOutsideUnicodeRange;\n    }\n    else if (isSurrogate(code)) {\n        return ERR.surrogateCharacterReference;\n    }\n    else if (isUndefinedCodePoint(code)) {\n        return ERR.noncharacterCharacterReference;\n    }\n    else if (isControlCodePoint(code) || code === $.CARRIAGE_RETURN) {\n        return ERR.controlCharacterReference;\n    }\n    return null;\n}\n//Tokenizer\nexport class Tokenizer {\n    constructor(options, handler) {\n        this.options = options;\n        this.handler = handler;\n        this.paused = false;\n        /** Ensures that the parsing loop isn't run multiple times at once. */\n        this.inLoop = false;\n        /**\n         * Indicates that the current adjusted node exists, is not an element in the HTML namespace,\n         * and that it is not an integration point for either MathML or HTML.\n         *\n         * @see {@link https://html.spec.whatwg.org/multipage/parsing.html#tree-construction}\n         */\n        this.inForeignNode = false;\n        this.lastStartTagName = '';\n        this.active = false;\n        this.state = State.DATA;\n        this.returnState = State.DATA;\n        this.entityStartPos = 0;\n        this.consumedAfterSnapshot = -1;\n        this.currentCharacterToken = null;\n        this.currentToken = null;\n        this.currentAttr = { name: '', value: '' };\n        this.preprocessor = new Preprocessor(handler);\n        this.currentLocation = this.getCurrentLocation(-1);\n        this.entityDecoder = new EntityDecoder(htmlDecodeTree, (cp, consumed) => {\n            // Note: Set `pos` _before_ flushing, as flushing might drop\n            // the current chunk and invalidate `entityStartPos`.\n            this.preprocessor.pos = this.entityStartPos + consumed - 1;\n            this._flushCodePointConsumedAsCharacterReference(cp);\n        }, handler.onParseError\n            ? {\n                missingSemicolonAfterCharacterReference: () => {\n                    this._err(ERR.missingSemicolonAfterCharacterReference, 1);\n                },\n                absenceOfDigitsInNumericCharacterReference: (consumed) => {\n                    this._err(ERR.absenceOfDigitsInNumericCharacterReference, this.entityStartPos - this.preprocessor.pos + consumed);\n                },\n                validateNumericCharacterReference: (code) => {\n                    const error = getErrorForNumericCharacterReference(code);\n                    if (error)\n                        this._err(error, 1);\n                },\n            }\n            : undefined);\n    }\n    //Errors\n    _err(code, cpOffset = 0) {\n        var _a, _b;\n        (_b = (_a = this.handler).onParseError) === null || _b === void 0 ? void 0 : _b.call(_a, this.preprocessor.getError(code, cpOffset));\n    }\n    // NOTE: `offset` may never run across line boundaries.\n    getCurrentLocation(offset) {\n        if (!this.options.sourceCodeLocationInfo) {\n            return null;\n        }\n        return {\n            startLine: this.preprocessor.line,\n            startCol: this.preprocessor.col - offset,\n            startOffset: this.preprocessor.offset - offset,\n            endLine: -1,\n            endCol: -1,\n            endOffset: -1,\n        };\n    }\n    _runParsingLoop() {\n        if (this.inLoop)\n            return;\n        this.inLoop = true;\n        while (this.active && !this.paused) {\n            this.consumedAfterSnapshot = 0;\n            const cp = this._consume();\n            if (!this._ensureHibernation()) {\n                this._callState(cp);\n            }\n        }\n        this.inLoop = false;\n    }\n    //API\n    pause() {\n        this.paused = true;\n    }\n    resume(writeCallback) {\n        if (!this.paused) {\n            throw new Error('Parser was already resumed');\n        }\n        this.paused = false;\n        // Necessary for synchronous resume.\n        if (this.inLoop)\n            return;\n        this._runParsingLoop();\n        if (!this.paused) {\n            writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n        }\n    }\n    write(chunk, isLastChunk, writeCallback) {\n        this.active = true;\n        this.preprocessor.write(chunk, isLastChunk);\n        this._runParsingLoop();\n        if (!this.paused) {\n            writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n        }\n    }\n    insertHtmlAtCurrentPos(chunk) {\n        this.active = true;\n        this.preprocessor.insertHtmlAtCurrentPos(chunk);\n        this._runParsingLoop();\n    }\n    //Hibernation\n    _ensureHibernation() {\n        if (this.preprocessor.endOfChunkHit) {\n            this.preprocessor.retreat(this.consumedAfterSnapshot);\n            this.consumedAfterSnapshot = 0;\n            this.active = false;\n            return true;\n        }\n        return false;\n    }\n    //Consumption\n    _consume() {\n        this.consumedAfterSnapshot++;\n        return this.preprocessor.advance();\n    }\n    _advanceBy(count) {\n        this.consumedAfterSnapshot += count;\n        for (let i = 0; i < count; i++) {\n            this.preprocessor.advance();\n        }\n    }\n    _consumeSequenceIfMatch(pattern, caseSensitive) {\n        if (this.preprocessor.startsWith(pattern, caseSensitive)) {\n            // We will already have consumed one character before calling this method.\n            this._advanceBy(pattern.length - 1);\n            return true;\n        }\n        return false;\n    }\n    //Token creation\n    _createStartTagToken() {\n        this.currentToken = {\n            type: TokenType.START_TAG,\n            tagName: '',\n            tagID: TAG_ID.UNKNOWN,\n            selfClosing: false,\n            ackSelfClosing: false,\n            attrs: [],\n            location: this.getCurrentLocation(1),\n        };\n    }\n    _createEndTagToken() {\n        this.currentToken = {\n            type: TokenType.END_TAG,\n            tagName: '',\n            tagID: TAG_ID.UNKNOWN,\n            selfClosing: false,\n            ackSelfClosing: false,\n            attrs: [],\n            location: this.getCurrentLocation(2),\n        };\n    }\n    _createCommentToken(offset) {\n        this.currentToken = {\n            type: TokenType.COMMENT,\n            data: '',\n            location: this.getCurrentLocation(offset),\n        };\n    }\n    _createDoctypeToken(initialName) {\n        this.currentToken = {\n            type: TokenType.DOCTYPE,\n            name: initialName,\n            forceQuirks: false,\n            publicId: null,\n            systemId: null,\n            location: this.currentLocation,\n        };\n    }\n    _createCharacterToken(type, chars) {\n        this.currentCharacterToken = {\n            type,\n            chars,\n            location: this.currentLocation,\n        };\n    }\n    //Tag attributes\n    _createAttr(attrNameFirstCh) {\n        this.currentAttr = {\n            name: attrNameFirstCh,\n            value: '',\n        };\n        this.currentLocation = this.getCurrentLocation(0);\n    }\n    _leaveAttrName() {\n        var _a;\n        var _b;\n        const token = this.currentToken;\n        if (getTokenAttr(token, this.currentAttr.name) === null) {\n            token.attrs.push(this.currentAttr);\n            if (token.location && this.currentLocation) {\n                const attrLocations = ((_a = (_b = token.location).attrs) !== null && _a !== void 0 ? _a : (_b.attrs = Object.create(null)));\n                attrLocations[this.currentAttr.name] = this.currentLocation;\n                // Set end location\n                this._leaveAttrValue();\n            }\n        }\n        else {\n            this._err(ERR.duplicateAttribute);\n        }\n    }\n    _leaveAttrValue() {\n        if (this.currentLocation) {\n            this.currentLocation.endLine = this.preprocessor.line;\n            this.currentLocation.endCol = this.preprocessor.col;\n            this.currentLocation.endOffset = this.preprocessor.offset;\n        }\n    }\n    //Token emission\n    prepareToken(ct) {\n        this._emitCurrentCharacterToken(ct.location);\n        this.currentToken = null;\n        if (ct.location) {\n            ct.location.endLine = this.preprocessor.line;\n            ct.location.endCol = this.preprocessor.col + 1;\n            ct.location.endOffset = this.preprocessor.offset + 1;\n        }\n        this.currentLocation = this.getCurrentLocation(-1);\n    }\n    emitCurrentTagToken() {\n        const ct = this.currentToken;\n        this.prepareToken(ct);\n        ct.tagID = getTagID(ct.tagName);\n        if (ct.type === TokenType.START_TAG) {\n            this.lastStartTagName = ct.tagName;\n            this.handler.onStartTag(ct);\n        }\n        else {\n            if (ct.attrs.length > 0) {\n                this._err(ERR.endTagWithAttributes);\n            }\n            if (ct.selfClosing) {\n                this._err(ERR.endTagWithTrailingSolidus);\n            }\n            this.handler.onEndTag(ct);\n        }\n        this.preprocessor.dropParsedChunk();\n    }\n    emitCurrentComment(ct) {\n        this.prepareToken(ct);\n        this.handler.onComment(ct);\n        this.preprocessor.dropParsedChunk();\n    }\n    emitCurrentDoctype(ct) {\n        this.prepareToken(ct);\n        this.handler.onDoctype(ct);\n        this.preprocessor.dropParsedChunk();\n    }\n    _emitCurrentCharacterToken(nextLocation) {\n        if (this.currentCharacterToken) {\n            //NOTE: if we have a pending character token, make it's end location equal to the\n            //current token's start location.\n            if (nextLocation && this.currentCharacterToken.location) {\n                this.currentCharacterToken.location.endLine = nextLocation.startLine;\n                this.currentCharacterToken.location.endCol = nextLocation.startCol;\n                this.currentCharacterToken.location.endOffset = nextLocation.startOffset;\n            }\n            switch (this.currentCharacterToken.type) {\n                case TokenType.CHARACTER: {\n                    this.handler.onCharacter(this.currentCharacterToken);\n                    break;\n                }\n                case TokenType.NULL_CHARACTER: {\n                    this.handler.onNullCharacter(this.currentCharacterToken);\n                    break;\n                }\n                case TokenType.WHITESPACE_CHARACTER: {\n                    this.handler.onWhitespaceCharacter(this.currentCharacterToken);\n                    break;\n                }\n            }\n            this.currentCharacterToken = null;\n        }\n    }\n    _emitEOFToken() {\n        const location = this.getCurrentLocation(0);\n        if (location) {\n            location.endLine = location.startLine;\n            location.endCol = location.startCol;\n            location.endOffset = location.startOffset;\n        }\n        this._emitCurrentCharacterToken(location);\n        this.handler.onEof({ type: TokenType.EOF, location });\n        this.active = false;\n    }\n    //Characters emission\n    //OPTIMIZATION: The specification uses only one type of character token (one token per character).\n    //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.\n    //If we have a sequence of characters that belong to the same group, the parser can process it\n    //as a single solid character token.\n    //So, there are 3 types of character tokens in parse5:\n    //1)TokenType.NULL_CHARACTER - \\u0000-character sequences (e.g. '\\u0000\\u0000\\u0000')\n    //2)TokenType.WHITESPACE_CHARACTER - any whitespace/new-line character sequences (e.g. '\\n  \\r\\t   \\f')\n    //3)TokenType.CHARACTER - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')\n    _appendCharToCurrentCharacterToken(type, ch) {\n        if (this.currentCharacterToken) {\n            if (this.currentCharacterToken.type === type) {\n                this.currentCharacterToken.chars += ch;\n                return;\n            }\n            else {\n                this.currentLocation = this.getCurrentLocation(0);\n                this._emitCurrentCharacterToken(this.currentLocation);\n                this.preprocessor.dropParsedChunk();\n            }\n        }\n        this._createCharacterToken(type, ch);\n    }\n    _emitCodePoint(cp) {\n        const type = isWhitespace(cp)\n            ? TokenType.WHITESPACE_CHARACTER\n            : cp === $.NULL\n                ? TokenType.NULL_CHARACTER\n                : TokenType.CHARACTER;\n        this._appendCharToCurrentCharacterToken(type, String.fromCodePoint(cp));\n    }\n    //NOTE: used when we emit characters explicitly.\n    //This is always for non-whitespace and non-null characters, which allows us to avoid additional checks.\n    _emitChars(ch) {\n        this._appendCharToCurrentCharacterToken(TokenType.CHARACTER, ch);\n    }\n    // Character reference helpers\n    _startCharacterReference() {\n        this.returnState = this.state;\n        this.state = State.CHARACTER_REFERENCE;\n        this.entityStartPos = this.preprocessor.pos;\n        this.entityDecoder.startEntity(this._isCharacterReferenceInAttribute() ? DecodingMode.Attribute : DecodingMode.Legacy);\n    }\n    _isCharacterReferenceInAttribute() {\n        return (this.returnState === State.ATTRIBUTE_VALUE_DOUBLE_QUOTED ||\n            this.returnState === State.ATTRIBUTE_VALUE_SINGLE_QUOTED ||\n            this.returnState === State.ATTRIBUTE_VALUE_UNQUOTED);\n    }\n    _flushCodePointConsumedAsCharacterReference(cp) {\n        if (this._isCharacterReferenceInAttribute()) {\n            this.currentAttr.value += String.fromCodePoint(cp);\n        }\n        else {\n            this._emitCodePoint(cp);\n        }\n    }\n    // Calling states this way turns out to be much faster than any other approach.\n    _callState(cp) {\n        switch (this.state) {\n            case State.DATA: {\n                this._stateData(cp);\n                break;\n            }\n            case State.RCDATA: {\n                this._stateRcdata(cp);\n                break;\n            }\n            case State.RAWTEXT: {\n                this._stateRawtext(cp);\n                break;\n            }\n            case State.SCRIPT_DATA: {\n                this._stateScriptData(cp);\n                break;\n            }\n            case State.PLAINTEXT: {\n                this._statePlaintext(cp);\n                break;\n            }\n            case State.TAG_OPEN: {\n                this._stateTagOpen(cp);\n                break;\n            }\n            case State.END_TAG_OPEN: {\n                this._stateEndTagOpen(cp);\n                break;\n            }\n            case State.TAG_NAME: {\n                this._stateTagName(cp);\n                break;\n            }\n            case State.RCDATA_LESS_THAN_SIGN: {\n                this._stateRcdataLessThanSign(cp);\n                break;\n            }\n            case State.RCDATA_END_TAG_OPEN: {\n                this._stateRcdataEndTagOpen(cp);\n                break;\n            }\n            case State.RCDATA_END_TAG_NAME: {\n                this._stateRcdataEndTagName(cp);\n                break;\n            }\n            case State.RAWTEXT_LESS_THAN_SIGN: {\n                this._stateRawtextLessThanSign(cp);\n                break;\n            }\n            case State.RAWTEXT_END_TAG_OPEN: {\n                this._stateRawtextEndTagOpen(cp);\n                break;\n            }\n            case State.RAWTEXT_END_TAG_NAME: {\n                this._stateRawtextEndTagName(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_LESS_THAN_SIGN: {\n                this._stateScriptDataLessThanSign(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_END_TAG_OPEN: {\n                this._stateScriptDataEndTagOpen(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_END_TAG_NAME: {\n                this._stateScriptDataEndTagName(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPE_START: {\n                this._stateScriptDataEscapeStart(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPE_START_DASH: {\n                this._stateScriptDataEscapeStartDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED: {\n                this._stateScriptDataEscaped(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_DASH: {\n                this._stateScriptDataEscapedDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_DASH_DASH: {\n                this._stateScriptDataEscapedDashDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN: {\n                this._stateScriptDataEscapedLessThanSign(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN: {\n                this._stateScriptDataEscapedEndTagOpen(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_END_TAG_NAME: {\n                this._stateScriptDataEscapedEndTagName(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPE_START: {\n                this._stateScriptDataDoubleEscapeStart(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED: {\n                this._stateScriptDataDoubleEscaped(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH: {\n                this._stateScriptDataDoubleEscapedDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH: {\n                this._stateScriptDataDoubleEscapedDashDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN: {\n                this._stateScriptDataDoubleEscapedLessThanSign(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPE_END: {\n                this._stateScriptDataDoubleEscapeEnd(cp);\n                break;\n            }\n            case State.BEFORE_ATTRIBUTE_NAME: {\n                this._stateBeforeAttributeName(cp);\n                break;\n            }\n            case State.ATTRIBUTE_NAME: {\n                this._stateAttributeName(cp);\n                break;\n            }\n            case State.AFTER_ATTRIBUTE_NAME: {\n                this._stateAfterAttributeName(cp);\n                break;\n            }\n            case State.BEFORE_ATTRIBUTE_VALUE: {\n                this._stateBeforeAttributeValue(cp);\n                break;\n            }\n            case State.ATTRIBUTE_VALUE_DOUBLE_QUOTED: {\n                this._stateAttributeValueDoubleQuoted(cp);\n                break;\n            }\n            case State.ATTRIBUTE_VALUE_SINGLE_QUOTED: {\n                this._stateAttributeValueSingleQuoted(cp);\n                break;\n            }\n            case State.ATTRIBUTE_VALUE_UNQUOTED: {\n                this._stateAttributeValueUnquoted(cp);\n                break;\n            }\n            case State.AFTER_ATTRIBUTE_VALUE_QUOTED: {\n                this._stateAfterAttributeValueQuoted(cp);\n                break;\n            }\n            case State.SELF_CLOSING_START_TAG: {\n                this._stateSelfClosingStartTag(cp);\n                break;\n            }\n            case State.BOGUS_COMMENT: {\n                this._stateBogusComment(cp);\n                break;\n            }\n            case State.MARKUP_DECLARATION_OPEN: {\n                this._stateMarkupDeclarationOpen(cp);\n                break;\n            }\n            case State.COMMENT_START: {\n                this._stateCommentStart(cp);\n                break;\n            }\n            case State.COMMENT_START_DASH: {\n                this._stateCommentStartDash(cp);\n                break;\n            }\n            case State.COMMENT: {\n                this._stateComment(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN: {\n                this._stateCommentLessThanSign(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN_BANG: {\n                this._stateCommentLessThanSignBang(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN_BANG_DASH: {\n                this._stateCommentLessThanSignBangDash(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH: {\n                this._stateCommentLessThanSignBangDashDash(cp);\n                break;\n            }\n            case State.COMMENT_END_DASH: {\n                this._stateCommentEndDash(cp);\n                break;\n            }\n            case State.COMMENT_END: {\n                this._stateCommentEnd(cp);\n                break;\n            }\n            case State.COMMENT_END_BANG: {\n                this._stateCommentEndBang(cp);\n                break;\n            }\n            case State.DOCTYPE: {\n                this._stateDoctype(cp);\n                break;\n            }\n            case State.BEFORE_DOCTYPE_NAME: {\n                this._stateBeforeDoctypeName(cp);\n                break;\n            }\n            case State.DOCTYPE_NAME: {\n                this._stateDoctypeName(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_NAME: {\n                this._stateAfterDoctypeName(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_PUBLIC_KEYWORD: {\n                this._stateAfterDoctypePublicKeyword(cp);\n                break;\n            }\n            case State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER: {\n                this._stateBeforeDoctypePublicIdentifier(cp);\n                break;\n            }\n            case State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED: {\n                this._stateDoctypePublicIdentifierDoubleQuoted(cp);\n                break;\n            }\n            case State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED: {\n                this._stateDoctypePublicIdentifierSingleQuoted(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER: {\n                this._stateAfterDoctypePublicIdentifier(cp);\n                break;\n            }\n            case State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS: {\n                this._stateBetweenDoctypePublicAndSystemIdentifiers(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_SYSTEM_KEYWORD: {\n                this._stateAfterDoctypeSystemKeyword(cp);\n                break;\n            }\n            case State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER: {\n                this._stateBeforeDoctypeSystemIdentifier(cp);\n                break;\n            }\n            case State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED: {\n                this._stateDoctypeSystemIdentifierDoubleQuoted(cp);\n                break;\n            }\n            case State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED: {\n                this._stateDoctypeSystemIdentifierSingleQuoted(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER: {\n                this._stateAfterDoctypeSystemIdentifier(cp);\n                break;\n            }\n            case State.BOGUS_DOCTYPE: {\n                this._stateBogusDoctype(cp);\n                break;\n            }\n            case State.CDATA_SECTION: {\n                this._stateCdataSection(cp);\n                break;\n            }\n            case State.CDATA_SECTION_BRACKET: {\n                this._stateCdataSectionBracket(cp);\n                break;\n            }\n            case State.CDATA_SECTION_END: {\n                this._stateCdataSectionEnd(cp);\n                break;\n            }\n            case State.CHARACTER_REFERENCE: {\n                this._stateCharacterReference();\n                break;\n            }\n            case State.AMBIGUOUS_AMPERSAND: {\n                this._stateAmbiguousAmpersand(cp);\n                break;\n            }\n            default: {\n                throw new Error('Unknown state');\n            }\n        }\n    }\n    // State machine\n    // Data state\n    //------------------------------------------------------------------\n    _stateData(cp) {\n        switch (cp) {\n            case $.LESS_THAN_SIGN: {\n                this.state = State.TAG_OPEN;\n                break;\n            }\n            case $.AMPERSAND: {\n                this._startCharacterReference();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitCodePoint(cp);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    //  RCDATA state\n    //------------------------------------------------------------------\n    _stateRcdata(cp) {\n        switch (cp) {\n            case $.AMPERSAND: {\n                this._startCharacterReference();\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.RCDATA_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // RAWTEXT state\n    //------------------------------------------------------------------\n    _stateRawtext(cp) {\n        switch (cp) {\n            case $.LESS_THAN_SIGN: {\n                this.state = State.RAWTEXT_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data state\n    //------------------------------------------------------------------\n    _stateScriptData(cp) {\n        switch (cp) {\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // PLAINTEXT state\n    //------------------------------------------------------------------\n    _statePlaintext(cp) {\n        switch (cp) {\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Tag open state\n    //------------------------------------------------------------------\n    _stateTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this._createStartTagToken();\n            this.state = State.TAG_NAME;\n            this._stateTagName(cp);\n        }\n        else\n            switch (cp) {\n                case $.EXCLAMATION_MARK: {\n                    this.state = State.MARKUP_DECLARATION_OPEN;\n                    break;\n                }\n                case $.SOLIDUS: {\n                    this.state = State.END_TAG_OPEN;\n                    break;\n                }\n                case $.QUESTION_MARK: {\n                    this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);\n                    this._createCommentToken(1);\n                    this.state = State.BOGUS_COMMENT;\n                    this._stateBogusComment(cp);\n                    break;\n                }\n                case $.EOF: {\n                    this._err(ERR.eofBeforeTagName);\n                    this._emitChars('<');\n                    this._emitEOFToken();\n                    break;\n                }\n                default: {\n                    this._err(ERR.invalidFirstCharacterOfTagName);\n                    this._emitChars('<');\n                    this.state = State.DATA;\n                    this._stateData(cp);\n                }\n            }\n    }\n    // End tag open state\n    //------------------------------------------------------------------\n    _stateEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this.state = State.TAG_NAME;\n            this._stateTagName(cp);\n        }\n        else\n            switch (cp) {\n                case $.GREATER_THAN_SIGN: {\n                    this._err(ERR.missingEndTagName);\n                    this.state = State.DATA;\n                    break;\n                }\n                case $.EOF: {\n                    this._err(ERR.eofBeforeTagName);\n                    this._emitChars('</');\n                    this._emitEOFToken();\n                    break;\n                }\n                default: {\n                    this._err(ERR.invalidFirstCharacterOfTagName);\n                    this._createCommentToken(2);\n                    this.state = State.BOGUS_COMMENT;\n                    this._stateBogusComment(cp);\n                }\n            }\n    }\n    // Tag name state\n    //------------------------------------------------------------------\n    _stateTagName(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                break;\n            }\n            case $.SOLIDUS: {\n                this.state = State.SELF_CLOSING_START_TAG;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.tagName += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.tagName += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n            }\n        }\n    }\n    // RCDATA less-than sign state\n    //------------------------------------------------------------------\n    _stateRcdataLessThanSign(cp) {\n        if (cp === $.SOLIDUS) {\n            this.state = State.RCDATA_END_TAG_OPEN;\n        }\n        else {\n            this._emitChars('<');\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    // RCDATA end tag open state\n    //------------------------------------------------------------------\n    _stateRcdataEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.RCDATA_END_TAG_NAME;\n            this._stateRcdataEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    handleSpecialEndTag(_cp) {\n        if (!this.preprocessor.startsWith(this.lastStartTagName, false)) {\n            return !this._ensureHibernation();\n        }\n        this._createEndTagToken();\n        const token = this.currentToken;\n        token.tagName = this.lastStartTagName;\n        const cp = this.preprocessor.peek(this.lastStartTagName.length);\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this._advanceBy(this.lastStartTagName.length);\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                return false;\n            }\n            case $.SOLIDUS: {\n                this._advanceBy(this.lastStartTagName.length);\n                this.state = State.SELF_CLOSING_START_TAG;\n                return false;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._advanceBy(this.lastStartTagName.length);\n                this.emitCurrentTagToken();\n                this.state = State.DATA;\n                return false;\n            }\n            default: {\n                return !this._ensureHibernation();\n            }\n        }\n    }\n    // RCDATA end tag name state\n    //------------------------------------------------------------------\n    _stateRcdataEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    // RAWTEXT less-than sign state\n    //------------------------------------------------------------------\n    _stateRawtextLessThanSign(cp) {\n        if (cp === $.SOLIDUS) {\n            this.state = State.RAWTEXT_END_TAG_OPEN;\n        }\n        else {\n            this._emitChars('<');\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // RAWTEXT end tag open state\n    //------------------------------------------------------------------\n    _stateRawtextEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.RAWTEXT_END_TAG_NAME;\n            this._stateRawtextEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // RAWTEXT end tag name state\n    //------------------------------------------------------------------\n    _stateRawtextEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // Script data less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataLessThanSign(cp) {\n        switch (cp) {\n            case $.SOLIDUS: {\n                this.state = State.SCRIPT_DATA_END_TAG_OPEN;\n                break;\n            }\n            case $.EXCLAMATION_MARK: {\n                this.state = State.SCRIPT_DATA_ESCAPE_START;\n                this._emitChars('<!');\n                break;\n            }\n            default: {\n                this._emitChars('<');\n                this.state = State.SCRIPT_DATA;\n                this._stateScriptData(cp);\n            }\n        }\n    }\n    // Script data end tag open state\n    //------------------------------------------------------------------\n    _stateScriptDataEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.SCRIPT_DATA_END_TAG_NAME;\n            this._stateScriptDataEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data end tag name state\n    //------------------------------------------------------------------\n    _stateScriptDataEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escape start state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapeStart(cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = State.SCRIPT_DATA_ESCAPE_START_DASH;\n            this._emitChars('-');\n        }\n        else {\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escape start dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapeStartDash(cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n            this._emitChars('-');\n        }\n        else {\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escaped state\n    //------------------------------------------------------------------\n    _stateScriptDataEscaped(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_ESCAPED_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data escaped dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedDash(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data escaped dash dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedDashDash(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA;\n                this._emitChars('>');\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data escaped less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedLessThanSign(cp) {\n        if (cp === $.SOLIDUS) {\n            this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN;\n        }\n        else if (isAsciiLetter(cp)) {\n            this._emitChars('<');\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_START;\n            this._stateScriptDataDoubleEscapeStart(cp);\n        }\n        else {\n            this._emitChars('<');\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data escaped end tag open state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_NAME;\n            this._stateScriptDataEscapedEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data escaped end tag name state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data double escape start state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapeStart(cp) {\n        if (this.preprocessor.startsWith($$.SCRIPT, false) &&\n            isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek($$.SCRIPT.length))) {\n            this._emitCodePoint(cp);\n            for (let i = 0; i < $$.SCRIPT.length; i++) {\n                this._emitCodePoint(this._consume());\n            }\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n        }\n        else if (!this._ensureHibernation()) {\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data double escaped state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscaped(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                this._emitChars('<');\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data double escaped dash state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedDash(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                this._emitChars('<');\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data double escaped dash dash state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedDashDash(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                this._emitChars('<');\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA;\n                this._emitChars('>');\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data double escaped less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedLessThanSign(cp) {\n        if (cp === $.SOLIDUS) {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_END;\n            this._emitChars('/');\n        }\n        else {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n            this._stateScriptDataDoubleEscaped(cp);\n        }\n    }\n    // Script data double escape end state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapeEnd(cp) {\n        if (this.preprocessor.startsWith($$.SCRIPT, false) &&\n            isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek($$.SCRIPT.length))) {\n            this._emitCodePoint(cp);\n            for (let i = 0; i < $$.SCRIPT.length; i++) {\n                this._emitCodePoint(this._consume());\n            }\n            this.state = State.SCRIPT_DATA_ESCAPED;\n        }\n        else if (!this._ensureHibernation()) {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n            this._stateScriptDataDoubleEscaped(cp);\n        }\n    }\n    // Before attribute name state\n    //------------------------------------------------------------------\n    _stateBeforeAttributeName(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.SOLIDUS:\n            case $.GREATER_THAN_SIGN:\n            case $.EOF: {\n                this.state = State.AFTER_ATTRIBUTE_NAME;\n                this._stateAfterAttributeName(cp);\n                break;\n            }\n            case $.EQUALS_SIGN: {\n                this._err(ERR.unexpectedEqualsSignBeforeAttributeName);\n                this._createAttr('=');\n                this.state = State.ATTRIBUTE_NAME;\n                break;\n            }\n            default: {\n                this._createAttr('');\n                this.state = State.ATTRIBUTE_NAME;\n                this._stateAttributeName(cp);\n            }\n        }\n    }\n    // Attribute name state\n    //------------------------------------------------------------------\n    _stateAttributeName(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED:\n            case $.SOLIDUS:\n            case $.GREATER_THAN_SIGN:\n            case $.EOF: {\n                this._leaveAttrName();\n                this.state = State.AFTER_ATTRIBUTE_NAME;\n                this._stateAfterAttributeName(cp);\n                break;\n            }\n            case $.EQUALS_SIGN: {\n                this._leaveAttrName();\n                this.state = State.BEFORE_ATTRIBUTE_VALUE;\n                break;\n            }\n            case $.QUOTATION_MARK:\n            case $.APOSTROPHE:\n            case $.LESS_THAN_SIGN: {\n                this._err(ERR.unexpectedCharacterInAttributeName);\n                this.currentAttr.name += String.fromCodePoint(cp);\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.currentAttr.name += REPLACEMENT_CHARACTER;\n                break;\n            }\n            default: {\n                this.currentAttr.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n            }\n        }\n    }\n    // After attribute name state\n    //------------------------------------------------------------------\n    _stateAfterAttributeName(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.SOLIDUS: {\n                this.state = State.SELF_CLOSING_START_TAG;\n                break;\n            }\n            case $.EQUALS_SIGN: {\n                this.state = State.BEFORE_ATTRIBUTE_VALUE;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._createAttr('');\n                this.state = State.ATTRIBUTE_NAME;\n                this._stateAttributeName(cp);\n            }\n        }\n    }\n    // Before attribute value state\n    //------------------------------------------------------------------\n    _stateBeforeAttributeValue(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                this.state = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                this.state = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingAttributeValue);\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            default: {\n                this.state = State.ATTRIBUTE_VALUE_UNQUOTED;\n                this._stateAttributeValueUnquoted(cp);\n            }\n        }\n    }\n    // Attribute value (double-quoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueDoubleQuoted(cp) {\n        switch (cp) {\n            case $.QUOTATION_MARK: {\n                this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n                break;\n            }\n            case $.AMPERSAND: {\n                this._startCharacterReference();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.currentAttr.value += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.currentAttr.value += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Attribute value (single-quoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueSingleQuoted(cp) {\n        switch (cp) {\n            case $.APOSTROPHE: {\n                this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n                break;\n            }\n            case $.AMPERSAND: {\n                this._startCharacterReference();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.currentAttr.value += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.currentAttr.value += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Attribute value (unquoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueUnquoted(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this._leaveAttrValue();\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                break;\n            }\n            case $.AMPERSAND: {\n                this._startCharacterReference();\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._leaveAttrValue();\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.currentAttr.value += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.QUOTATION_MARK:\n            case $.APOSTROPHE:\n            case $.LESS_THAN_SIGN:\n            case $.EQUALS_SIGN:\n            case $.GRAVE_ACCENT: {\n                this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);\n                this.currentAttr.value += String.fromCodePoint(cp);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.currentAttr.value += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // After attribute value (quoted) state\n    //------------------------------------------------------------------\n    _stateAfterAttributeValueQuoted(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this._leaveAttrValue();\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                break;\n            }\n            case $.SOLIDUS: {\n                this._leaveAttrValue();\n                this.state = State.SELF_CLOSING_START_TAG;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._leaveAttrValue();\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingWhitespaceBetweenAttributes);\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                this._stateBeforeAttributeName(cp);\n            }\n        }\n    }\n    // Self-closing start tag state\n    //------------------------------------------------------------------\n    _stateSelfClosingStartTag(cp) {\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                const token = this.currentToken;\n                token.selfClosing = true;\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.unexpectedSolidusInTag);\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                this._stateBeforeAttributeName(cp);\n            }\n        }\n    }\n    // Bogus comment state\n    //------------------------------------------------------------------\n    _stateBogusComment(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case $.EOF: {\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.data += REPLACEMENT_CHARACTER;\n                break;\n            }\n            default: {\n                token.data += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Markup declaration open state\n    //------------------------------------------------------------------\n    _stateMarkupDeclarationOpen(cp) {\n        if (this._consumeSequenceIfMatch($$.DASH_DASH, true)) {\n            this._createCommentToken($$.DASH_DASH.length + 1);\n            this.state = State.COMMENT_START;\n        }\n        else if (this._consumeSequenceIfMatch($$.DOCTYPE, false)) {\n            // NOTE: Doctypes tokens are created without fixed offsets. We keep track of the moment a doctype *might* start here.\n            this.currentLocation = this.getCurrentLocation($$.DOCTYPE.length + 1);\n            this.state = State.DOCTYPE;\n        }\n        else if (this._consumeSequenceIfMatch($$.CDATA_START, true)) {\n            if (this.inForeignNode) {\n                this.state = State.CDATA_SECTION;\n            }\n            else {\n                this._err(ERR.cdataInHtmlContent);\n                this._createCommentToken($$.CDATA_START.length + 1);\n                this.currentToken.data = '[CDATA[';\n                this.state = State.BOGUS_COMMENT;\n            }\n        }\n        //NOTE: Sequence lookups can be abrupted by hibernation. In that case, lookup\n        //results are no longer valid and we will need to start over.\n        else if (!this._ensureHibernation()) {\n            this._err(ERR.incorrectlyOpenedComment);\n            this._createCommentToken(2);\n            this.state = State.BOGUS_COMMENT;\n            this._stateBogusComment(cp);\n        }\n    }\n    // Comment start state\n    //------------------------------------------------------------------\n    _stateCommentStart(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.COMMENT_START_DASH;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptClosingOfEmptyComment);\n                this.state = State.DATA;\n                const token = this.currentToken;\n                this.emitCurrentComment(token);\n                break;\n            }\n            default: {\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment start dash state\n    //------------------------------------------------------------------\n    _stateCommentStartDash(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.COMMENT_END;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptClosingOfEmptyComment);\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '-';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment state\n    //------------------------------------------------------------------\n    _stateComment(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.COMMENT_END_DASH;\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                token.data += '<';\n                this.state = State.COMMENT_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.data += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Comment less-than sign state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSign(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.EXCLAMATION_MARK: {\n                token.data += '!';\n                this.state = State.COMMENT_LESS_THAN_SIGN_BANG;\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                token.data += '<';\n                break;\n            }\n            default: {\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment less-than sign bang state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBang(cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH;\n        }\n        else {\n            this.state = State.COMMENT;\n            this._stateComment(cp);\n        }\n    }\n    // Comment less-than sign bang dash state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBangDash(cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH;\n        }\n        else {\n            this.state = State.COMMENT_END_DASH;\n            this._stateCommentEndDash(cp);\n        }\n    }\n    // Comment less-than sign bang dash dash state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBangDashDash(cp) {\n        if (cp !== $.GREATER_THAN_SIGN && cp !== $.EOF) {\n            this._err(ERR.nestedComment);\n        }\n        this.state = State.COMMENT_END;\n        this._stateCommentEnd(cp);\n    }\n    // Comment end dash state\n    //------------------------------------------------------------------\n    _stateCommentEndDash(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.COMMENT_END;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '-';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment end state\n    //------------------------------------------------------------------\n    _stateCommentEnd(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case $.EXCLAMATION_MARK: {\n                this.state = State.COMMENT_END_BANG;\n                break;\n            }\n            case $.HYPHEN_MINUS: {\n                token.data += '-';\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '--';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment end bang state\n    //------------------------------------------------------------------\n    _stateCommentEndBang(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                token.data += '--!';\n                this.state = State.COMMENT_END_DASH;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.incorrectlyClosedComment);\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '--!';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // DOCTYPE state\n    //------------------------------------------------------------------\n    _stateDoctype(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BEFORE_DOCTYPE_NAME;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.BEFORE_DOCTYPE_NAME;\n                this._stateBeforeDoctypeName(cp);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                this._createDoctypeToken(null);\n                const token = this.currentToken;\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingWhitespaceBeforeDoctypeName);\n                this.state = State.BEFORE_DOCTYPE_NAME;\n                this._stateBeforeDoctypeName(cp);\n            }\n        }\n    }\n    // Before DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypeName(cp) {\n        if (isAsciiUpper(cp)) {\n            this._createDoctypeToken(String.fromCharCode(toAsciiLower(cp)));\n            this.state = State.DOCTYPE_NAME;\n        }\n        else\n            switch (cp) {\n                case $.SPACE:\n                case $.LINE_FEED:\n                case $.TABULATION:\n                case $.FORM_FEED: {\n                    // Ignore whitespace\n                    break;\n                }\n                case $.NULL: {\n                    this._err(ERR.unexpectedNullCharacter);\n                    this._createDoctypeToken(REPLACEMENT_CHARACTER);\n                    this.state = State.DOCTYPE_NAME;\n                    break;\n                }\n                case $.GREATER_THAN_SIGN: {\n                    this._err(ERR.missingDoctypeName);\n                    this._createDoctypeToken(null);\n                    const token = this.currentToken;\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this.state = State.DATA;\n                    break;\n                }\n                case $.EOF: {\n                    this._err(ERR.eofInDoctype);\n                    this._createDoctypeToken(null);\n                    const token = this.currentToken;\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n                default: {\n                    this._createDoctypeToken(String.fromCodePoint(cp));\n                    this.state = State.DOCTYPE_NAME;\n                }\n            }\n    }\n    // DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateDoctypeName(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.AFTER_DOCTYPE_NAME;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.name += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n            }\n        }\n    }\n    // After DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeName(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                if (this._consumeSequenceIfMatch($$.PUBLIC, false)) {\n                    this.state = State.AFTER_DOCTYPE_PUBLIC_KEYWORD;\n                }\n                else if (this._consumeSequenceIfMatch($$.SYSTEM, false)) {\n                    this.state = State.AFTER_DOCTYPE_SYSTEM_KEYWORD;\n                }\n                //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n                //results are no longer valid and we will need to start over.\n                else if (!this._ensureHibernation()) {\n                    this._err(ERR.invalidCharacterSequenceAfterDoctypeName);\n                    token.forceQuirks = true;\n                    this.state = State.BOGUS_DOCTYPE;\n                    this._stateBogusDoctype(cp);\n                }\n            }\n        }\n    }\n    // After DOCTYPE public keyword state\n    //------------------------------------------------------------------\n    _stateAfterDoctypePublicKeyword(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER;\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Before DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypePublicIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // DOCTYPE public identifier (double-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypePublicIdentifierDoubleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.QUOTATION_MARK: {\n                this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.publicId += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.publicId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // DOCTYPE public identifier (single-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypePublicIdentifierSingleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.APOSTROPHE: {\n                this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.publicId += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.publicId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // After DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    _stateAfterDoctypePublicIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Between DOCTYPE public and system identifiers state\n    //------------------------------------------------------------------\n    _stateBetweenDoctypePublicAndSystemIdentifiers(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // After DOCTYPE system keyword state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeSystemKeyword(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER;\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Before DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypeSystemIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // DOCTYPE system identifier (double-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypeSystemIdentifierDoubleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.QUOTATION_MARK: {\n                this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.systemId += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.systemId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // DOCTYPE system identifier (single-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypeSystemIdentifierSingleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.APOSTROPHE: {\n                this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.systemId += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.systemId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // After DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeSystemIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Bogus DOCTYPE state\n    //------------------------------------------------------------------\n    _stateBogusDoctype(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                break;\n            }\n            case $.EOF: {\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    // CDATA section state\n    //------------------------------------------------------------------\n    _stateCdataSection(cp) {\n        switch (cp) {\n            case $.RIGHT_SQUARE_BRACKET: {\n                this.state = State.CDATA_SECTION_BRACKET;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInCdata);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // CDATA section bracket state\n    //------------------------------------------------------------------\n    _stateCdataSectionBracket(cp) {\n        if (cp === $.RIGHT_SQUARE_BRACKET) {\n            this.state = State.CDATA_SECTION_END;\n        }\n        else {\n            this._emitChars(']');\n            this.state = State.CDATA_SECTION;\n            this._stateCdataSection(cp);\n        }\n    }\n    // CDATA section end state\n    //------------------------------------------------------------------\n    _stateCdataSectionEnd(cp) {\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                break;\n            }\n            case $.RIGHT_SQUARE_BRACKET: {\n                this._emitChars(']');\n                break;\n            }\n            default: {\n                this._emitChars(']]');\n                this.state = State.CDATA_SECTION;\n                this._stateCdataSection(cp);\n            }\n        }\n    }\n    // Character reference state\n    //------------------------------------------------------------------\n    _stateCharacterReference() {\n        let length = this.entityDecoder.write(this.preprocessor.html, this.preprocessor.pos);\n        if (length < 0) {\n            if (this.preprocessor.lastChunkWritten) {\n                length = this.entityDecoder.end();\n            }\n            else {\n                // Wait for the rest of the entity.\n                this.active = false;\n                // Mark the entire buffer as read.\n                this.preprocessor.pos = this.preprocessor.html.length - 1;\n                this.consumedAfterSnapshot = 0;\n                this.preprocessor.endOfChunkHit = true;\n                return;\n            }\n        }\n        if (length === 0) {\n            // This was not a valid entity. Go back to the beginning, and\n            // figure out what to do.\n            this.preprocessor.pos = this.entityStartPos;\n            this._flushCodePointConsumedAsCharacterReference($.AMPERSAND);\n            this.state =\n                !this._isCharacterReferenceInAttribute() && isAsciiAlphaNumeric(this.preprocessor.peek(1))\n                    ? State.AMBIGUOUS_AMPERSAND\n                    : this.returnState;\n        }\n        else {\n            // We successfully parsed an entity. Switch to the return state.\n            this.state = this.returnState;\n        }\n    }\n    // Ambiguos ampersand state\n    //------------------------------------------------------------------\n    _stateAmbiguousAmpersand(cp) {\n        if (isAsciiAlphaNumeric(cp)) {\n            this._flushCodePointConsumedAsCharacterReference(cp);\n        }\n        else {\n            if (cp === $.SEMICOLON) {\n                this._err(ERR.unknownNamedCharacterReference);\n            }\n            this.state = this.returnState;\n            this._callState(cp);\n        }\n    }\n}\n","//Const\nconst NOAH_ARK_CAPACITY = 3;\nexport var EntryType;\n(function (EntryType) {\n    EntryType[EntryType[\"Marker\"] = 0] = \"Marker\";\n    EntryType[EntryType[\"Element\"] = 1] = \"Element\";\n})(EntryType || (EntryType = {}));\nconst MARKER = { type: EntryType.Marker };\n//List of formatting elements\nexport class FormattingElementList {\n    constructor(treeAdapter) {\n        this.treeAdapter = treeAdapter;\n        this.entries = [];\n        this.bookmark = null;\n    }\n    //Noah Ark's condition\n    //OPTIMIZATION: at first we try to find possible candidates for exclusion using\n    //lightweight heuristics without thorough attributes check.\n    _getNoahArkConditionCandidates(newElement, neAttrs) {\n        const candidates = [];\n        const neAttrsLength = neAttrs.length;\n        const neTagName = this.treeAdapter.getTagName(newElement);\n        const neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);\n        for (let i = 0; i < this.entries.length; i++) {\n            const entry = this.entries[i];\n            if (entry.type === EntryType.Marker) {\n                break;\n            }\n            const { element } = entry;\n            if (this.treeAdapter.getTagName(element) === neTagName &&\n                this.treeAdapter.getNamespaceURI(element) === neNamespaceURI) {\n                const elementAttrs = this.treeAdapter.getAttrList(element);\n                if (elementAttrs.length === neAttrsLength) {\n                    candidates.push({ idx: i, attrs: elementAttrs });\n                }\n            }\n        }\n        return candidates;\n    }\n    _ensureNoahArkCondition(newElement) {\n        if (this.entries.length < NOAH_ARK_CAPACITY)\n            return;\n        const neAttrs = this.treeAdapter.getAttrList(newElement);\n        const candidates = this._getNoahArkConditionCandidates(newElement, neAttrs);\n        if (candidates.length < NOAH_ARK_CAPACITY)\n            return;\n        //NOTE: build attrs map for the new element, so we can perform fast lookups\n        const neAttrsMap = new Map(neAttrs.map((neAttr) => [neAttr.name, neAttr.value]));\n        let validCandidates = 0;\n        //NOTE: remove bottommost candidates, until Noah's Ark condition will not be met\n        for (let i = 0; i < candidates.length; i++) {\n            const candidate = candidates[i];\n            // We know that `candidate.attrs.length === neAttrs.length`\n            if (candidate.attrs.every((cAttr) => neAttrsMap.get(cAttr.name) === cAttr.value)) {\n                validCandidates += 1;\n                if (validCandidates >= NOAH_ARK_CAPACITY) {\n                    this.entries.splice(candidate.idx, 1);\n                }\n            }\n        }\n    }\n    //Mutations\n    insertMarker() {\n        this.entries.unshift(MARKER);\n    }\n    pushElement(element, token) {\n        this._ensureNoahArkCondition(element);\n        this.entries.unshift({\n            type: EntryType.Element,\n            element,\n            token,\n        });\n    }\n    insertElementAfterBookmark(element, token) {\n        const bookmarkIdx = this.entries.indexOf(this.bookmark);\n        this.entries.splice(bookmarkIdx, 0, {\n            type: EntryType.Element,\n            element,\n            token,\n        });\n    }\n    removeEntry(entry) {\n        const entryIndex = this.entries.indexOf(entry);\n        if (entryIndex >= 0) {\n            this.entries.splice(entryIndex, 1);\n        }\n    }\n    /**\n     * Clears the list of formatting elements up to the last marker.\n     *\n     * @see https://html.spec.whatwg.org/multipage/parsing.html#clear-the-list-of-active-formatting-elements-up-to-the-last-marker\n     */\n    clearToLastMarker() {\n        const markerIdx = this.entries.indexOf(MARKER);\n        if (markerIdx >= 0) {\n            this.entries.splice(0, markerIdx + 1);\n        }\n        else {\n            this.entries.length = 0;\n        }\n    }\n    //Search\n    getElementEntryInScopeWithTagName(tagName) {\n        const entry = this.entries.find((entry) => entry.type === EntryType.Marker || this.treeAdapter.getTagName(entry.element) === tagName);\n        return entry && entry.type === EntryType.Element ? entry : null;\n    }\n    getElementEntry(element) {\n        return this.entries.find((entry) => entry.type === EntryType.Element && entry.element === element);\n    }\n}\n","import { TAG_ID as $, NS, NUMBERED_HEADERS } from '../common/html.js';\n//Element utils\nconst IMPLICIT_END_TAG_REQUIRED = new Set([$.DD, $.DT, $.LI, $.OPTGROUP, $.OPTION, $.P, $.RB, $.RP, $.RT, $.RTC]);\nconst IMPLICIT_END_TAG_REQUIRED_THOROUGHLY = new Set([\n    ...IMPLICIT_END_TAG_REQUIRED,\n    $.CAPTION,\n    $.COLGROUP,\n    $.TBODY,\n    $.TD,\n    $.TFOOT,\n    $.TH,\n    $.THEAD,\n    $.TR,\n]);\nconst SCOPING_ELEMENTS_HTML = new Set([\n    $.APPLET,\n    $.CAPTION,\n    $.HTML,\n    $.MARQUEE,\n    $.OBJECT,\n    $.TABLE,\n    $.TD,\n    $.TEMPLATE,\n    $.TH,\n]);\nconst SCOPING_ELEMENTS_HTML_LIST = new Set([...SCOPING_ELEMENTS_HTML, $.OL, $.UL]);\nconst SCOPING_ELEMENTS_HTML_BUTTON = new Set([...SCOPING_ELEMENTS_HTML, $.BUTTON]);\nconst SCOPING_ELEMENTS_MATHML = new Set([$.ANNOTATION_XML, $.MI, $.MN, $.MO, $.MS, $.MTEXT]);\nconst SCOPING_ELEMENTS_SVG = new Set([$.DESC, $.FOREIGN_OBJECT, $.TITLE]);\nconst TABLE_ROW_CONTEXT = new Set([$.TR, $.TEMPLATE, $.HTML]);\nconst TABLE_BODY_CONTEXT = new Set([$.TBODY, $.TFOOT, $.THEAD, $.TEMPLATE, $.HTML]);\nconst TABLE_CONTEXT = new Set([$.TABLE, $.TEMPLATE, $.HTML]);\nconst TABLE_CELLS = new Set([$.TD, $.TH]);\n//Stack of open elements\nexport class OpenElementStack {\n    get currentTmplContentOrNode() {\n        return this._isInTemplate() ? this.treeAdapter.getTemplateContent(this.current) : this.current;\n    }\n    constructor(document, treeAdapter, handler) {\n        this.treeAdapter = treeAdapter;\n        this.handler = handler;\n        this.items = [];\n        this.tagIDs = [];\n        this.stackTop = -1;\n        this.tmplCount = 0;\n        this.currentTagId = $.UNKNOWN;\n        this.current = document;\n    }\n    //Index of element\n    _indexOf(element) {\n        return this.items.lastIndexOf(element, this.stackTop);\n    }\n    //Update current element\n    _isInTemplate() {\n        return this.currentTagId === $.TEMPLATE && this.treeAdapter.getNamespaceURI(this.current) === NS.HTML;\n    }\n    _updateCurrentElement() {\n        this.current = this.items[this.stackTop];\n        this.currentTagId = this.tagIDs[this.stackTop];\n    }\n    //Mutations\n    push(element, tagID) {\n        this.stackTop++;\n        this.items[this.stackTop] = element;\n        this.current = element;\n        this.tagIDs[this.stackTop] = tagID;\n        this.currentTagId = tagID;\n        if (this._isInTemplate()) {\n            this.tmplCount++;\n        }\n        this.handler.onItemPush(element, tagID, true);\n    }\n    pop() {\n        const popped = this.current;\n        if (this.tmplCount > 0 && this._isInTemplate()) {\n            this.tmplCount--;\n        }\n        this.stackTop--;\n        this._updateCurrentElement();\n        this.handler.onItemPop(popped, true);\n    }\n    replace(oldElement, newElement) {\n        const idx = this._indexOf(oldElement);\n        this.items[idx] = newElement;\n        if (idx === this.stackTop) {\n            this.current = newElement;\n        }\n    }\n    insertAfter(referenceElement, newElement, newElementID) {\n        const insertionIdx = this._indexOf(referenceElement) + 1;\n        this.items.splice(insertionIdx, 0, newElement);\n        this.tagIDs.splice(insertionIdx, 0, newElementID);\n        this.stackTop++;\n        if (insertionIdx === this.stackTop) {\n            this._updateCurrentElement();\n        }\n        this.handler.onItemPush(this.current, this.currentTagId, insertionIdx === this.stackTop);\n    }\n    popUntilTagNamePopped(tagName) {\n        let targetIdx = this.stackTop + 1;\n        do {\n            targetIdx = this.tagIDs.lastIndexOf(tagName, targetIdx - 1);\n        } while (targetIdx > 0 && this.treeAdapter.getNamespaceURI(this.items[targetIdx]) !== NS.HTML);\n        this.shortenToLength(targetIdx < 0 ? 0 : targetIdx);\n    }\n    shortenToLength(idx) {\n        while (this.stackTop >= idx) {\n            const popped = this.current;\n            if (this.tmplCount > 0 && this._isInTemplate()) {\n                this.tmplCount -= 1;\n            }\n            this.stackTop--;\n            this._updateCurrentElement();\n            this.handler.onItemPop(popped, this.stackTop < idx);\n        }\n    }\n    popUntilElementPopped(element) {\n        const idx = this._indexOf(element);\n        this.shortenToLength(idx < 0 ? 0 : idx);\n    }\n    popUntilPopped(tagNames, targetNS) {\n        const idx = this._indexOfTagNames(tagNames, targetNS);\n        this.shortenToLength(idx < 0 ? 0 : idx);\n    }\n    popUntilNumberedHeaderPopped() {\n        this.popUntilPopped(NUMBERED_HEADERS, NS.HTML);\n    }\n    popUntilTableCellPopped() {\n        this.popUntilPopped(TABLE_CELLS, NS.HTML);\n    }\n    popAllUpToHtmlElement() {\n        //NOTE: here we assume that the root <html> element is always first in the open element stack, so\n        //we perform this fast stack clean up.\n        this.tmplCount = 0;\n        this.shortenToLength(1);\n    }\n    _indexOfTagNames(tagNames, namespace) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            if (tagNames.has(this.tagIDs[i]) && this.treeAdapter.getNamespaceURI(this.items[i]) === namespace) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    clearBackTo(tagNames, targetNS) {\n        const idx = this._indexOfTagNames(tagNames, targetNS);\n        this.shortenToLength(idx + 1);\n    }\n    clearBackToTableContext() {\n        this.clearBackTo(TABLE_CONTEXT, NS.HTML);\n    }\n    clearBackToTableBodyContext() {\n        this.clearBackTo(TABLE_BODY_CONTEXT, NS.HTML);\n    }\n    clearBackToTableRowContext() {\n        this.clearBackTo(TABLE_ROW_CONTEXT, NS.HTML);\n    }\n    remove(element) {\n        const idx = this._indexOf(element);\n        if (idx >= 0) {\n            if (idx === this.stackTop) {\n                this.pop();\n            }\n            else {\n                this.items.splice(idx, 1);\n                this.tagIDs.splice(idx, 1);\n                this.stackTop--;\n                this._updateCurrentElement();\n                this.handler.onItemPop(element, false);\n            }\n        }\n    }\n    //Search\n    tryPeekProperlyNestedBodyElement() {\n        //Properly nested <body> element (should be second element in stack).\n        return this.stackTop >= 1 && this.tagIDs[1] === $.BODY ? this.items[1] : null;\n    }\n    contains(element) {\n        return this._indexOf(element) > -1;\n    }\n    getCommonAncestor(element) {\n        const elementIdx = this._indexOf(element) - 1;\n        return elementIdx >= 0 ? this.items[elementIdx] : null;\n    }\n    isRootHtmlElementCurrent() {\n        return this.stackTop === 0 && this.tagIDs[0] === $.HTML;\n    }\n    //Element in scope\n    hasInDynamicScope(tagName, htmlScope) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            const tn = this.tagIDs[i];\n            switch (this.treeAdapter.getNamespaceURI(this.items[i])) {\n                case NS.HTML: {\n                    if (tn === tagName)\n                        return true;\n                    if (htmlScope.has(tn))\n                        return false;\n                    break;\n                }\n                case NS.SVG: {\n                    if (SCOPING_ELEMENTS_SVG.has(tn))\n                        return false;\n                    break;\n                }\n                case NS.MATHML: {\n                    if (SCOPING_ELEMENTS_MATHML.has(tn))\n                        return false;\n                    break;\n                }\n            }\n        }\n        return true;\n    }\n    hasInScope(tagName) {\n        return this.hasInDynamicScope(tagName, SCOPING_ELEMENTS_HTML);\n    }\n    hasInListItemScope(tagName) {\n        return this.hasInDynamicScope(tagName, SCOPING_ELEMENTS_HTML_LIST);\n    }\n    hasInButtonScope(tagName) {\n        return this.hasInDynamicScope(tagName, SCOPING_ELEMENTS_HTML_BUTTON);\n    }\n    hasNumberedHeaderInScope() {\n        for (let i = this.stackTop; i >= 0; i--) {\n            const tn = this.tagIDs[i];\n            switch (this.treeAdapter.getNamespaceURI(this.items[i])) {\n                case NS.HTML: {\n                    if (NUMBERED_HEADERS.has(tn))\n                        return true;\n                    if (SCOPING_ELEMENTS_HTML.has(tn))\n                        return false;\n                    break;\n                }\n                case NS.SVG: {\n                    if (SCOPING_ELEMENTS_SVG.has(tn))\n                        return false;\n                    break;\n                }\n                case NS.MATHML: {\n                    if (SCOPING_ELEMENTS_MATHML.has(tn))\n                        return false;\n                    break;\n                }\n            }\n        }\n        return true;\n    }\n    hasInTableScope(tagName) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            if (this.treeAdapter.getNamespaceURI(this.items[i]) !== NS.HTML) {\n                continue;\n            }\n            switch (this.tagIDs[i]) {\n                case tagName: {\n                    return true;\n                }\n                case $.TABLE:\n                case $.HTML: {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    hasTableBodyContextInTableScope() {\n        for (let i = this.stackTop; i >= 0; i--) {\n            if (this.treeAdapter.getNamespaceURI(this.items[i]) !== NS.HTML) {\n                continue;\n            }\n            switch (this.tagIDs[i]) {\n                case $.TBODY:\n                case $.THEAD:\n                case $.TFOOT: {\n                    return true;\n                }\n                case $.TABLE:\n                case $.HTML: {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    hasInSelectScope(tagName) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            if (this.treeAdapter.getNamespaceURI(this.items[i]) !== NS.HTML) {\n                continue;\n            }\n            switch (this.tagIDs[i]) {\n                case tagName: {\n                    return true;\n                }\n                case $.OPTION:\n                case $.OPTGROUP: {\n                    break;\n                }\n                default: {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    //Implied end tags\n    generateImpliedEndTags() {\n        while (IMPLICIT_END_TAG_REQUIRED.has(this.currentTagId)) {\n            this.pop();\n        }\n    }\n    generateImpliedEndTagsThoroughly() {\n        while (IMPLICIT_END_TAG_REQUIRED_THOROUGHLY.has(this.currentTagId)) {\n            this.pop();\n        }\n    }\n    generateImpliedEndTagsWithExclusion(exclusionId) {\n        while (this.currentTagId !== exclusionId && IMPLICIT_END_TAG_REQUIRED_THOROUGHLY.has(this.currentTagId)) {\n            this.pop();\n        }\n    }\n}\n","import { DOCUMENT_MODE } from '../common/html.js';\nexport const defaultTreeAdapter = {\n    //Node construction\n    createDocument() {\n        return {\n            nodeName: '#document',\n            mode: DOCUMENT_MODE.NO_QUIRKS,\n            childNodes: [],\n        };\n    },\n    createDocumentFragment() {\n        return {\n            nodeName: '#document-fragment',\n            childNodes: [],\n        };\n    },\n    createElement(tagName, namespaceURI, attrs) {\n        return {\n            nodeName: tagName,\n            tagName,\n            attrs,\n            namespaceURI,\n            childNodes: [],\n            parentNode: null,\n        };\n    },\n    createCommentNode(data) {\n        return {\n            nodeName: '#comment',\n            data,\n            parentNode: null,\n        };\n    },\n    createTextNode(value) {\n        return {\n            nodeName: '#text',\n            value,\n            parentNode: null,\n        };\n    },\n    //Tree mutation\n    appendChild(parentNode, newNode) {\n        parentNode.childNodes.push(newNode);\n        newNode.parentNode = parentNode;\n    },\n    insertBefore(parentNode, newNode, referenceNode) {\n        const insertionIdx = parentNode.childNodes.indexOf(referenceNode);\n        parentNode.childNodes.splice(insertionIdx, 0, newNode);\n        newNode.parentNode = parentNode;\n    },\n    setTemplateContent(templateElement, contentElement) {\n        templateElement.content = contentElement;\n    },\n    getTemplateContent(templateElement) {\n        return templateElement.content;\n    },\n    setDocumentType(document, name, publicId, systemId) {\n        const doctypeNode = document.childNodes.find((node) => node.nodeName === '#documentType');\n        if (doctypeNode) {\n            doctypeNode.name = name;\n            doctypeNode.publicId = publicId;\n            doctypeNode.systemId = systemId;\n        }\n        else {\n            const node = {\n                nodeName: '#documentType',\n                name,\n                publicId,\n                systemId,\n                parentNode: null,\n            };\n            defaultTreeAdapter.appendChild(document, node);\n        }\n    },\n    setDocumentMode(document, mode) {\n        document.mode = mode;\n    },\n    getDocumentMode(document) {\n        return document.mode;\n    },\n    detachNode(node) {\n        if (node.parentNode) {\n            const idx = node.parentNode.childNodes.indexOf(node);\n            node.parentNode.childNodes.splice(idx, 1);\n            node.parentNode = null;\n        }\n    },\n    insertText(parentNode, text) {\n        if (parentNode.childNodes.length > 0) {\n            const prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];\n            if (defaultTreeAdapter.isTextNode(prevNode)) {\n                prevNode.value += text;\n                return;\n            }\n        }\n        defaultTreeAdapter.appendChild(parentNode, defaultTreeAdapter.createTextNode(text));\n    },\n    insertTextBefore(parentNode, text, referenceNode) {\n        const prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];\n        if (prevNode && defaultTreeAdapter.isTextNode(prevNode)) {\n            prevNode.value += text;\n        }\n        else {\n            defaultTreeAdapter.insertBefore(parentNode, defaultTreeAdapter.createTextNode(text), referenceNode);\n        }\n    },\n    adoptAttributes(recipient, attrs) {\n        const recipientAttrsMap = new Set(recipient.attrs.map((attr) => attr.name));\n        for (let j = 0; j < attrs.length; j++) {\n            if (!recipientAttrsMap.has(attrs[j].name)) {\n                recipient.attrs.push(attrs[j]);\n            }\n        }\n    },\n    //Tree traversing\n    getFirstChild(node) {\n        return node.childNodes[0];\n    },\n    getChildNodes(node) {\n        return node.childNodes;\n    },\n    getParentNode(node) {\n        return node.parentNode;\n    },\n    getAttrList(element) {\n        return element.attrs;\n    },\n    //Node data\n    getTagName(element) {\n        return element.tagName;\n    },\n    getNamespaceURI(element) {\n        return element.namespaceURI;\n    },\n    getTextNodeContent(textNode) {\n        return textNode.value;\n    },\n    getCommentNodeContent(commentNode) {\n        return commentNode.data;\n    },\n    getDocumentTypeNodeName(doctypeNode) {\n        return doctypeNode.name;\n    },\n    getDocumentTypeNodePublicId(doctypeNode) {\n        return doctypeNode.publicId;\n    },\n    getDocumentTypeNodeSystemId(doctypeNode) {\n        return doctypeNode.systemId;\n    },\n    //Node types\n    isTextNode(node) {\n        return node.nodeName === '#text';\n    },\n    isCommentNode(node) {\n        return node.nodeName === '#comment';\n    },\n    isDocumentTypeNode(node) {\n        return node.nodeName === '#documentType';\n    },\n    isElementNode(node) {\n        return Object.prototype.hasOwnProperty.call(node, 'tagName');\n    },\n    // Source code location\n    setNodeSourceCodeLocation(node, location) {\n        node.sourceCodeLocation = location;\n    },\n    getNodeSourceCodeLocation(node) {\n        return node.sourceCodeLocation;\n    },\n    updateNodeSourceCodeLocation(node, endLocation) {\n        node.sourceCodeLocation = { ...node.sourceCodeLocation, ...endLocation };\n    },\n};\n","import { DOCUMENT_MODE } from './html.js';\n//Const\nconst VALID_DOCTYPE_NAME = 'html';\nconst VALID_SYSTEM_ID = 'about:legacy-compat';\nconst QUIRKS_MODE_SYSTEM_ID = 'http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd';\nconst QUIRKS_MODE_PUBLIC_ID_PREFIXES = [\n    '+//silmaril//dtd html pro v0r11 19970101//',\n    '-//as//dtd html 3.0 aswedit + extensions//',\n    '-//advasoft ltd//dtd html 3.0 aswedit + extensions//',\n    '-//ietf//dtd html 2.0 level 1//',\n    '-//ietf//dtd html 2.0 level 2//',\n    '-//ietf//dtd html 2.0 strict level 1//',\n    '-//ietf//dtd html 2.0 strict level 2//',\n    '-//ietf//dtd html 2.0 strict//',\n    '-//ietf//dtd html 2.0//',\n    '-//ietf//dtd html 2.1e//',\n    '-//ietf//dtd html 3.0//',\n    '-//ietf//dtd html 3.2 final//',\n    '-//ietf//dtd html 3.2//',\n    '-//ietf//dtd html 3//',\n    '-//ietf//dtd html level 0//',\n    '-//ietf//dtd html level 1//',\n    '-//ietf//dtd html level 2//',\n    '-//ietf//dtd html level 3//',\n    '-//ietf//dtd html strict level 0//',\n    '-//ietf//dtd html strict level 1//',\n    '-//ietf//dtd html strict level 2//',\n    '-//ietf//dtd html strict level 3//',\n    '-//ietf//dtd html strict//',\n    '-//ietf//dtd html//',\n    '-//metrius//dtd metrius presentational//',\n    '-//microsoft//dtd internet explorer 2.0 html strict//',\n    '-//microsoft//dtd internet explorer 2.0 html//',\n    '-//microsoft//dtd internet explorer 2.0 tables//',\n    '-//microsoft//dtd internet explorer 3.0 html strict//',\n    '-//microsoft//dtd internet explorer 3.0 html//',\n    '-//microsoft//dtd internet explorer 3.0 tables//',\n    '-//netscape comm. corp.//dtd html//',\n    '-//netscape comm. corp.//dtd strict html//',\n    \"-//o'reilly and associates//dtd html 2.0//\",\n    \"-//o'reilly and associates//dtd html extended 1.0//\",\n    \"-//o'reilly and associates//dtd html extended relaxed 1.0//\",\n    '-//sq//dtd html 2.0 hotmetal + extensions//',\n    '-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//',\n    '-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//',\n    '-//spyglass//dtd html 2.0 extended//',\n    '-//sun microsystems corp.//dtd hotjava html//',\n    '-//sun microsystems corp.//dtd hotjava strict html//',\n    '-//w3c//dtd html 3 1995-03-24//',\n    '-//w3c//dtd html 3.2 draft//',\n    '-//w3c//dtd html 3.2 final//',\n    '-//w3c//dtd html 3.2//',\n    '-//w3c//dtd html 3.2s draft//',\n    '-//w3c//dtd html 4.0 frameset//',\n    '-//w3c//dtd html 4.0 transitional//',\n    '-//w3c//dtd html experimental 19960712//',\n    '-//w3c//dtd html experimental 970421//',\n    '-//w3c//dtd w3 html//',\n    '-//w3o//dtd w3 html 3.0//',\n    '-//webtechs//dtd mozilla html 2.0//',\n    '-//webtechs//dtd mozilla html//',\n];\nconst QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES = [\n    ...QUIRKS_MODE_PUBLIC_ID_PREFIXES,\n    '-//w3c//dtd html 4.01 frameset//',\n    '-//w3c//dtd html 4.01 transitional//',\n];\nconst QUIRKS_MODE_PUBLIC_IDS = new Set([\n    '-//w3o//dtd w3 html strict 3.0//en//',\n    '-/w3c/dtd html 4.0 transitional/en',\n    'html',\n]);\nconst LIMITED_QUIRKS_PUBLIC_ID_PREFIXES = ['-//w3c//dtd xhtml 1.0 frameset//', '-//w3c//dtd xhtml 1.0 transitional//'];\nconst LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES = [\n    ...LIMITED_QUIRKS_PUBLIC_ID_PREFIXES,\n    '-//w3c//dtd html 4.01 frameset//',\n    '-//w3c//dtd html 4.01 transitional//',\n];\n//Utils\nfunction hasPrefix(publicId, prefixes) {\n    return prefixes.some((prefix) => publicId.startsWith(prefix));\n}\n//API\nexport function isConforming(token) {\n    return (token.name === VALID_DOCTYPE_NAME &&\n        token.publicId === null &&\n        (token.systemId === null || token.systemId === VALID_SYSTEM_ID));\n}\nexport function getDocumentMode(token) {\n    if (token.name !== VALID_DOCTYPE_NAME) {\n        return DOCUMENT_MODE.QUIRKS;\n    }\n    const { systemId } = token;\n    if (systemId && systemId.toLowerCase() === QUIRKS_MODE_SYSTEM_ID) {\n        return DOCUMENT_MODE.QUIRKS;\n    }\n    let { publicId } = token;\n    if (publicId !== null) {\n        publicId = publicId.toLowerCase();\n        if (QUIRKS_MODE_PUBLIC_IDS.has(publicId)) {\n            return DOCUMENT_MODE.QUIRKS;\n        }\n        let prefixes = systemId === null ? QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES : QUIRKS_MODE_PUBLIC_ID_PREFIXES;\n        if (hasPrefix(publicId, prefixes)) {\n            return DOCUMENT_MODE.QUIRKS;\n        }\n        prefixes =\n            systemId === null ? LIMITED_QUIRKS_PUBLIC_ID_PREFIXES : LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES;\n        if (hasPrefix(publicId, prefixes)) {\n            return DOCUMENT_MODE.LIMITED_QUIRKS;\n        }\n    }\n    return DOCUMENT_MODE.NO_QUIRKS;\n}\n","import { TAG_ID as $, NS, ATTRS, getTagID } from './html.js';\n//MIME types\nconst MIME_TYPES = {\n    TEXT_HTML: 'text/html',\n    APPLICATION_XML: 'application/xhtml+xml',\n};\n//Attributes\nconst DEFINITION_URL_ATTR = 'definitionurl';\nconst ADJUSTED_DEFINITION_URL_ATTR = 'definitionURL';\nconst SVG_ATTRS_ADJUSTMENT_MAP = new Map([\n    'attributeName',\n    'attributeType',\n    'baseFrequency',\n    'baseProfile',\n    'calcMode',\n    'clipPathUnits',\n    'diffuseConstant',\n    'edgeMode',\n    'filterUnits',\n    'glyphRef',\n    'gradientTransform',\n    'gradientUnits',\n    'kernelMatrix',\n    'kernelUnitLength',\n    'keyPoints',\n    'keySplines',\n    'keyTimes',\n    'lengthAdjust',\n    'limitingConeAngle',\n    'markerHeight',\n    'markerUnits',\n    'markerWidth',\n    'maskContentUnits',\n    'maskUnits',\n    'numOctaves',\n    'pathLength',\n    'patternContentUnits',\n    'patternTransform',\n    'patternUnits',\n    'pointsAtX',\n    'pointsAtY',\n    'pointsAtZ',\n    'preserveAlpha',\n    'preserveAspectRatio',\n    'primitiveUnits',\n    'refX',\n    'refY',\n    'repeatCount',\n    'repeatDur',\n    'requiredExtensions',\n    'requiredFeatures',\n    'specularConstant',\n    'specularExponent',\n    'spreadMethod',\n    'startOffset',\n    'stdDeviation',\n    'stitchTiles',\n    'surfaceScale',\n    'systemLanguage',\n    'tableValues',\n    'targetX',\n    'targetY',\n    'textLength',\n    'viewBox',\n    'viewTarget',\n    'xChannelSelector',\n    'yChannelSelector',\n    'zoomAndPan',\n].map((attr) => [attr.toLowerCase(), attr]));\nconst XML_ATTRS_ADJUSTMENT_MAP = new Map([\n    ['xlink:actuate', { prefix: 'xlink', name: 'actuate', namespace: NS.XLINK }],\n    ['xlink:arcrole', { prefix: 'xlink', name: 'arcrole', namespace: NS.XLINK }],\n    ['xlink:href', { prefix: 'xlink', name: 'href', namespace: NS.XLINK }],\n    ['xlink:role', { prefix: 'xlink', name: 'role', namespace: NS.XLINK }],\n    ['xlink:show', { prefix: 'xlink', name: 'show', namespace: NS.XLINK }],\n    ['xlink:title', { prefix: 'xlink', name: 'title', namespace: NS.XLINK }],\n    ['xlink:type', { prefix: 'xlink', name: 'type', namespace: NS.XLINK }],\n    ['xml:lang', { prefix: 'xml', name: 'lang', namespace: NS.XML }],\n    ['xml:space', { prefix: 'xml', name: 'space', namespace: NS.XML }],\n    ['xmlns', { prefix: '', name: 'xmlns', namespace: NS.XMLNS }],\n    ['xmlns:xlink', { prefix: 'xmlns', name: 'xlink', namespace: NS.XMLNS }],\n]);\n//SVG tag names adjustment map\nexport const SVG_TAG_NAMES_ADJUSTMENT_MAP = new Map([\n    'altGlyph',\n    'altGlyphDef',\n    'altGlyphItem',\n    'animateColor',\n    'animateMotion',\n    'animateTransform',\n    'clipPath',\n    'feBlend',\n    'feColorMatrix',\n    'feComponentTransfer',\n    'feComposite',\n    'feConvolveMatrix',\n    'feDiffuseLighting',\n    'feDisplacementMap',\n    'feDistantLight',\n    'feFlood',\n    'feFuncA',\n    'feFuncB',\n    'feFuncG',\n    'feFuncR',\n    'feGaussianBlur',\n    'feImage',\n    'feMerge',\n    'feMergeNode',\n    'feMorphology',\n    'feOffset',\n    'fePointLight',\n    'feSpecularLighting',\n    'feSpotLight',\n    'feTile',\n    'feTurbulence',\n    'foreignObject',\n    'glyphRef',\n    'linearGradient',\n    'radialGradient',\n    'textPath',\n].map((tn) => [tn.toLowerCase(), tn]));\n//Tags that causes exit from foreign content\nconst EXITS_FOREIGN_CONTENT = new Set([\n    $.B,\n    $.BIG,\n    $.BLOCKQUOTE,\n    $.BODY,\n    $.BR,\n    $.CENTER,\n    $.CODE,\n    $.DD,\n    $.DIV,\n    $.DL,\n    $.DT,\n    $.EM,\n    $.EMBED,\n    $.H1,\n    $.H2,\n    $.H3,\n    $.H4,\n    $.H5,\n    $.H6,\n    $.HEAD,\n    $.HR,\n    $.I,\n    $.IMG,\n    $.LI,\n    $.LISTING,\n    $.MENU,\n    $.META,\n    $.NOBR,\n    $.OL,\n    $.P,\n    $.PRE,\n    $.RUBY,\n    $.S,\n    $.SMALL,\n    $.SPAN,\n    $.STRONG,\n    $.STRIKE,\n    $.SUB,\n    $.SUP,\n    $.TABLE,\n    $.TT,\n    $.U,\n    $.UL,\n    $.VAR,\n]);\n//Check exit from foreign content\nexport function causesExit(startTagToken) {\n    const tn = startTagToken.tagID;\n    const isFontWithAttrs = tn === $.FONT &&\n        startTagToken.attrs.some(({ name }) => name === ATTRS.COLOR || name === ATTRS.SIZE || name === ATTRS.FACE);\n    return isFontWithAttrs || EXITS_FOREIGN_CONTENT.has(tn);\n}\n//Token adjustments\nexport function adjustTokenMathMLAttrs(token) {\n    for (let i = 0; i < token.attrs.length; i++) {\n        if (token.attrs[i].name === DEFINITION_URL_ATTR) {\n            token.attrs[i].name = ADJUSTED_DEFINITION_URL_ATTR;\n            break;\n        }\n    }\n}\nexport function adjustTokenSVGAttrs(token) {\n    for (let i = 0; i < token.attrs.length; i++) {\n        const adjustedAttrName = SVG_ATTRS_ADJUSTMENT_MAP.get(token.attrs[i].name);\n        if (adjustedAttrName != null) {\n            token.attrs[i].name = adjustedAttrName;\n        }\n    }\n}\nexport function adjustTokenXMLAttrs(token) {\n    for (let i = 0; i < token.attrs.length; i++) {\n        const adjustedAttrEntry = XML_ATTRS_ADJUSTMENT_MAP.get(token.attrs[i].name);\n        if (adjustedAttrEntry) {\n            token.attrs[i].prefix = adjustedAttrEntry.prefix;\n            token.attrs[i].name = adjustedAttrEntry.name;\n            token.attrs[i].namespace = adjustedAttrEntry.namespace;\n        }\n    }\n}\nexport function adjustTokenSVGTagName(token) {\n    const adjustedTagName = SVG_TAG_NAMES_ADJUSTMENT_MAP.get(token.tagName);\n    if (adjustedTagName != null) {\n        token.tagName = adjustedTagName;\n        token.tagID = getTagID(token.tagName);\n    }\n}\n//Integration points\nfunction isMathMLTextIntegrationPoint(tn, ns) {\n    return ns === NS.MATHML && (tn === $.MI || tn === $.MO || tn === $.MN || tn === $.MS || tn === $.MTEXT);\n}\nfunction isHtmlIntegrationPoint(tn, ns, attrs) {\n    if (ns === NS.MATHML && tn === $.ANNOTATION_XML) {\n        for (let i = 0; i < attrs.length; i++) {\n            if (attrs[i].name === ATTRS.ENCODING) {\n                const value = attrs[i].value.toLowerCase();\n                return value === MIME_TYPES.TEXT_HTML || value === MIME_TYPES.APPLICATION_XML;\n            }\n        }\n    }\n    return ns === NS.SVG && (tn === $.FOREIGN_OBJECT || tn === $.DESC || tn === $.TITLE);\n}\nexport function isIntegrationPoint(tn, ns, attrs, foreignNS) {\n    return (((!foreignNS || foreignNS === NS.HTML) && isHtmlIntegrationPoint(tn, ns, attrs)) ||\n        ((!foreignNS || foreignNS === NS.MATHML) && isMathMLTextIntegrationPoint(tn, ns)));\n}\n","import { Tokenizer, TokenizerMode } from '../tokenizer/index.js';\nimport { OpenElementStack } from './open-element-stack.js';\nimport { FormattingElementList, EntryType } from './formatting-element-list.js';\nimport { defaultTreeAdapter } from '../tree-adapters/default.js';\nimport * as doctype from '../common/doctype.js';\nimport * as foreignContent from '../common/foreign-content.js';\nimport { ERR } from '../common/error-codes.js';\nimport * as unicode from '../common/unicode.js';\nimport { TAG_ID as $, TAG_NAMES as TN, NS, ATTRS, SPECIAL_ELEMENTS, DOCUMENT_MODE, NUMBERED_HEADERS, getTagID, } from '../common/html.js';\nimport { TokenType, getTokenAttr, } from '../common/token.js';\n//Misc constants\nconst HIDDEN_INPUT_TYPE = 'hidden';\n//Adoption agency loops iteration count\nconst AA_OUTER_LOOP_ITER = 8;\nconst AA_INNER_LOOP_ITER = 3;\n//Insertion modes\nvar InsertionMode;\n(function (InsertionMode) {\n    InsertionMode[InsertionMode[\"INITIAL\"] = 0] = \"INITIAL\";\n    InsertionMode[InsertionMode[\"BEFORE_HTML\"] = 1] = \"BEFORE_HTML\";\n    InsertionMode[InsertionMode[\"BEFORE_HEAD\"] = 2] = \"BEFORE_HEAD\";\n    InsertionMode[InsertionMode[\"IN_HEAD\"] = 3] = \"IN_HEAD\";\n    InsertionMode[InsertionMode[\"IN_HEAD_NO_SCRIPT\"] = 4] = \"IN_HEAD_NO_SCRIPT\";\n    InsertionMode[InsertionMode[\"AFTER_HEAD\"] = 5] = \"AFTER_HEAD\";\n    InsertionMode[InsertionMode[\"IN_BODY\"] = 6] = \"IN_BODY\";\n    InsertionMode[InsertionMode[\"TEXT\"] = 7] = \"TEXT\";\n    InsertionMode[InsertionMode[\"IN_TABLE\"] = 8] = \"IN_TABLE\";\n    InsertionMode[InsertionMode[\"IN_TABLE_TEXT\"] = 9] = \"IN_TABLE_TEXT\";\n    InsertionMode[InsertionMode[\"IN_CAPTION\"] = 10] = \"IN_CAPTION\";\n    InsertionMode[InsertionMode[\"IN_COLUMN_GROUP\"] = 11] = \"IN_COLUMN_GROUP\";\n    InsertionMode[InsertionMode[\"IN_TABLE_BODY\"] = 12] = \"IN_TABLE_BODY\";\n    InsertionMode[InsertionMode[\"IN_ROW\"] = 13] = \"IN_ROW\";\n    InsertionMode[InsertionMode[\"IN_CELL\"] = 14] = \"IN_CELL\";\n    InsertionMode[InsertionMode[\"IN_SELECT\"] = 15] = \"IN_SELECT\";\n    InsertionMode[InsertionMode[\"IN_SELECT_IN_TABLE\"] = 16] = \"IN_SELECT_IN_TABLE\";\n    InsertionMode[InsertionMode[\"IN_TEMPLATE\"] = 17] = \"IN_TEMPLATE\";\n    InsertionMode[InsertionMode[\"AFTER_BODY\"] = 18] = \"AFTER_BODY\";\n    InsertionMode[InsertionMode[\"IN_FRAMESET\"] = 19] = \"IN_FRAMESET\";\n    InsertionMode[InsertionMode[\"AFTER_FRAMESET\"] = 20] = \"AFTER_FRAMESET\";\n    InsertionMode[InsertionMode[\"AFTER_AFTER_BODY\"] = 21] = \"AFTER_AFTER_BODY\";\n    InsertionMode[InsertionMode[\"AFTER_AFTER_FRAMESET\"] = 22] = \"AFTER_AFTER_FRAMESET\";\n})(InsertionMode || (InsertionMode = {}));\nconst BASE_LOC = {\n    startLine: -1,\n    startCol: -1,\n    startOffset: -1,\n    endLine: -1,\n    endCol: -1,\n    endOffset: -1,\n};\nconst TABLE_STRUCTURE_TAGS = new Set([$.TABLE, $.TBODY, $.TFOOT, $.THEAD, $.TR]);\nconst defaultParserOptions = {\n    scriptingEnabled: true,\n    sourceCodeLocationInfo: false,\n    treeAdapter: defaultTreeAdapter,\n    onParseError: null,\n};\n//Parser\nexport class Parser {\n    constructor(options, document, \n    /** @internal */\n    fragmentContext = null, \n    /** @internal */\n    scriptHandler = null) {\n        this.fragmentContext = fragmentContext;\n        this.scriptHandler = scriptHandler;\n        this.currentToken = null;\n        this.stopped = false;\n        /** @internal */\n        this.insertionMode = InsertionMode.INITIAL;\n        /** @internal */\n        this.originalInsertionMode = InsertionMode.INITIAL;\n        /** @internal */\n        this.headElement = null;\n        /** @internal */\n        this.formElement = null;\n        /** Indicates that the current node is not an element in the HTML namespace */\n        this.currentNotInHTML = false;\n        /**\n         * The template insertion mode stack is maintained from the left.\n         * Ie. the topmost element will always have index 0.\n         *\n         * @internal\n         */\n        this.tmplInsertionModeStack = [];\n        /** @internal */\n        this.pendingCharacterTokens = [];\n        /** @internal */\n        this.hasNonWhitespacePendingCharacterToken = false;\n        /** @internal */\n        this.framesetOk = true;\n        /** @internal */\n        this.skipNextNewLine = false;\n        /** @internal */\n        this.fosterParentingEnabled = false;\n        this.options = {\n            ...defaultParserOptions,\n            ...options,\n        };\n        this.treeAdapter = this.options.treeAdapter;\n        this.onParseError = this.options.onParseError;\n        // Always enable location info if we report parse errors.\n        if (this.onParseError) {\n            this.options.sourceCodeLocationInfo = true;\n        }\n        this.document = document !== null && document !== void 0 ? document : this.treeAdapter.createDocument();\n        this.tokenizer = new Tokenizer(this.options, this);\n        this.activeFormattingElements = new FormattingElementList(this.treeAdapter);\n        this.fragmentContextID = fragmentContext ? getTagID(this.treeAdapter.getTagName(fragmentContext)) : $.UNKNOWN;\n        this._setContextModes(fragmentContext !== null && fragmentContext !== void 0 ? fragmentContext : this.document, this.fragmentContextID);\n        this.openElements = new OpenElementStack(this.document, this.treeAdapter, this);\n    }\n    // API\n    static parse(html, options) {\n        const parser = new this(options);\n        parser.tokenizer.write(html, true);\n        return parser.document;\n    }\n    static getFragmentParser(fragmentContext, options) {\n        const opts = {\n            ...defaultParserOptions,\n            ...options,\n        };\n        //NOTE: use a <template> element as the fragment context if no context element was provided,\n        //so we will parse in a \"forgiving\" manner\n        fragmentContext !== null && fragmentContext !== void 0 ? fragmentContext : (fragmentContext = opts.treeAdapter.createElement(TN.TEMPLATE, NS.HTML, []));\n        //NOTE: create a fake element which will be used as the `document` for fragment parsing.\n        //This is important for jsdom, where a new `document` cannot be created. This led to\n        //fragment parsing messing with the main `document`.\n        const documentMock = opts.treeAdapter.createElement('documentmock', NS.HTML, []);\n        const parser = new this(opts, documentMock, fragmentContext);\n        if (parser.fragmentContextID === $.TEMPLATE) {\n            parser.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);\n        }\n        parser._initTokenizerForFragmentParsing();\n        parser._insertFakeRootElement();\n        parser._resetInsertionMode();\n        parser._findFormInFragmentContext();\n        return parser;\n    }\n    getFragment() {\n        const rootElement = this.treeAdapter.getFirstChild(this.document);\n        const fragment = this.treeAdapter.createDocumentFragment();\n        this._adoptNodes(rootElement, fragment);\n        return fragment;\n    }\n    //Errors\n    /** @internal */\n    _err(token, code, beforeToken) {\n        var _a;\n        if (!this.onParseError)\n            return;\n        const loc = (_a = token.location) !== null && _a !== void 0 ? _a : BASE_LOC;\n        const err = {\n            code,\n            startLine: loc.startLine,\n            startCol: loc.startCol,\n            startOffset: loc.startOffset,\n            endLine: beforeToken ? loc.startLine : loc.endLine,\n            endCol: beforeToken ? loc.startCol : loc.endCol,\n            endOffset: beforeToken ? loc.startOffset : loc.endOffset,\n        };\n        this.onParseError(err);\n    }\n    //Stack events\n    /** @internal */\n    onItemPush(node, tid, isTop) {\n        var _a, _b;\n        (_b = (_a = this.treeAdapter).onItemPush) === null || _b === void 0 ? void 0 : _b.call(_a, node);\n        if (isTop && this.openElements.stackTop > 0)\n            this._setContextModes(node, tid);\n    }\n    /** @internal */\n    onItemPop(node, isTop) {\n        var _a, _b;\n        if (this.options.sourceCodeLocationInfo) {\n            this._setEndLocation(node, this.currentToken);\n        }\n        (_b = (_a = this.treeAdapter).onItemPop) === null || _b === void 0 ? void 0 : _b.call(_a, node, this.openElements.current);\n        if (isTop) {\n            let current;\n            let currentTagId;\n            if (this.openElements.stackTop === 0 && this.fragmentContext) {\n                current = this.fragmentContext;\n                currentTagId = this.fragmentContextID;\n            }\n            else {\n                ({ current, currentTagId } = this.openElements);\n            }\n            this._setContextModes(current, currentTagId);\n        }\n    }\n    _setContextModes(current, tid) {\n        const isHTML = current === this.document || this.treeAdapter.getNamespaceURI(current) === NS.HTML;\n        this.currentNotInHTML = !isHTML;\n        this.tokenizer.inForeignNode = !isHTML && !this._isIntegrationPoint(tid, current);\n    }\n    /** @protected */\n    _switchToTextParsing(currentToken, nextTokenizerState) {\n        this._insertElement(currentToken, NS.HTML);\n        this.tokenizer.state = nextTokenizerState;\n        this.originalInsertionMode = this.insertionMode;\n        this.insertionMode = InsertionMode.TEXT;\n    }\n    switchToPlaintextParsing() {\n        this.insertionMode = InsertionMode.TEXT;\n        this.originalInsertionMode = InsertionMode.IN_BODY;\n        this.tokenizer.state = TokenizerMode.PLAINTEXT;\n    }\n    //Fragment parsing\n    /** @protected */\n    _getAdjustedCurrentElement() {\n        return this.openElements.stackTop === 0 && this.fragmentContext\n            ? this.fragmentContext\n            : this.openElements.current;\n    }\n    /** @protected */\n    _findFormInFragmentContext() {\n        let node = this.fragmentContext;\n        while (node) {\n            if (this.treeAdapter.getTagName(node) === TN.FORM) {\n                this.formElement = node;\n                break;\n            }\n            node = this.treeAdapter.getParentNode(node);\n        }\n    }\n    _initTokenizerForFragmentParsing() {\n        if (!this.fragmentContext || this.treeAdapter.getNamespaceURI(this.fragmentContext) !== NS.HTML) {\n            return;\n        }\n        switch (this.fragmentContextID) {\n            case $.TITLE:\n            case $.TEXTAREA: {\n                this.tokenizer.state = TokenizerMode.RCDATA;\n                break;\n            }\n            case $.STYLE:\n            case $.XMP:\n            case $.IFRAME:\n            case $.NOEMBED:\n            case $.NOFRAMES:\n            case $.NOSCRIPT: {\n                this.tokenizer.state = TokenizerMode.RAWTEXT;\n                break;\n            }\n            case $.SCRIPT: {\n                this.tokenizer.state = TokenizerMode.SCRIPT_DATA;\n                break;\n            }\n            case $.PLAINTEXT: {\n                this.tokenizer.state = TokenizerMode.PLAINTEXT;\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    //Tree mutation\n    /** @protected */\n    _setDocumentType(token) {\n        const name = token.name || '';\n        const publicId = token.publicId || '';\n        const systemId = token.systemId || '';\n        this.treeAdapter.setDocumentType(this.document, name, publicId, systemId);\n        if (token.location) {\n            const documentChildren = this.treeAdapter.getChildNodes(this.document);\n            const docTypeNode = documentChildren.find((node) => this.treeAdapter.isDocumentTypeNode(node));\n            if (docTypeNode) {\n                this.treeAdapter.setNodeSourceCodeLocation(docTypeNode, token.location);\n            }\n        }\n    }\n    /** @protected */\n    _attachElementToTree(element, location) {\n        if (this.options.sourceCodeLocationInfo) {\n            const loc = location && {\n                ...location,\n                startTag: location,\n            };\n            this.treeAdapter.setNodeSourceCodeLocation(element, loc);\n        }\n        if (this._shouldFosterParentOnInsertion()) {\n            this._fosterParentElement(element);\n        }\n        else {\n            const parent = this.openElements.currentTmplContentOrNode;\n            this.treeAdapter.appendChild(parent, element);\n        }\n    }\n    /**\n     * For self-closing tags. Add an element to the tree, but skip adding it\n     * to the stack.\n     */\n    /** @protected */\n    _appendElement(token, namespaceURI) {\n        const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);\n        this._attachElementToTree(element, token.location);\n    }\n    /** @protected */\n    _insertElement(token, namespaceURI) {\n        const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);\n        this._attachElementToTree(element, token.location);\n        this.openElements.push(element, token.tagID);\n    }\n    /** @protected */\n    _insertFakeElement(tagName, tagID) {\n        const element = this.treeAdapter.createElement(tagName, NS.HTML, []);\n        this._attachElementToTree(element, null);\n        this.openElements.push(element, tagID);\n    }\n    /** @protected */\n    _insertTemplate(token) {\n        const tmpl = this.treeAdapter.createElement(token.tagName, NS.HTML, token.attrs);\n        const content = this.treeAdapter.createDocumentFragment();\n        this.treeAdapter.setTemplateContent(tmpl, content);\n        this._attachElementToTree(tmpl, token.location);\n        this.openElements.push(tmpl, token.tagID);\n        if (this.options.sourceCodeLocationInfo)\n            this.treeAdapter.setNodeSourceCodeLocation(content, null);\n    }\n    /** @protected */\n    _insertFakeRootElement() {\n        const element = this.treeAdapter.createElement(TN.HTML, NS.HTML, []);\n        if (this.options.sourceCodeLocationInfo)\n            this.treeAdapter.setNodeSourceCodeLocation(element, null);\n        this.treeAdapter.appendChild(this.openElements.current, element);\n        this.openElements.push(element, $.HTML);\n    }\n    /** @protected */\n    _appendCommentNode(token, parent) {\n        const commentNode = this.treeAdapter.createCommentNode(token.data);\n        this.treeAdapter.appendChild(parent, commentNode);\n        if (this.options.sourceCodeLocationInfo) {\n            this.treeAdapter.setNodeSourceCodeLocation(commentNode, token.location);\n        }\n    }\n    /** @protected */\n    _insertCharacters(token) {\n        let parent;\n        let beforeElement;\n        if (this._shouldFosterParentOnInsertion()) {\n            ({ parent, beforeElement } = this._findFosterParentingLocation());\n            if (beforeElement) {\n                this.treeAdapter.insertTextBefore(parent, token.chars, beforeElement);\n            }\n            else {\n                this.treeAdapter.insertText(parent, token.chars);\n            }\n        }\n        else {\n            parent = this.openElements.currentTmplContentOrNode;\n            this.treeAdapter.insertText(parent, token.chars);\n        }\n        if (!token.location)\n            return;\n        const siblings = this.treeAdapter.getChildNodes(parent);\n        const textNodeIdx = beforeElement ? siblings.lastIndexOf(beforeElement) : siblings.length;\n        const textNode = siblings[textNodeIdx - 1];\n        //NOTE: if we have a location assigned by another token, then just update the end position\n        const tnLoc = this.treeAdapter.getNodeSourceCodeLocation(textNode);\n        if (tnLoc) {\n            const { endLine, endCol, endOffset } = token.location;\n            this.treeAdapter.updateNodeSourceCodeLocation(textNode, { endLine, endCol, endOffset });\n        }\n        else if (this.options.sourceCodeLocationInfo) {\n            this.treeAdapter.setNodeSourceCodeLocation(textNode, token.location);\n        }\n    }\n    /** @protected */\n    _adoptNodes(donor, recipient) {\n        for (let child = this.treeAdapter.getFirstChild(donor); child; child = this.treeAdapter.getFirstChild(donor)) {\n            this.treeAdapter.detachNode(child);\n            this.treeAdapter.appendChild(recipient, child);\n        }\n    }\n    /** @protected */\n    _setEndLocation(element, closingToken) {\n        if (this.treeAdapter.getNodeSourceCodeLocation(element) && closingToken.location) {\n            const ctLoc = closingToken.location;\n            const tn = this.treeAdapter.getTagName(element);\n            const endLoc = \n            // NOTE: For cases like <p> <p> </p> - First 'p' closes without a closing\n            // tag and for cases like <td> <p> </td> - 'p' closes without a closing tag.\n            closingToken.type === TokenType.END_TAG && tn === closingToken.tagName\n                ? {\n                    endTag: { ...ctLoc },\n                    endLine: ctLoc.endLine,\n                    endCol: ctLoc.endCol,\n                    endOffset: ctLoc.endOffset,\n                }\n                : {\n                    endLine: ctLoc.startLine,\n                    endCol: ctLoc.startCol,\n                    endOffset: ctLoc.startOffset,\n                };\n            this.treeAdapter.updateNodeSourceCodeLocation(element, endLoc);\n        }\n    }\n    //Token processing\n    shouldProcessStartTagTokenInForeignContent(token) {\n        // Check that neither current === document, or ns === NS.HTML\n        if (!this.currentNotInHTML)\n            return false;\n        let current;\n        let currentTagId;\n        if (this.openElements.stackTop === 0 && this.fragmentContext) {\n            current = this.fragmentContext;\n            currentTagId = this.fragmentContextID;\n        }\n        else {\n            ({ current, currentTagId } = this.openElements);\n        }\n        if (token.tagID === $.SVG &&\n            this.treeAdapter.getTagName(current) === TN.ANNOTATION_XML &&\n            this.treeAdapter.getNamespaceURI(current) === NS.MATHML) {\n            return false;\n        }\n        return (\n        // Check that `current` is not an integration point for HTML or MathML elements.\n        this.tokenizer.inForeignNode ||\n            // If it _is_ an integration point, then we might have to check that it is not an HTML\n            // integration point.\n            ((token.tagID === $.MGLYPH || token.tagID === $.MALIGNMARK) &&\n                !this._isIntegrationPoint(currentTagId, current, NS.HTML)));\n    }\n    /** @protected */\n    _processToken(token) {\n        switch (token.type) {\n            case TokenType.CHARACTER: {\n                this.onCharacter(token);\n                break;\n            }\n            case TokenType.NULL_CHARACTER: {\n                this.onNullCharacter(token);\n                break;\n            }\n            case TokenType.COMMENT: {\n                this.onComment(token);\n                break;\n            }\n            case TokenType.DOCTYPE: {\n                this.onDoctype(token);\n                break;\n            }\n            case TokenType.START_TAG: {\n                this._processStartTag(token);\n                break;\n            }\n            case TokenType.END_TAG: {\n                this.onEndTag(token);\n                break;\n            }\n            case TokenType.EOF: {\n                this.onEof(token);\n                break;\n            }\n            case TokenType.WHITESPACE_CHARACTER: {\n                this.onWhitespaceCharacter(token);\n                break;\n            }\n        }\n    }\n    //Integration points\n    /** @protected */\n    _isIntegrationPoint(tid, element, foreignNS) {\n        const ns = this.treeAdapter.getNamespaceURI(element);\n        const attrs = this.treeAdapter.getAttrList(element);\n        return foreignContent.isIntegrationPoint(tid, ns, attrs, foreignNS);\n    }\n    //Active formatting elements reconstruction\n    /** @protected */\n    _reconstructActiveFormattingElements() {\n        const listLength = this.activeFormattingElements.entries.length;\n        if (listLength) {\n            const endIndex = this.activeFormattingElements.entries.findIndex((entry) => entry.type === EntryType.Marker || this.openElements.contains(entry.element));\n            const unopenIdx = endIndex < 0 ? listLength - 1 : endIndex - 1;\n            for (let i = unopenIdx; i >= 0; i--) {\n                const entry = this.activeFormattingElements.entries[i];\n                this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));\n                entry.element = this.openElements.current;\n            }\n        }\n    }\n    //Close elements\n    /** @protected */\n    _closeTableCell() {\n        this.openElements.generateImpliedEndTags();\n        this.openElements.popUntilTableCellPopped();\n        this.activeFormattingElements.clearToLastMarker();\n        this.insertionMode = InsertionMode.IN_ROW;\n    }\n    /** @protected */\n    _closePElement() {\n        this.openElements.generateImpliedEndTagsWithExclusion($.P);\n        this.openElements.popUntilTagNamePopped($.P);\n    }\n    //Insertion modes\n    /** @protected */\n    _resetInsertionMode() {\n        for (let i = this.openElements.stackTop; i >= 0; i--) {\n            //Insertion mode reset map\n            switch (i === 0 && this.fragmentContext ? this.fragmentContextID : this.openElements.tagIDs[i]) {\n                case $.TR: {\n                    this.insertionMode = InsertionMode.IN_ROW;\n                    return;\n                }\n                case $.TBODY:\n                case $.THEAD:\n                case $.TFOOT: {\n                    this.insertionMode = InsertionMode.IN_TABLE_BODY;\n                    return;\n                }\n                case $.CAPTION: {\n                    this.insertionMode = InsertionMode.IN_CAPTION;\n                    return;\n                }\n                case $.COLGROUP: {\n                    this.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n                    return;\n                }\n                case $.TABLE: {\n                    this.insertionMode = InsertionMode.IN_TABLE;\n                    return;\n                }\n                case $.BODY: {\n                    this.insertionMode = InsertionMode.IN_BODY;\n                    return;\n                }\n                case $.FRAMESET: {\n                    this.insertionMode = InsertionMode.IN_FRAMESET;\n                    return;\n                }\n                case $.SELECT: {\n                    this._resetInsertionModeForSelect(i);\n                    return;\n                }\n                case $.TEMPLATE: {\n                    this.insertionMode = this.tmplInsertionModeStack[0];\n                    return;\n                }\n                case $.HTML: {\n                    this.insertionMode = this.headElement ? InsertionMode.AFTER_HEAD : InsertionMode.BEFORE_HEAD;\n                    return;\n                }\n                case $.TD:\n                case $.TH: {\n                    if (i > 0) {\n                        this.insertionMode = InsertionMode.IN_CELL;\n                        return;\n                    }\n                    break;\n                }\n                case $.HEAD: {\n                    if (i > 0) {\n                        this.insertionMode = InsertionMode.IN_HEAD;\n                        return;\n                    }\n                    break;\n                }\n            }\n        }\n        this.insertionMode = InsertionMode.IN_BODY;\n    }\n    /** @protected */\n    _resetInsertionModeForSelect(selectIdx) {\n        if (selectIdx > 0) {\n            for (let i = selectIdx - 1; i > 0; i--) {\n                const tn = this.openElements.tagIDs[i];\n                if (tn === $.TEMPLATE) {\n                    break;\n                }\n                else if (tn === $.TABLE) {\n                    this.insertionMode = InsertionMode.IN_SELECT_IN_TABLE;\n                    return;\n                }\n            }\n        }\n        this.insertionMode = InsertionMode.IN_SELECT;\n    }\n    //Foster parenting\n    /** @protected */\n    _isElementCausesFosterParenting(tn) {\n        return TABLE_STRUCTURE_TAGS.has(tn);\n    }\n    /** @protected */\n    _shouldFosterParentOnInsertion() {\n        return this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.currentTagId);\n    }\n    /** @protected */\n    _findFosterParentingLocation() {\n        for (let i = this.openElements.stackTop; i >= 0; i--) {\n            const openElement = this.openElements.items[i];\n            switch (this.openElements.tagIDs[i]) {\n                case $.TEMPLATE: {\n                    if (this.treeAdapter.getNamespaceURI(openElement) === NS.HTML) {\n                        return { parent: this.treeAdapter.getTemplateContent(openElement), beforeElement: null };\n                    }\n                    break;\n                }\n                case $.TABLE: {\n                    const parent = this.treeAdapter.getParentNode(openElement);\n                    if (parent) {\n                        return { parent, beforeElement: openElement };\n                    }\n                    return { parent: this.openElements.items[i - 1], beforeElement: null };\n                }\n                default:\n                // Do nothing\n            }\n        }\n        return { parent: this.openElements.items[0], beforeElement: null };\n    }\n    /** @protected */\n    _fosterParentElement(element) {\n        const location = this._findFosterParentingLocation();\n        if (location.beforeElement) {\n            this.treeAdapter.insertBefore(location.parent, element, location.beforeElement);\n        }\n        else {\n            this.treeAdapter.appendChild(location.parent, element);\n        }\n    }\n    //Special elements\n    /** @protected */\n    _isSpecialElement(element, id) {\n        const ns = this.treeAdapter.getNamespaceURI(element);\n        return SPECIAL_ELEMENTS[ns].has(id);\n    }\n    /** @internal */\n    onCharacter(token) {\n        this.skipNextNewLine = false;\n        if (this.tokenizer.inForeignNode) {\n            characterInForeignContent(this, token);\n            return;\n        }\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                tokenInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HTML: {\n                tokenBeforeHtml(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD: {\n                tokenBeforeHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD: {\n                tokenInHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD_NO_SCRIPT: {\n                tokenInHeadNoScript(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_HEAD: {\n                tokenAfterHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_BODY:\n            case InsertionMode.IN_CAPTION:\n            case InsertionMode.IN_CELL:\n            case InsertionMode.IN_TEMPLATE: {\n                characterInBody(this, token);\n                break;\n            }\n            case InsertionMode.TEXT:\n            case InsertionMode.IN_SELECT:\n            case InsertionMode.IN_SELECT_IN_TABLE: {\n                this._insertCharacters(token);\n                break;\n            }\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW: {\n                characterInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                characterInTableText(this, token);\n                break;\n            }\n            case InsertionMode.IN_COLUMN_GROUP: {\n                tokenInColumnGroup(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY: {\n                tokenAfterBody(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_BODY: {\n                tokenAfterAfterBody(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    /** @internal */\n    onNullCharacter(token) {\n        this.skipNextNewLine = false;\n        if (this.tokenizer.inForeignNode) {\n            nullCharacterInForeignContent(this, token);\n            return;\n        }\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                tokenInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HTML: {\n                tokenBeforeHtml(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD: {\n                tokenBeforeHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD: {\n                tokenInHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD_NO_SCRIPT: {\n                tokenInHeadNoScript(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_HEAD: {\n                tokenAfterHead(this, token);\n                break;\n            }\n            case InsertionMode.TEXT: {\n                this._insertCharacters(token);\n                break;\n            }\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW: {\n                characterInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_COLUMN_GROUP: {\n                tokenInColumnGroup(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY: {\n                tokenAfterBody(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_BODY: {\n                tokenAfterAfterBody(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    /** @internal */\n    onComment(token) {\n        this.skipNextNewLine = false;\n        if (this.currentNotInHTML) {\n            appendComment(this, token);\n            return;\n        }\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL:\n            case InsertionMode.BEFORE_HTML:\n            case InsertionMode.BEFORE_HEAD:\n            case InsertionMode.IN_HEAD:\n            case InsertionMode.IN_HEAD_NO_SCRIPT:\n            case InsertionMode.AFTER_HEAD:\n            case InsertionMode.IN_BODY:\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_CAPTION:\n            case InsertionMode.IN_COLUMN_GROUP:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW:\n            case InsertionMode.IN_CELL:\n            case InsertionMode.IN_SELECT:\n            case InsertionMode.IN_SELECT_IN_TABLE:\n            case InsertionMode.IN_TEMPLATE:\n            case InsertionMode.IN_FRAMESET:\n            case InsertionMode.AFTER_FRAMESET: {\n                appendComment(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                tokenInTableText(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY: {\n                appendCommentToRootHtmlElement(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_BODY:\n            case InsertionMode.AFTER_AFTER_FRAMESET: {\n                appendCommentToDocument(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    /** @internal */\n    onDoctype(token) {\n        this.skipNextNewLine = false;\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                doctypeInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD:\n            case InsertionMode.IN_HEAD:\n            case InsertionMode.IN_HEAD_NO_SCRIPT:\n            case InsertionMode.AFTER_HEAD: {\n                this._err(token, ERR.misplacedDoctype);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                tokenInTableText(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    /** @internal */\n    onStartTag(token) {\n        this.skipNextNewLine = false;\n        this.currentToken = token;\n        this._processStartTag(token);\n        if (token.selfClosing && !token.ackSelfClosing) {\n            this._err(token, ERR.nonVoidHtmlElementStartTagWithTrailingSolidus);\n        }\n    }\n    /**\n     * Processes a given start tag.\n     *\n     * `onStartTag` checks if a self-closing tag was recognized. When a token\n     * is moved inbetween multiple insertion modes, this check for self-closing\n     * could lead to false positives. To avoid this, `_processStartTag` is used\n     * for nested calls.\n     *\n     * @param token The token to process.\n     * @protected\n     */\n    _processStartTag(token) {\n        if (this.shouldProcessStartTagTokenInForeignContent(token)) {\n            startTagInForeignContent(this, token);\n        }\n        else {\n            this._startTagOutsideForeignContent(token);\n        }\n    }\n    /** @protected */\n    _startTagOutsideForeignContent(token) {\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                tokenInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HTML: {\n                startTagBeforeHtml(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD: {\n                startTagBeforeHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD: {\n                startTagInHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD_NO_SCRIPT: {\n                startTagInHeadNoScript(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_HEAD: {\n                startTagAfterHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_BODY: {\n                startTagInBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE: {\n                startTagInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                tokenInTableText(this, token);\n                break;\n            }\n            case InsertionMode.IN_CAPTION: {\n                startTagInCaption(this, token);\n                break;\n            }\n            case InsertionMode.IN_COLUMN_GROUP: {\n                startTagInColumnGroup(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_BODY: {\n                startTagInTableBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_ROW: {\n                startTagInRow(this, token);\n                break;\n            }\n            case InsertionMode.IN_CELL: {\n                startTagInCell(this, token);\n                break;\n            }\n            case InsertionMode.IN_SELECT: {\n                startTagInSelect(this, token);\n                break;\n            }\n            case InsertionMode.IN_SELECT_IN_TABLE: {\n                startTagInSelectInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TEMPLATE: {\n                startTagInTemplate(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY: {\n                startTagAfterBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_FRAMESET: {\n                startTagInFrameset(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_FRAMESET: {\n                startTagAfterFrameset(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_BODY: {\n                startTagAfterAfterBody(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_FRAMESET: {\n                startTagAfterAfterFrameset(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    /** @internal */\n    onEndTag(token) {\n        this.skipNextNewLine = false;\n        this.currentToken = token;\n        if (this.currentNotInHTML) {\n            endTagInForeignContent(this, token);\n        }\n        else {\n            this._endTagOutsideForeignContent(token);\n        }\n    }\n    /** @protected */\n    _endTagOutsideForeignContent(token) {\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                tokenInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HTML: {\n                endTagBeforeHtml(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD: {\n                endTagBeforeHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD: {\n                endTagInHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD_NO_SCRIPT: {\n                endTagInHeadNoScript(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_HEAD: {\n                endTagAfterHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_BODY: {\n                endTagInBody(this, token);\n                break;\n            }\n            case InsertionMode.TEXT: {\n                endTagInText(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE: {\n                endTagInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                tokenInTableText(this, token);\n                break;\n            }\n            case InsertionMode.IN_CAPTION: {\n                endTagInCaption(this, token);\n                break;\n            }\n            case InsertionMode.IN_COLUMN_GROUP: {\n                endTagInColumnGroup(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_BODY: {\n                endTagInTableBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_ROW: {\n                endTagInRow(this, token);\n                break;\n            }\n            case InsertionMode.IN_CELL: {\n                endTagInCell(this, token);\n                break;\n            }\n            case InsertionMode.IN_SELECT: {\n                endTagInSelect(this, token);\n                break;\n            }\n            case InsertionMode.IN_SELECT_IN_TABLE: {\n                endTagInSelectInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TEMPLATE: {\n                endTagInTemplate(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY: {\n                endTagAfterBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_FRAMESET: {\n                endTagInFrameset(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_FRAMESET: {\n                endTagAfterFrameset(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_BODY: {\n                tokenAfterAfterBody(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    /** @internal */\n    onEof(token) {\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                tokenInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HTML: {\n                tokenBeforeHtml(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD: {\n                tokenBeforeHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD: {\n                tokenInHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD_NO_SCRIPT: {\n                tokenInHeadNoScript(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_HEAD: {\n                tokenAfterHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_BODY:\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_CAPTION:\n            case InsertionMode.IN_COLUMN_GROUP:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW:\n            case InsertionMode.IN_CELL:\n            case InsertionMode.IN_SELECT:\n            case InsertionMode.IN_SELECT_IN_TABLE: {\n                eofInBody(this, token);\n                break;\n            }\n            case InsertionMode.TEXT: {\n                eofInText(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                tokenInTableText(this, token);\n                break;\n            }\n            case InsertionMode.IN_TEMPLATE: {\n                eofInTemplate(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY:\n            case InsertionMode.IN_FRAMESET:\n            case InsertionMode.AFTER_FRAMESET:\n            case InsertionMode.AFTER_AFTER_BODY:\n            case InsertionMode.AFTER_AFTER_FRAMESET: {\n                stopParsing(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    /** @internal */\n    onWhitespaceCharacter(token) {\n        if (this.skipNextNewLine) {\n            this.skipNextNewLine = false;\n            if (token.chars.charCodeAt(0) === unicode.CODE_POINTS.LINE_FEED) {\n                if (token.chars.length === 1) {\n                    return;\n                }\n                token.chars = token.chars.substr(1);\n            }\n        }\n        if (this.tokenizer.inForeignNode) {\n            this._insertCharacters(token);\n            return;\n        }\n        switch (this.insertionMode) {\n            case InsertionMode.IN_HEAD:\n            case InsertionMode.IN_HEAD_NO_SCRIPT:\n            case InsertionMode.AFTER_HEAD:\n            case InsertionMode.TEXT:\n            case InsertionMode.IN_COLUMN_GROUP:\n            case InsertionMode.IN_SELECT:\n            case InsertionMode.IN_SELECT_IN_TABLE:\n            case InsertionMode.IN_FRAMESET:\n            case InsertionMode.AFTER_FRAMESET: {\n                this._insertCharacters(token);\n                break;\n            }\n            case InsertionMode.IN_BODY:\n            case InsertionMode.IN_CAPTION:\n            case InsertionMode.IN_CELL:\n            case InsertionMode.IN_TEMPLATE:\n            case InsertionMode.AFTER_BODY:\n            case InsertionMode.AFTER_AFTER_BODY:\n            case InsertionMode.AFTER_AFTER_FRAMESET: {\n                whitespaceCharacterInBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW: {\n                characterInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                whitespaceCharacterInTableText(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n}\n//Adoption agency algorithm\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#adoptionAgency)\n//------------------------------------------------------------------\n//Steps 5-8 of the algorithm\nfunction aaObtainFormattingElementEntry(p, token) {\n    let formattingElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(token.tagName);\n    if (formattingElementEntry) {\n        if (!p.openElements.contains(formattingElementEntry.element)) {\n            p.activeFormattingElements.removeEntry(formattingElementEntry);\n            formattingElementEntry = null;\n        }\n        else if (!p.openElements.hasInScope(token.tagID)) {\n            formattingElementEntry = null;\n        }\n    }\n    else {\n        genericEndTagInBody(p, token);\n    }\n    return formattingElementEntry;\n}\n//Steps 9 and 10 of the algorithm\nfunction aaObtainFurthestBlock(p, formattingElementEntry) {\n    let furthestBlock = null;\n    let idx = p.openElements.stackTop;\n    for (; idx >= 0; idx--) {\n        const element = p.openElements.items[idx];\n        if (element === formattingElementEntry.element) {\n            break;\n        }\n        if (p._isSpecialElement(element, p.openElements.tagIDs[idx])) {\n            furthestBlock = element;\n        }\n    }\n    if (!furthestBlock) {\n        p.openElements.shortenToLength(idx < 0 ? 0 : idx);\n        p.activeFormattingElements.removeEntry(formattingElementEntry);\n    }\n    return furthestBlock;\n}\n//Step 13 of the algorithm\nfunction aaInnerLoop(p, furthestBlock, formattingElement) {\n    let lastElement = furthestBlock;\n    let nextElement = p.openElements.getCommonAncestor(furthestBlock);\n    for (let i = 0, element = nextElement; element !== formattingElement; i++, element = nextElement) {\n        //NOTE: store the next element for the next loop iteration (it may be deleted from the stack by step 9.5)\n        nextElement = p.openElements.getCommonAncestor(element);\n        const elementEntry = p.activeFormattingElements.getElementEntry(element);\n        const counterOverflow = elementEntry && i >= AA_INNER_LOOP_ITER;\n        const shouldRemoveFromOpenElements = !elementEntry || counterOverflow;\n        if (shouldRemoveFromOpenElements) {\n            if (counterOverflow) {\n                p.activeFormattingElements.removeEntry(elementEntry);\n            }\n            p.openElements.remove(element);\n        }\n        else {\n            element = aaRecreateElementFromEntry(p, elementEntry);\n            if (lastElement === furthestBlock) {\n                p.activeFormattingElements.bookmark = elementEntry;\n            }\n            p.treeAdapter.detachNode(lastElement);\n            p.treeAdapter.appendChild(element, lastElement);\n            lastElement = element;\n        }\n    }\n    return lastElement;\n}\n//Step 13.7 of the algorithm\nfunction aaRecreateElementFromEntry(p, elementEntry) {\n    const ns = p.treeAdapter.getNamespaceURI(elementEntry.element);\n    const newElement = p.treeAdapter.createElement(elementEntry.token.tagName, ns, elementEntry.token.attrs);\n    p.openElements.replace(elementEntry.element, newElement);\n    elementEntry.element = newElement;\n    return newElement;\n}\n//Step 14 of the algorithm\nfunction aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement) {\n    const tn = p.treeAdapter.getTagName(commonAncestor);\n    const tid = getTagID(tn);\n    if (p._isElementCausesFosterParenting(tid)) {\n        p._fosterParentElement(lastElement);\n    }\n    else {\n        const ns = p.treeAdapter.getNamespaceURI(commonAncestor);\n        if (tid === $.TEMPLATE && ns === NS.HTML) {\n            commonAncestor = p.treeAdapter.getTemplateContent(commonAncestor);\n        }\n        p.treeAdapter.appendChild(commonAncestor, lastElement);\n    }\n}\n//Steps 15-19 of the algorithm\nfunction aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry) {\n    const ns = p.treeAdapter.getNamespaceURI(formattingElementEntry.element);\n    const { token } = formattingElementEntry;\n    const newElement = p.treeAdapter.createElement(token.tagName, ns, token.attrs);\n    p._adoptNodes(furthestBlock, newElement);\n    p.treeAdapter.appendChild(furthestBlock, newElement);\n    p.activeFormattingElements.insertElementAfterBookmark(newElement, token);\n    p.activeFormattingElements.removeEntry(formattingElementEntry);\n    p.openElements.remove(formattingElementEntry.element);\n    p.openElements.insertAfter(furthestBlock, newElement, token.tagID);\n}\n//Algorithm entry point\nfunction callAdoptionAgency(p, token) {\n    for (let i = 0; i < AA_OUTER_LOOP_ITER; i++) {\n        const formattingElementEntry = aaObtainFormattingElementEntry(p, token);\n        if (!formattingElementEntry) {\n            break;\n        }\n        const furthestBlock = aaObtainFurthestBlock(p, formattingElementEntry);\n        if (!furthestBlock) {\n            break;\n        }\n        p.activeFormattingElements.bookmark = formattingElementEntry;\n        const lastElement = aaInnerLoop(p, furthestBlock, formattingElementEntry.element);\n        const commonAncestor = p.openElements.getCommonAncestor(formattingElementEntry.element);\n        p.treeAdapter.detachNode(lastElement);\n        if (commonAncestor)\n            aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement);\n        aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry);\n    }\n}\n//Generic token handlers\n//------------------------------------------------------------------\nfunction appendComment(p, token) {\n    p._appendCommentNode(token, p.openElements.currentTmplContentOrNode);\n}\nfunction appendCommentToRootHtmlElement(p, token) {\n    p._appendCommentNode(token, p.openElements.items[0]);\n}\nfunction appendCommentToDocument(p, token) {\n    p._appendCommentNode(token, p.document);\n}\nfunction stopParsing(p, token) {\n    p.stopped = true;\n    // NOTE: Set end locations for elements that remain on the open element stack.\n    if (token.location) {\n        // NOTE: If we are not in a fragment, `html` and `body` will stay on the stack.\n        // This is a problem, as we might overwrite their end position here.\n        const target = p.fragmentContext ? 0 : 2;\n        for (let i = p.openElements.stackTop; i >= target; i--) {\n            p._setEndLocation(p.openElements.items[i], token);\n        }\n        // Handle `html` and `body`\n        if (!p.fragmentContext && p.openElements.stackTop >= 0) {\n            const htmlElement = p.openElements.items[0];\n            const htmlLocation = p.treeAdapter.getNodeSourceCodeLocation(htmlElement);\n            if (htmlLocation && !htmlLocation.endTag) {\n                p._setEndLocation(htmlElement, token);\n                if (p.openElements.stackTop >= 1) {\n                    const bodyElement = p.openElements.items[1];\n                    const bodyLocation = p.treeAdapter.getNodeSourceCodeLocation(bodyElement);\n                    if (bodyLocation && !bodyLocation.endTag) {\n                        p._setEndLocation(bodyElement, token);\n                    }\n                }\n            }\n        }\n    }\n}\n// The \"initial\" insertion mode\n//------------------------------------------------------------------\nfunction doctypeInInitialMode(p, token) {\n    p._setDocumentType(token);\n    const mode = token.forceQuirks ? DOCUMENT_MODE.QUIRKS : doctype.getDocumentMode(token);\n    if (!doctype.isConforming(token)) {\n        p._err(token, ERR.nonConformingDoctype);\n    }\n    p.treeAdapter.setDocumentMode(p.document, mode);\n    p.insertionMode = InsertionMode.BEFORE_HTML;\n}\nfunction tokenInInitialMode(p, token) {\n    p._err(token, ERR.missingDoctype, true);\n    p.treeAdapter.setDocumentMode(p.document, DOCUMENT_MODE.QUIRKS);\n    p.insertionMode = InsertionMode.BEFORE_HTML;\n    p._processToken(token);\n}\n// The \"before html\" insertion mode\n//------------------------------------------------------------------\nfunction startTagBeforeHtml(p, token) {\n    if (token.tagID === $.HTML) {\n        p._insertElement(token, NS.HTML);\n        p.insertionMode = InsertionMode.BEFORE_HEAD;\n    }\n    else {\n        tokenBeforeHtml(p, token);\n    }\n}\nfunction endTagBeforeHtml(p, token) {\n    const tn = token.tagID;\n    if (tn === $.HTML || tn === $.HEAD || tn === $.BODY || tn === $.BR) {\n        tokenBeforeHtml(p, token);\n    }\n}\nfunction tokenBeforeHtml(p, token) {\n    p._insertFakeRootElement();\n    p.insertionMode = InsertionMode.BEFORE_HEAD;\n    p._processToken(token);\n}\n// The \"before head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagBeforeHead(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.HEAD: {\n            p._insertElement(token, NS.HTML);\n            p.headElement = p.openElements.current;\n            p.insertionMode = InsertionMode.IN_HEAD;\n            break;\n        }\n        default: {\n            tokenBeforeHead(p, token);\n        }\n    }\n}\nfunction endTagBeforeHead(p, token) {\n    const tn = token.tagID;\n    if (tn === $.HEAD || tn === $.BODY || tn === $.HTML || tn === $.BR) {\n        tokenBeforeHead(p, token);\n    }\n    else {\n        p._err(token, ERR.endTagWithoutMatchingOpenElement);\n    }\n}\nfunction tokenBeforeHead(p, token) {\n    p._insertFakeElement(TN.HEAD, $.HEAD);\n    p.headElement = p.openElements.current;\n    p.insertionMode = InsertionMode.IN_HEAD;\n    p._processToken(token);\n}\n// The \"in head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInHead(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.BASE:\n        case $.BASEFONT:\n        case $.BGSOUND:\n        case $.LINK:\n        case $.META: {\n            p._appendElement(token, NS.HTML);\n            token.ackSelfClosing = true;\n            break;\n        }\n        case $.TITLE: {\n            p._switchToTextParsing(token, TokenizerMode.RCDATA);\n            break;\n        }\n        case $.NOSCRIPT: {\n            if (p.options.scriptingEnabled) {\n                p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n            }\n            else {\n                p._insertElement(token, NS.HTML);\n                p.insertionMode = InsertionMode.IN_HEAD_NO_SCRIPT;\n            }\n            break;\n        }\n        case $.NOFRAMES:\n        case $.STYLE: {\n            p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n            break;\n        }\n        case $.SCRIPT: {\n            p._switchToTextParsing(token, TokenizerMode.SCRIPT_DATA);\n            break;\n        }\n        case $.TEMPLATE: {\n            p._insertTemplate(token);\n            p.activeFormattingElements.insertMarker();\n            p.framesetOk = false;\n            p.insertionMode = InsertionMode.IN_TEMPLATE;\n            p.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);\n            break;\n        }\n        case $.HEAD: {\n            p._err(token, ERR.misplacedStartTagForHeadElement);\n            break;\n        }\n        default: {\n            tokenInHead(p, token);\n        }\n    }\n}\nfunction endTagInHead(p, token) {\n    switch (token.tagID) {\n        case $.HEAD: {\n            p.openElements.pop();\n            p.insertionMode = InsertionMode.AFTER_HEAD;\n            break;\n        }\n        case $.BODY:\n        case $.BR:\n        case $.HTML: {\n            tokenInHead(p, token);\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        default: {\n            p._err(token, ERR.endTagWithoutMatchingOpenElement);\n        }\n    }\n}\nfunction templateEndTagInHead(p, token) {\n    if (p.openElements.tmplCount > 0) {\n        p.openElements.generateImpliedEndTagsThoroughly();\n        if (p.openElements.currentTagId !== $.TEMPLATE) {\n            p._err(token, ERR.closingOfElementWithOpenChildElements);\n        }\n        p.openElements.popUntilTagNamePopped($.TEMPLATE);\n        p.activeFormattingElements.clearToLastMarker();\n        p.tmplInsertionModeStack.shift();\n        p._resetInsertionMode();\n    }\n    else {\n        p._err(token, ERR.endTagWithoutMatchingOpenElement);\n    }\n}\nfunction tokenInHead(p, token) {\n    p.openElements.pop();\n    p.insertionMode = InsertionMode.AFTER_HEAD;\n    p._processToken(token);\n}\n// The \"in head no script\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInHeadNoScript(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.BASEFONT:\n        case $.BGSOUND:\n        case $.HEAD:\n        case $.LINK:\n        case $.META:\n        case $.NOFRAMES:\n        case $.STYLE: {\n            startTagInHead(p, token);\n            break;\n        }\n        case $.NOSCRIPT: {\n            p._err(token, ERR.nestedNoscriptInHead);\n            break;\n        }\n        default: {\n            tokenInHeadNoScript(p, token);\n        }\n    }\n}\nfunction endTagInHeadNoScript(p, token) {\n    switch (token.tagID) {\n        case $.NOSCRIPT: {\n            p.openElements.pop();\n            p.insertionMode = InsertionMode.IN_HEAD;\n            break;\n        }\n        case $.BR: {\n            tokenInHeadNoScript(p, token);\n            break;\n        }\n        default: {\n            p._err(token, ERR.endTagWithoutMatchingOpenElement);\n        }\n    }\n}\nfunction tokenInHeadNoScript(p, token) {\n    const errCode = token.type === TokenType.EOF ? ERR.openElementsLeftAfterEof : ERR.disallowedContentInNoscriptInHead;\n    p._err(token, errCode);\n    p.openElements.pop();\n    p.insertionMode = InsertionMode.IN_HEAD;\n    p._processToken(token);\n}\n// The \"after head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterHead(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.BODY: {\n            p._insertElement(token, NS.HTML);\n            p.framesetOk = false;\n            p.insertionMode = InsertionMode.IN_BODY;\n            break;\n        }\n        case $.FRAMESET: {\n            p._insertElement(token, NS.HTML);\n            p.insertionMode = InsertionMode.IN_FRAMESET;\n            break;\n        }\n        case $.BASE:\n        case $.BASEFONT:\n        case $.BGSOUND:\n        case $.LINK:\n        case $.META:\n        case $.NOFRAMES:\n        case $.SCRIPT:\n        case $.STYLE:\n        case $.TEMPLATE:\n        case $.TITLE: {\n            p._err(token, ERR.abandonedHeadElementChild);\n            p.openElements.push(p.headElement, $.HEAD);\n            startTagInHead(p, token);\n            p.openElements.remove(p.headElement);\n            break;\n        }\n        case $.HEAD: {\n            p._err(token, ERR.misplacedStartTagForHeadElement);\n            break;\n        }\n        default: {\n            tokenAfterHead(p, token);\n        }\n    }\n}\nfunction endTagAfterHead(p, token) {\n    switch (token.tagID) {\n        case $.BODY:\n        case $.HTML:\n        case $.BR: {\n            tokenAfterHead(p, token);\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        default: {\n            p._err(token, ERR.endTagWithoutMatchingOpenElement);\n        }\n    }\n}\nfunction tokenAfterHead(p, token) {\n    p._insertFakeElement(TN.BODY, $.BODY);\n    p.insertionMode = InsertionMode.IN_BODY;\n    modeInBody(p, token);\n}\n// The \"in body\" insertion mode\n//------------------------------------------------------------------\nfunction modeInBody(p, token) {\n    switch (token.type) {\n        case TokenType.CHARACTER: {\n            characterInBody(p, token);\n            break;\n        }\n        case TokenType.WHITESPACE_CHARACTER: {\n            whitespaceCharacterInBody(p, token);\n            break;\n        }\n        case TokenType.COMMENT: {\n            appendComment(p, token);\n            break;\n        }\n        case TokenType.START_TAG: {\n            startTagInBody(p, token);\n            break;\n        }\n        case TokenType.END_TAG: {\n            endTagInBody(p, token);\n            break;\n        }\n        case TokenType.EOF: {\n            eofInBody(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\nfunction whitespaceCharacterInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertCharacters(token);\n}\nfunction characterInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertCharacters(token);\n    p.framesetOk = false;\n}\nfunction htmlStartTagInBody(p, token) {\n    if (p.openElements.tmplCount === 0) {\n        p.treeAdapter.adoptAttributes(p.openElements.items[0], token.attrs);\n    }\n}\nfunction bodyStartTagInBody(p, token) {\n    const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n    if (bodyElement && p.openElements.tmplCount === 0) {\n        p.framesetOk = false;\n        p.treeAdapter.adoptAttributes(bodyElement, token.attrs);\n    }\n}\nfunction framesetStartTagInBody(p, token) {\n    const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n    if (p.framesetOk && bodyElement) {\n        p.treeAdapter.detachNode(bodyElement);\n        p.openElements.popAllUpToHtmlElement();\n        p._insertElement(token, NS.HTML);\n        p.insertionMode = InsertionMode.IN_FRAMESET;\n    }\n}\nfunction addressStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, NS.HTML);\n}\nfunction numberedHeaderStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    if (NUMBERED_HEADERS.has(p.openElements.currentTagId)) {\n        p.openElements.pop();\n    }\n    p._insertElement(token, NS.HTML);\n}\nfunction preStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, NS.HTML);\n    //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move\n    //on to the next one. (Newlines at the start of pre blocks are ignored as an authoring convenience.)\n    p.skipNextNewLine = true;\n    p.framesetOk = false;\n}\nfunction formStartTagInBody(p, token) {\n    const inTemplate = p.openElements.tmplCount > 0;\n    if (!p.formElement || inTemplate) {\n        if (p.openElements.hasInButtonScope($.P)) {\n            p._closePElement();\n        }\n        p._insertElement(token, NS.HTML);\n        if (!inTemplate) {\n            p.formElement = p.openElements.current;\n        }\n    }\n}\nfunction listItemStartTagInBody(p, token) {\n    p.framesetOk = false;\n    const tn = token.tagID;\n    for (let i = p.openElements.stackTop; i >= 0; i--) {\n        const elementId = p.openElements.tagIDs[i];\n        if ((tn === $.LI && elementId === $.LI) ||\n            ((tn === $.DD || tn === $.DT) && (elementId === $.DD || elementId === $.DT))) {\n            p.openElements.generateImpliedEndTagsWithExclusion(elementId);\n            p.openElements.popUntilTagNamePopped(elementId);\n            break;\n        }\n        if (elementId !== $.ADDRESS &&\n            elementId !== $.DIV &&\n            elementId !== $.P &&\n            p._isSpecialElement(p.openElements.items[i], elementId)) {\n            break;\n        }\n    }\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, NS.HTML);\n}\nfunction plaintextStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, NS.HTML);\n    p.tokenizer.state = TokenizerMode.PLAINTEXT;\n}\nfunction buttonStartTagInBody(p, token) {\n    if (p.openElements.hasInScope($.BUTTON)) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilTagNamePopped($.BUTTON);\n    }\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.framesetOk = false;\n}\nfunction aStartTagInBody(p, token) {\n    const activeElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(TN.A);\n    if (activeElementEntry) {\n        callAdoptionAgency(p, token);\n        p.openElements.remove(activeElementEntry.element);\n        p.activeFormattingElements.removeEntry(activeElementEntry);\n    }\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\nfunction bStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\nfunction nobrStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    if (p.openElements.hasInScope($.NOBR)) {\n        callAdoptionAgency(p, token);\n        p._reconstructActiveFormattingElements();\n    }\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\nfunction appletStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.insertMarker();\n    p.framesetOk = false;\n}\nfunction tableStartTagInBody(p, token) {\n    if (p.treeAdapter.getDocumentMode(p.document) !== DOCUMENT_MODE.QUIRKS && p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, NS.HTML);\n    p.framesetOk = false;\n    p.insertionMode = InsertionMode.IN_TABLE;\n}\nfunction areaStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._appendElement(token, NS.HTML);\n    p.framesetOk = false;\n    token.ackSelfClosing = true;\n}\nfunction isHiddenInput(token) {\n    const inputType = getTokenAttr(token, ATTRS.TYPE);\n    return inputType != null && inputType.toLowerCase() === HIDDEN_INPUT_TYPE;\n}\nfunction inputStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._appendElement(token, NS.HTML);\n    if (!isHiddenInput(token)) {\n        p.framesetOk = false;\n    }\n    token.ackSelfClosing = true;\n}\nfunction paramStartTagInBody(p, token) {\n    p._appendElement(token, NS.HTML);\n    token.ackSelfClosing = true;\n}\nfunction hrStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._appendElement(token, NS.HTML);\n    p.framesetOk = false;\n    token.ackSelfClosing = true;\n}\nfunction imageStartTagInBody(p, token) {\n    token.tagName = TN.IMG;\n    token.tagID = $.IMG;\n    areaStartTagInBody(p, token);\n}\nfunction textareaStartTagInBody(p, token) {\n    p._insertElement(token, NS.HTML);\n    //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move\n    //on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n    p.skipNextNewLine = true;\n    p.tokenizer.state = TokenizerMode.RCDATA;\n    p.originalInsertionMode = p.insertionMode;\n    p.framesetOk = false;\n    p.insertionMode = InsertionMode.TEXT;\n}\nfunction xmpStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._reconstructActiveFormattingElements();\n    p.framesetOk = false;\n    p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n}\nfunction iframeStartTagInBody(p, token) {\n    p.framesetOk = false;\n    p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n}\n//NOTE: here we assume that we always act as a user agent with enabled plugins/frames, so we parse\n//<noembed>/<noframes> as rawtext.\nfunction rawTextStartTagInBody(p, token) {\n    p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n}\nfunction selectStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.framesetOk = false;\n    p.insertionMode =\n        p.insertionMode === InsertionMode.IN_TABLE ||\n            p.insertionMode === InsertionMode.IN_CAPTION ||\n            p.insertionMode === InsertionMode.IN_TABLE_BODY ||\n            p.insertionMode === InsertionMode.IN_ROW ||\n            p.insertionMode === InsertionMode.IN_CELL\n            ? InsertionMode.IN_SELECT_IN_TABLE\n            : InsertionMode.IN_SELECT;\n}\nfunction optgroupStartTagInBody(p, token) {\n    if (p.openElements.currentTagId === $.OPTION) {\n        p.openElements.pop();\n    }\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n}\nfunction rbStartTagInBody(p, token) {\n    if (p.openElements.hasInScope($.RUBY)) {\n        p.openElements.generateImpliedEndTags();\n    }\n    p._insertElement(token, NS.HTML);\n}\nfunction rtStartTagInBody(p, token) {\n    if (p.openElements.hasInScope($.RUBY)) {\n        p.openElements.generateImpliedEndTagsWithExclusion($.RTC);\n    }\n    p._insertElement(token, NS.HTML);\n}\nfunction mathStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    foreignContent.adjustTokenMathMLAttrs(token);\n    foreignContent.adjustTokenXMLAttrs(token);\n    if (token.selfClosing) {\n        p._appendElement(token, NS.MATHML);\n    }\n    else {\n        p._insertElement(token, NS.MATHML);\n    }\n    token.ackSelfClosing = true;\n}\nfunction svgStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    foreignContent.adjustTokenSVGAttrs(token);\n    foreignContent.adjustTokenXMLAttrs(token);\n    if (token.selfClosing) {\n        p._appendElement(token, NS.SVG);\n    }\n    else {\n        p._insertElement(token, NS.SVG);\n    }\n    token.ackSelfClosing = true;\n}\nfunction genericStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n}\nfunction startTagInBody(p, token) {\n    switch (token.tagID) {\n        case $.I:\n        case $.S:\n        case $.B:\n        case $.U:\n        case $.EM:\n        case $.TT:\n        case $.BIG:\n        case $.CODE:\n        case $.FONT:\n        case $.SMALL:\n        case $.STRIKE:\n        case $.STRONG: {\n            bStartTagInBody(p, token);\n            break;\n        }\n        case $.A: {\n            aStartTagInBody(p, token);\n            break;\n        }\n        case $.H1:\n        case $.H2:\n        case $.H3:\n        case $.H4:\n        case $.H5:\n        case $.H6: {\n            numberedHeaderStartTagInBody(p, token);\n            break;\n        }\n        case $.P:\n        case $.DL:\n        case $.OL:\n        case $.UL:\n        case $.DIV:\n        case $.DIR:\n        case $.NAV:\n        case $.MAIN:\n        case $.MENU:\n        case $.ASIDE:\n        case $.CENTER:\n        case $.FIGURE:\n        case $.FOOTER:\n        case $.HEADER:\n        case $.HGROUP:\n        case $.DIALOG:\n        case $.DETAILS:\n        case $.ADDRESS:\n        case $.ARTICLE:\n        case $.SEARCH:\n        case $.SECTION:\n        case $.SUMMARY:\n        case $.FIELDSET:\n        case $.BLOCKQUOTE:\n        case $.FIGCAPTION: {\n            addressStartTagInBody(p, token);\n            break;\n        }\n        case $.LI:\n        case $.DD:\n        case $.DT: {\n            listItemStartTagInBody(p, token);\n            break;\n        }\n        case $.BR:\n        case $.IMG:\n        case $.WBR:\n        case $.AREA:\n        case $.EMBED:\n        case $.KEYGEN: {\n            areaStartTagInBody(p, token);\n            break;\n        }\n        case $.HR: {\n            hrStartTagInBody(p, token);\n            break;\n        }\n        case $.RB:\n        case $.RTC: {\n            rbStartTagInBody(p, token);\n            break;\n        }\n        case $.RT:\n        case $.RP: {\n            rtStartTagInBody(p, token);\n            break;\n        }\n        case $.PRE:\n        case $.LISTING: {\n            preStartTagInBody(p, token);\n            break;\n        }\n        case $.XMP: {\n            xmpStartTagInBody(p, token);\n            break;\n        }\n        case $.SVG: {\n            svgStartTagInBody(p, token);\n            break;\n        }\n        case $.HTML: {\n            htmlStartTagInBody(p, token);\n            break;\n        }\n        case $.BASE:\n        case $.LINK:\n        case $.META:\n        case $.STYLE:\n        case $.TITLE:\n        case $.SCRIPT:\n        case $.BGSOUND:\n        case $.BASEFONT:\n        case $.TEMPLATE: {\n            startTagInHead(p, token);\n            break;\n        }\n        case $.BODY: {\n            bodyStartTagInBody(p, token);\n            break;\n        }\n        case $.FORM: {\n            formStartTagInBody(p, token);\n            break;\n        }\n        case $.NOBR: {\n            nobrStartTagInBody(p, token);\n            break;\n        }\n        case $.MATH: {\n            mathStartTagInBody(p, token);\n            break;\n        }\n        case $.TABLE: {\n            tableStartTagInBody(p, token);\n            break;\n        }\n        case $.INPUT: {\n            inputStartTagInBody(p, token);\n            break;\n        }\n        case $.PARAM:\n        case $.TRACK:\n        case $.SOURCE: {\n            paramStartTagInBody(p, token);\n            break;\n        }\n        case $.IMAGE: {\n            imageStartTagInBody(p, token);\n            break;\n        }\n        case $.BUTTON: {\n            buttonStartTagInBody(p, token);\n            break;\n        }\n        case $.APPLET:\n        case $.OBJECT:\n        case $.MARQUEE: {\n            appletStartTagInBody(p, token);\n            break;\n        }\n        case $.IFRAME: {\n            iframeStartTagInBody(p, token);\n            break;\n        }\n        case $.SELECT: {\n            selectStartTagInBody(p, token);\n            break;\n        }\n        case $.OPTION:\n        case $.OPTGROUP: {\n            optgroupStartTagInBody(p, token);\n            break;\n        }\n        case $.NOEMBED:\n        case $.NOFRAMES: {\n            rawTextStartTagInBody(p, token);\n            break;\n        }\n        case $.FRAMESET: {\n            framesetStartTagInBody(p, token);\n            break;\n        }\n        case $.TEXTAREA: {\n            textareaStartTagInBody(p, token);\n            break;\n        }\n        case $.NOSCRIPT: {\n            if (p.options.scriptingEnabled) {\n                rawTextStartTagInBody(p, token);\n            }\n            else {\n                genericStartTagInBody(p, token);\n            }\n            break;\n        }\n        case $.PLAINTEXT: {\n            plaintextStartTagInBody(p, token);\n            break;\n        }\n        case $.COL:\n        case $.TH:\n        case $.TD:\n        case $.TR:\n        case $.HEAD:\n        case $.FRAME:\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD:\n        case $.CAPTION:\n        case $.COLGROUP: {\n            // Ignore token\n            break;\n        }\n        default: {\n            genericStartTagInBody(p, token);\n        }\n    }\n}\nfunction bodyEndTagInBody(p, token) {\n    if (p.openElements.hasInScope($.BODY)) {\n        p.insertionMode = InsertionMode.AFTER_BODY;\n        //NOTE: <body> is never popped from the stack, so we need to updated\n        //the end location explicitly.\n        if (p.options.sourceCodeLocationInfo) {\n            const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n            if (bodyElement) {\n                p._setEndLocation(bodyElement, token);\n            }\n        }\n    }\n}\nfunction htmlEndTagInBody(p, token) {\n    if (p.openElements.hasInScope($.BODY)) {\n        p.insertionMode = InsertionMode.AFTER_BODY;\n        endTagAfterBody(p, token);\n    }\n}\nfunction addressEndTagInBody(p, token) {\n    const tn = token.tagID;\n    if (p.openElements.hasInScope(tn)) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilTagNamePopped(tn);\n    }\n}\nfunction formEndTagInBody(p) {\n    const inTemplate = p.openElements.tmplCount > 0;\n    const { formElement } = p;\n    if (!inTemplate) {\n        p.formElement = null;\n    }\n    if ((formElement || inTemplate) && p.openElements.hasInScope($.FORM)) {\n        p.openElements.generateImpliedEndTags();\n        if (inTemplate) {\n            p.openElements.popUntilTagNamePopped($.FORM);\n        }\n        else if (formElement) {\n            p.openElements.remove(formElement);\n        }\n    }\n}\nfunction pEndTagInBody(p) {\n    if (!p.openElements.hasInButtonScope($.P)) {\n        p._insertFakeElement(TN.P, $.P);\n    }\n    p._closePElement();\n}\nfunction liEndTagInBody(p) {\n    if (p.openElements.hasInListItemScope($.LI)) {\n        p.openElements.generateImpliedEndTagsWithExclusion($.LI);\n        p.openElements.popUntilTagNamePopped($.LI);\n    }\n}\nfunction ddEndTagInBody(p, token) {\n    const tn = token.tagID;\n    if (p.openElements.hasInScope(tn)) {\n        p.openElements.generateImpliedEndTagsWithExclusion(tn);\n        p.openElements.popUntilTagNamePopped(tn);\n    }\n}\nfunction numberedHeaderEndTagInBody(p) {\n    if (p.openElements.hasNumberedHeaderInScope()) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilNumberedHeaderPopped();\n    }\n}\nfunction appletEndTagInBody(p, token) {\n    const tn = token.tagID;\n    if (p.openElements.hasInScope(tn)) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilTagNamePopped(tn);\n        p.activeFormattingElements.clearToLastMarker();\n    }\n}\nfunction brEndTagInBody(p) {\n    p._reconstructActiveFormattingElements();\n    p._insertFakeElement(TN.BR, $.BR);\n    p.openElements.pop();\n    p.framesetOk = false;\n}\nfunction genericEndTagInBody(p, token) {\n    const tn = token.tagName;\n    const tid = token.tagID;\n    for (let i = p.openElements.stackTop; i > 0; i--) {\n        const element = p.openElements.items[i];\n        const elementId = p.openElements.tagIDs[i];\n        // Compare the tag name here, as the tag might not be a known tag with an ID.\n        if (tid === elementId && (tid !== $.UNKNOWN || p.treeAdapter.getTagName(element) === tn)) {\n            p.openElements.generateImpliedEndTagsWithExclusion(tid);\n            if (p.openElements.stackTop >= i)\n                p.openElements.shortenToLength(i);\n            break;\n        }\n        if (p._isSpecialElement(element, elementId)) {\n            break;\n        }\n    }\n}\nfunction endTagInBody(p, token) {\n    switch (token.tagID) {\n        case $.A:\n        case $.B:\n        case $.I:\n        case $.S:\n        case $.U:\n        case $.EM:\n        case $.TT:\n        case $.BIG:\n        case $.CODE:\n        case $.FONT:\n        case $.NOBR:\n        case $.SMALL:\n        case $.STRIKE:\n        case $.STRONG: {\n            callAdoptionAgency(p, token);\n            break;\n        }\n        case $.P: {\n            pEndTagInBody(p);\n            break;\n        }\n        case $.DL:\n        case $.UL:\n        case $.OL:\n        case $.DIR:\n        case $.DIV:\n        case $.NAV:\n        case $.PRE:\n        case $.MAIN:\n        case $.MENU:\n        case $.ASIDE:\n        case $.BUTTON:\n        case $.CENTER:\n        case $.FIGURE:\n        case $.FOOTER:\n        case $.HEADER:\n        case $.HGROUP:\n        case $.DIALOG:\n        case $.ADDRESS:\n        case $.ARTICLE:\n        case $.DETAILS:\n        case $.SEARCH:\n        case $.SECTION:\n        case $.SUMMARY:\n        case $.LISTING:\n        case $.FIELDSET:\n        case $.BLOCKQUOTE:\n        case $.FIGCAPTION: {\n            addressEndTagInBody(p, token);\n            break;\n        }\n        case $.LI: {\n            liEndTagInBody(p);\n            break;\n        }\n        case $.DD:\n        case $.DT: {\n            ddEndTagInBody(p, token);\n            break;\n        }\n        case $.H1:\n        case $.H2:\n        case $.H3:\n        case $.H4:\n        case $.H5:\n        case $.H6: {\n            numberedHeaderEndTagInBody(p);\n            break;\n        }\n        case $.BR: {\n            brEndTagInBody(p);\n            break;\n        }\n        case $.BODY: {\n            bodyEndTagInBody(p, token);\n            break;\n        }\n        case $.HTML: {\n            htmlEndTagInBody(p, token);\n            break;\n        }\n        case $.FORM: {\n            formEndTagInBody(p);\n            break;\n        }\n        case $.APPLET:\n        case $.OBJECT:\n        case $.MARQUEE: {\n            appletEndTagInBody(p, token);\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        default: {\n            genericEndTagInBody(p, token);\n        }\n    }\n}\nfunction eofInBody(p, token) {\n    if (p.tmplInsertionModeStack.length > 0) {\n        eofInTemplate(p, token);\n    }\n    else {\n        stopParsing(p, token);\n    }\n}\n// The \"text\" insertion mode\n//------------------------------------------------------------------\nfunction endTagInText(p, token) {\n    var _a;\n    if (token.tagID === $.SCRIPT) {\n        (_a = p.scriptHandler) === null || _a === void 0 ? void 0 : _a.call(p, p.openElements.current);\n    }\n    p.openElements.pop();\n    p.insertionMode = p.originalInsertionMode;\n}\nfunction eofInText(p, token) {\n    p._err(token, ERR.eofInElementThatCanContainOnlyText);\n    p.openElements.pop();\n    p.insertionMode = p.originalInsertionMode;\n    p.onEof(token);\n}\n// The \"in table\" insertion mode\n//------------------------------------------------------------------\nfunction characterInTable(p, token) {\n    if (TABLE_STRUCTURE_TAGS.has(p.openElements.currentTagId)) {\n        p.pendingCharacterTokens.length = 0;\n        p.hasNonWhitespacePendingCharacterToken = false;\n        p.originalInsertionMode = p.insertionMode;\n        p.insertionMode = InsertionMode.IN_TABLE_TEXT;\n        switch (token.type) {\n            case TokenType.CHARACTER: {\n                characterInTableText(p, token);\n                break;\n            }\n            case TokenType.WHITESPACE_CHARACTER: {\n                whitespaceCharacterInTableText(p, token);\n                break;\n            }\n            // Ignore null\n        }\n    }\n    else {\n        tokenInTable(p, token);\n    }\n}\nfunction captionStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p.activeFormattingElements.insertMarker();\n    p._insertElement(token, NS.HTML);\n    p.insertionMode = InsertionMode.IN_CAPTION;\n}\nfunction colgroupStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertElement(token, NS.HTML);\n    p.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n}\nfunction colStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertFakeElement(TN.COLGROUP, $.COLGROUP);\n    p.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n    startTagInColumnGroup(p, token);\n}\nfunction tbodyStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertElement(token, NS.HTML);\n    p.insertionMode = InsertionMode.IN_TABLE_BODY;\n}\nfunction tdStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertFakeElement(TN.TBODY, $.TBODY);\n    p.insertionMode = InsertionMode.IN_TABLE_BODY;\n    startTagInTableBody(p, token);\n}\nfunction tableStartTagInTable(p, token) {\n    if (p.openElements.hasInTableScope($.TABLE)) {\n        p.openElements.popUntilTagNamePopped($.TABLE);\n        p._resetInsertionMode();\n        p._processStartTag(token);\n    }\n}\nfunction inputStartTagInTable(p, token) {\n    if (isHiddenInput(token)) {\n        p._appendElement(token, NS.HTML);\n    }\n    else {\n        tokenInTable(p, token);\n    }\n    token.ackSelfClosing = true;\n}\nfunction formStartTagInTable(p, token) {\n    if (!p.formElement && p.openElements.tmplCount === 0) {\n        p._insertElement(token, NS.HTML);\n        p.formElement = p.openElements.current;\n        p.openElements.pop();\n    }\n}\nfunction startTagInTable(p, token) {\n    switch (token.tagID) {\n        case $.TD:\n        case $.TH:\n        case $.TR: {\n            tdStartTagInTable(p, token);\n            break;\n        }\n        case $.STYLE:\n        case $.SCRIPT:\n        case $.TEMPLATE: {\n            startTagInHead(p, token);\n            break;\n        }\n        case $.COL: {\n            colStartTagInTable(p, token);\n            break;\n        }\n        case $.FORM: {\n            formStartTagInTable(p, token);\n            break;\n        }\n        case $.TABLE: {\n            tableStartTagInTable(p, token);\n            break;\n        }\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD: {\n            tbodyStartTagInTable(p, token);\n            break;\n        }\n        case $.INPUT: {\n            inputStartTagInTable(p, token);\n            break;\n        }\n        case $.CAPTION: {\n            captionStartTagInTable(p, token);\n            break;\n        }\n        case $.COLGROUP: {\n            colgroupStartTagInTable(p, token);\n            break;\n        }\n        default: {\n            tokenInTable(p, token);\n        }\n    }\n}\nfunction endTagInTable(p, token) {\n    switch (token.tagID) {\n        case $.TABLE: {\n            if (p.openElements.hasInTableScope($.TABLE)) {\n                p.openElements.popUntilTagNamePopped($.TABLE);\n                p._resetInsertionMode();\n            }\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        case $.BODY:\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.HTML:\n        case $.TBODY:\n        case $.TD:\n        case $.TFOOT:\n        case $.TH:\n        case $.THEAD:\n        case $.TR: {\n            // Ignore token\n            break;\n        }\n        default: {\n            tokenInTable(p, token);\n        }\n    }\n}\nfunction tokenInTable(p, token) {\n    const savedFosterParentingState = p.fosterParentingEnabled;\n    p.fosterParentingEnabled = true;\n    // Process token in `In Body` mode\n    modeInBody(p, token);\n    p.fosterParentingEnabled = savedFosterParentingState;\n}\n// The \"in table text\" insertion mode\n//------------------------------------------------------------------\nfunction whitespaceCharacterInTableText(p, token) {\n    p.pendingCharacterTokens.push(token);\n}\nfunction characterInTableText(p, token) {\n    p.pendingCharacterTokens.push(token);\n    p.hasNonWhitespacePendingCharacterToken = true;\n}\nfunction tokenInTableText(p, token) {\n    let i = 0;\n    if (p.hasNonWhitespacePendingCharacterToken) {\n        for (; i < p.pendingCharacterTokens.length; i++) {\n            tokenInTable(p, p.pendingCharacterTokens[i]);\n        }\n    }\n    else {\n        for (; i < p.pendingCharacterTokens.length; i++) {\n            p._insertCharacters(p.pendingCharacterTokens[i]);\n        }\n    }\n    p.insertionMode = p.originalInsertionMode;\n    p._processToken(token);\n}\n// The \"in caption\" insertion mode\n//------------------------------------------------------------------\nconst TABLE_VOID_ELEMENTS = new Set([$.CAPTION, $.COL, $.COLGROUP, $.TBODY, $.TD, $.TFOOT, $.TH, $.THEAD, $.TR]);\nfunction startTagInCaption(p, token) {\n    const tn = token.tagID;\n    if (TABLE_VOID_ELEMENTS.has(tn)) {\n        if (p.openElements.hasInTableScope($.CAPTION)) {\n            p.openElements.generateImpliedEndTags();\n            p.openElements.popUntilTagNamePopped($.CAPTION);\n            p.activeFormattingElements.clearToLastMarker();\n            p.insertionMode = InsertionMode.IN_TABLE;\n            startTagInTable(p, token);\n        }\n    }\n    else {\n        startTagInBody(p, token);\n    }\n}\nfunction endTagInCaption(p, token) {\n    const tn = token.tagID;\n    switch (tn) {\n        case $.CAPTION:\n        case $.TABLE: {\n            if (p.openElements.hasInTableScope($.CAPTION)) {\n                p.openElements.generateImpliedEndTags();\n                p.openElements.popUntilTagNamePopped($.CAPTION);\n                p.activeFormattingElements.clearToLastMarker();\n                p.insertionMode = InsertionMode.IN_TABLE;\n                if (tn === $.TABLE) {\n                    endTagInTable(p, token);\n                }\n            }\n            break;\n        }\n        case $.BODY:\n        case $.COL:\n        case $.COLGROUP:\n        case $.HTML:\n        case $.TBODY:\n        case $.TD:\n        case $.TFOOT:\n        case $.TH:\n        case $.THEAD:\n        case $.TR: {\n            // Ignore token\n            break;\n        }\n        default: {\n            endTagInBody(p, token);\n        }\n    }\n}\n// The \"in column group\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInColumnGroup(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.COL: {\n            p._appendElement(token, NS.HTML);\n            token.ackSelfClosing = true;\n            break;\n        }\n        case $.TEMPLATE: {\n            startTagInHead(p, token);\n            break;\n        }\n        default: {\n            tokenInColumnGroup(p, token);\n        }\n    }\n}\nfunction endTagInColumnGroup(p, token) {\n    switch (token.tagID) {\n        case $.COLGROUP: {\n            if (p.openElements.currentTagId === $.COLGROUP) {\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE;\n            }\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        case $.COL: {\n            // Ignore token\n            break;\n        }\n        default: {\n            tokenInColumnGroup(p, token);\n        }\n    }\n}\nfunction tokenInColumnGroup(p, token) {\n    if (p.openElements.currentTagId === $.COLGROUP) {\n        p.openElements.pop();\n        p.insertionMode = InsertionMode.IN_TABLE;\n        p._processToken(token);\n    }\n}\n// The \"in table body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInTableBody(p, token) {\n    switch (token.tagID) {\n        case $.TR: {\n            p.openElements.clearBackToTableBodyContext();\n            p._insertElement(token, NS.HTML);\n            p.insertionMode = InsertionMode.IN_ROW;\n            break;\n        }\n        case $.TH:\n        case $.TD: {\n            p.openElements.clearBackToTableBodyContext();\n            p._insertFakeElement(TN.TR, $.TR);\n            p.insertionMode = InsertionMode.IN_ROW;\n            startTagInRow(p, token);\n            break;\n        }\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD: {\n            if (p.openElements.hasTableBodyContextInTableScope()) {\n                p.openElements.clearBackToTableBodyContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE;\n                startTagInTable(p, token);\n            }\n            break;\n        }\n        default: {\n            startTagInTable(p, token);\n        }\n    }\n}\nfunction endTagInTableBody(p, token) {\n    const tn = token.tagID;\n    switch (token.tagID) {\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD: {\n            if (p.openElements.hasInTableScope(tn)) {\n                p.openElements.clearBackToTableBodyContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE;\n            }\n            break;\n        }\n        case $.TABLE: {\n            if (p.openElements.hasTableBodyContextInTableScope()) {\n                p.openElements.clearBackToTableBodyContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE;\n                endTagInTable(p, token);\n            }\n            break;\n        }\n        case $.BODY:\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.HTML:\n        case $.TD:\n        case $.TH:\n        case $.TR: {\n            // Ignore token\n            break;\n        }\n        default: {\n            endTagInTable(p, token);\n        }\n    }\n}\n// The \"in row\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInRow(p, token) {\n    switch (token.tagID) {\n        case $.TH:\n        case $.TD: {\n            p.openElements.clearBackToTableRowContext();\n            p._insertElement(token, NS.HTML);\n            p.insertionMode = InsertionMode.IN_CELL;\n            p.activeFormattingElements.insertMarker();\n            break;\n        }\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD:\n        case $.TR: {\n            if (p.openElements.hasInTableScope($.TR)) {\n                p.openElements.clearBackToTableRowContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE_BODY;\n                startTagInTableBody(p, token);\n            }\n            break;\n        }\n        default: {\n            startTagInTable(p, token);\n        }\n    }\n}\nfunction endTagInRow(p, token) {\n    switch (token.tagID) {\n        case $.TR: {\n            if (p.openElements.hasInTableScope($.TR)) {\n                p.openElements.clearBackToTableRowContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE_BODY;\n            }\n            break;\n        }\n        case $.TABLE: {\n            if (p.openElements.hasInTableScope($.TR)) {\n                p.openElements.clearBackToTableRowContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE_BODY;\n                endTagInTableBody(p, token);\n            }\n            break;\n        }\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD: {\n            if (p.openElements.hasInTableScope(token.tagID) || p.openElements.hasInTableScope($.TR)) {\n                p.openElements.clearBackToTableRowContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE_BODY;\n                endTagInTableBody(p, token);\n            }\n            break;\n        }\n        case $.BODY:\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.HTML:\n        case $.TD:\n        case $.TH: {\n            // Ignore end tag\n            break;\n        }\n        default: {\n            endTagInTable(p, token);\n        }\n    }\n}\n// The \"in cell\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInCell(p, token) {\n    const tn = token.tagID;\n    if (TABLE_VOID_ELEMENTS.has(tn)) {\n        if (p.openElements.hasInTableScope($.TD) || p.openElements.hasInTableScope($.TH)) {\n            p._closeTableCell();\n            startTagInRow(p, token);\n        }\n    }\n    else {\n        startTagInBody(p, token);\n    }\n}\nfunction endTagInCell(p, token) {\n    const tn = token.tagID;\n    switch (tn) {\n        case $.TD:\n        case $.TH: {\n            if (p.openElements.hasInTableScope(tn)) {\n                p.openElements.generateImpliedEndTags();\n                p.openElements.popUntilTagNamePopped(tn);\n                p.activeFormattingElements.clearToLastMarker();\n                p.insertionMode = InsertionMode.IN_ROW;\n            }\n            break;\n        }\n        case $.TABLE:\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD:\n        case $.TR: {\n            if (p.openElements.hasInTableScope(tn)) {\n                p._closeTableCell();\n                endTagInRow(p, token);\n            }\n            break;\n        }\n        case $.BODY:\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.HTML: {\n            // Ignore token\n            break;\n        }\n        default: {\n            endTagInBody(p, token);\n        }\n    }\n}\n// The \"in select\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInSelect(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.OPTION: {\n            if (p.openElements.currentTagId === $.OPTION) {\n                p.openElements.pop();\n            }\n            p._insertElement(token, NS.HTML);\n            break;\n        }\n        case $.OPTGROUP: {\n            if (p.openElements.currentTagId === $.OPTION) {\n                p.openElements.pop();\n            }\n            if (p.openElements.currentTagId === $.OPTGROUP) {\n                p.openElements.pop();\n            }\n            p._insertElement(token, NS.HTML);\n            break;\n        }\n        case $.HR: {\n            if (p.openElements.currentTagId === $.OPTION) {\n                p.openElements.pop();\n            }\n            if (p.openElements.currentTagId === $.OPTGROUP) {\n                p.openElements.pop();\n            }\n            p._appendElement(token, NS.HTML);\n            token.ackSelfClosing = true;\n            break;\n        }\n        case $.INPUT:\n        case $.KEYGEN:\n        case $.TEXTAREA:\n        case $.SELECT: {\n            if (p.openElements.hasInSelectScope($.SELECT)) {\n                p.openElements.popUntilTagNamePopped($.SELECT);\n                p._resetInsertionMode();\n                if (token.tagID !== $.SELECT) {\n                    p._processStartTag(token);\n                }\n            }\n            break;\n        }\n        case $.SCRIPT:\n        case $.TEMPLATE: {\n            startTagInHead(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\nfunction endTagInSelect(p, token) {\n    switch (token.tagID) {\n        case $.OPTGROUP: {\n            if (p.openElements.stackTop > 0 &&\n                p.openElements.currentTagId === $.OPTION &&\n                p.openElements.tagIDs[p.openElements.stackTop - 1] === $.OPTGROUP) {\n                p.openElements.pop();\n            }\n            if (p.openElements.currentTagId === $.OPTGROUP) {\n                p.openElements.pop();\n            }\n            break;\n        }\n        case $.OPTION: {\n            if (p.openElements.currentTagId === $.OPTION) {\n                p.openElements.pop();\n            }\n            break;\n        }\n        case $.SELECT: {\n            if (p.openElements.hasInSelectScope($.SELECT)) {\n                p.openElements.popUntilTagNamePopped($.SELECT);\n                p._resetInsertionMode();\n            }\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\n// The \"in select in table\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInSelectInTable(p, token) {\n    const tn = token.tagID;\n    if (tn === $.CAPTION ||\n        tn === $.TABLE ||\n        tn === $.TBODY ||\n        tn === $.TFOOT ||\n        tn === $.THEAD ||\n        tn === $.TR ||\n        tn === $.TD ||\n        tn === $.TH) {\n        p.openElements.popUntilTagNamePopped($.SELECT);\n        p._resetInsertionMode();\n        p._processStartTag(token);\n    }\n    else {\n        startTagInSelect(p, token);\n    }\n}\nfunction endTagInSelectInTable(p, token) {\n    const tn = token.tagID;\n    if (tn === $.CAPTION ||\n        tn === $.TABLE ||\n        tn === $.TBODY ||\n        tn === $.TFOOT ||\n        tn === $.THEAD ||\n        tn === $.TR ||\n        tn === $.TD ||\n        tn === $.TH) {\n        if (p.openElements.hasInTableScope(tn)) {\n            p.openElements.popUntilTagNamePopped($.SELECT);\n            p._resetInsertionMode();\n            p.onEndTag(token);\n        }\n    }\n    else {\n        endTagInSelect(p, token);\n    }\n}\n// The \"in template\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInTemplate(p, token) {\n    switch (token.tagID) {\n        // First, handle tags that can start without a mode change\n        case $.BASE:\n        case $.BASEFONT:\n        case $.BGSOUND:\n        case $.LINK:\n        case $.META:\n        case $.NOFRAMES:\n        case $.SCRIPT:\n        case $.STYLE:\n        case $.TEMPLATE:\n        case $.TITLE: {\n            startTagInHead(p, token);\n            break;\n        }\n        // Re-process the token in the appropriate mode\n        case $.CAPTION:\n        case $.COLGROUP:\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD: {\n            p.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE;\n            p.insertionMode = InsertionMode.IN_TABLE;\n            startTagInTable(p, token);\n            break;\n        }\n        case $.COL: {\n            p.tmplInsertionModeStack[0] = InsertionMode.IN_COLUMN_GROUP;\n            p.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n            startTagInColumnGroup(p, token);\n            break;\n        }\n        case $.TR: {\n            p.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE_BODY;\n            p.insertionMode = InsertionMode.IN_TABLE_BODY;\n            startTagInTableBody(p, token);\n            break;\n        }\n        case $.TD:\n        case $.TH: {\n            p.tmplInsertionModeStack[0] = InsertionMode.IN_ROW;\n            p.insertionMode = InsertionMode.IN_ROW;\n            startTagInRow(p, token);\n            break;\n        }\n        default: {\n            p.tmplInsertionModeStack[0] = InsertionMode.IN_BODY;\n            p.insertionMode = InsertionMode.IN_BODY;\n            startTagInBody(p, token);\n        }\n    }\n}\nfunction endTagInTemplate(p, token) {\n    if (token.tagID === $.TEMPLATE) {\n        templateEndTagInHead(p, token);\n    }\n}\nfunction eofInTemplate(p, token) {\n    if (p.openElements.tmplCount > 0) {\n        p.openElements.popUntilTagNamePopped($.TEMPLATE);\n        p.activeFormattingElements.clearToLastMarker();\n        p.tmplInsertionModeStack.shift();\n        p._resetInsertionMode();\n        p.onEof(token);\n    }\n    else {\n        stopParsing(p, token);\n    }\n}\n// The \"after body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterBody(p, token) {\n    if (token.tagID === $.HTML) {\n        startTagInBody(p, token);\n    }\n    else {\n        tokenAfterBody(p, token);\n    }\n}\nfunction endTagAfterBody(p, token) {\n    var _a;\n    if (token.tagID === $.HTML) {\n        if (!p.fragmentContext) {\n            p.insertionMode = InsertionMode.AFTER_AFTER_BODY;\n        }\n        //NOTE: <html> is never popped from the stack, so we need to updated\n        //the end location explicitly.\n        if (p.options.sourceCodeLocationInfo && p.openElements.tagIDs[0] === $.HTML) {\n            p._setEndLocation(p.openElements.items[0], token);\n            // Update the body element, if it doesn't have an end tag\n            const bodyElement = p.openElements.items[1];\n            if (bodyElement && !((_a = p.treeAdapter.getNodeSourceCodeLocation(bodyElement)) === null || _a === void 0 ? void 0 : _a.endTag)) {\n                p._setEndLocation(bodyElement, token);\n            }\n        }\n    }\n    else {\n        tokenAfterBody(p, token);\n    }\n}\nfunction tokenAfterBody(p, token) {\n    p.insertionMode = InsertionMode.IN_BODY;\n    modeInBody(p, token);\n}\n// The \"in frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInFrameset(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.FRAMESET: {\n            p._insertElement(token, NS.HTML);\n            break;\n        }\n        case $.FRAME: {\n            p._appendElement(token, NS.HTML);\n            token.ackSelfClosing = true;\n            break;\n        }\n        case $.NOFRAMES: {\n            startTagInHead(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\nfunction endTagInFrameset(p, token) {\n    if (token.tagID === $.FRAMESET && !p.openElements.isRootHtmlElementCurrent()) {\n        p.openElements.pop();\n        if (!p.fragmentContext && p.openElements.currentTagId !== $.FRAMESET) {\n            p.insertionMode = InsertionMode.AFTER_FRAMESET;\n        }\n    }\n}\n// The \"after frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterFrameset(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.NOFRAMES: {\n            startTagInHead(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\nfunction endTagAfterFrameset(p, token) {\n    if (token.tagID === $.HTML) {\n        p.insertionMode = InsertionMode.AFTER_AFTER_FRAMESET;\n    }\n}\n// The \"after after body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterAfterBody(p, token) {\n    if (token.tagID === $.HTML) {\n        startTagInBody(p, token);\n    }\n    else {\n        tokenAfterAfterBody(p, token);\n    }\n}\nfunction tokenAfterAfterBody(p, token) {\n    p.insertionMode = InsertionMode.IN_BODY;\n    modeInBody(p, token);\n}\n// The \"after after frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterAfterFrameset(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.NOFRAMES: {\n            startTagInHead(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\n// The rules for parsing tokens in foreign content\n//------------------------------------------------------------------\nfunction nullCharacterInForeignContent(p, token) {\n    token.chars = unicode.REPLACEMENT_CHARACTER;\n    p._insertCharacters(token);\n}\nfunction characterInForeignContent(p, token) {\n    p._insertCharacters(token);\n    p.framesetOk = false;\n}\nfunction popUntilHtmlOrIntegrationPoint(p) {\n    while (p.treeAdapter.getNamespaceURI(p.openElements.current) !== NS.HTML &&\n        !p._isIntegrationPoint(p.openElements.currentTagId, p.openElements.current)) {\n        p.openElements.pop();\n    }\n}\nfunction startTagInForeignContent(p, token) {\n    if (foreignContent.causesExit(token)) {\n        popUntilHtmlOrIntegrationPoint(p);\n        p._startTagOutsideForeignContent(token);\n    }\n    else {\n        const current = p._getAdjustedCurrentElement();\n        const currentNs = p.treeAdapter.getNamespaceURI(current);\n        if (currentNs === NS.MATHML) {\n            foreignContent.adjustTokenMathMLAttrs(token);\n        }\n        else if (currentNs === NS.SVG) {\n            foreignContent.adjustTokenSVGTagName(token);\n            foreignContent.adjustTokenSVGAttrs(token);\n        }\n        foreignContent.adjustTokenXMLAttrs(token);\n        if (token.selfClosing) {\n            p._appendElement(token, currentNs);\n        }\n        else {\n            p._insertElement(token, currentNs);\n        }\n        token.ackSelfClosing = true;\n    }\n}\nfunction endTagInForeignContent(p, token) {\n    if (token.tagID === $.P || token.tagID === $.BR) {\n        popUntilHtmlOrIntegrationPoint(p);\n        p._endTagOutsideForeignContent(token);\n        return;\n    }\n    for (let i = p.openElements.stackTop; i > 0; i--) {\n        const element = p.openElements.items[i];\n        if (p.treeAdapter.getNamespaceURI(element) === NS.HTML) {\n            p._endTagOutsideForeignContent(token);\n            break;\n        }\n        const tagName = p.treeAdapter.getTagName(element);\n        if (tagName.toLowerCase() === token.tagName) {\n            //NOTE: update the token tag name for `_setEndLocation`.\n            token.tagName = tagName;\n            p.openElements.shortenToLength(i);\n            break;\n        }\n    }\n}\n",null,"import { TAG_NAMES as $, NS, hasUnescapedText } from '../common/html.js';\nimport { escapeText, escapeAttribute } from 'entities/lib/escape.js';\nimport { defaultTreeAdapter } from '../tree-adapters/default.js';\n// Sets\nconst VOID_ELEMENTS = new Set([\n    $.AREA,\n    $.BASE,\n    $.BASEFONT,\n    $.BGSOUND,\n    $.BR,\n    $.COL,\n    $.EMBED,\n    $.FRAME,\n    $.HR,\n    $.IMG,\n    $.INPUT,\n    $.KEYGEN,\n    $.LINK,\n    $.META,\n    $.PARAM,\n    $.SOURCE,\n    $.TRACK,\n    $.WBR,\n]);\nfunction isVoidElement(node, options) {\n    return (options.treeAdapter.isElementNode(node) &&\n        options.treeAdapter.getNamespaceURI(node) === NS.HTML &&\n        VOID_ELEMENTS.has(options.treeAdapter.getTagName(node)));\n}\nconst defaultOpts = { treeAdapter: defaultTreeAdapter, scriptingEnabled: true };\n/**\n * Serializes an AST node to an HTML string.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parse('<!DOCTYPE html><html><head></head><body>Hi there!</body></html>');\n *\n * // Serializes a document.\n * const html = parse5.serialize(document);\n *\n * // Serializes the <html> element content.\n * const str = parse5.serialize(document.childNodes[1]);\n *\n * console.log(str); //> '<head></head><body>Hi there!</body>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */\nexport function serialize(node, options) {\n    const opts = { ...defaultOpts, ...options };\n    if (isVoidElement(node, opts)) {\n        return '';\n    }\n    return serializeChildNodes(node, opts);\n}\n/**\n * Serializes an AST element node to an HTML string, including the element node.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parseFragment('<div>Hello, <b>world</b>!</div>');\n *\n * // Serializes the <div> element.\n * const str = parse5.serializeOuter(document.childNodes[0]);\n *\n * console.log(str); //> '<div>Hello, <b>world</b>!</div>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */\nexport function serializeOuter(node, options) {\n    const opts = { ...defaultOpts, ...options };\n    return serializeNode(node, opts);\n}\nfunction serializeChildNodes(parentNode, options) {\n    let html = '';\n    // Get container of the child nodes\n    const container = options.treeAdapter.isElementNode(parentNode) &&\n        options.treeAdapter.getTagName(parentNode) === $.TEMPLATE &&\n        options.treeAdapter.getNamespaceURI(parentNode) === NS.HTML\n        ? options.treeAdapter.getTemplateContent(parentNode)\n        : parentNode;\n    const childNodes = options.treeAdapter.getChildNodes(container);\n    if (childNodes) {\n        for (const currentNode of childNodes) {\n            html += serializeNode(currentNode, options);\n        }\n    }\n    return html;\n}\nfunction serializeNode(node, options) {\n    if (options.treeAdapter.isElementNode(node)) {\n        return serializeElement(node, options);\n    }\n    if (options.treeAdapter.isTextNode(node)) {\n        return serializeTextNode(node, options);\n    }\n    if (options.treeAdapter.isCommentNode(node)) {\n        return serializeCommentNode(node, options);\n    }\n    if (options.treeAdapter.isDocumentTypeNode(node)) {\n        return serializeDocumentTypeNode(node, options);\n    }\n    // Return an empty string for unknown nodes\n    return '';\n}\nfunction serializeElement(node, options) {\n    const tn = options.treeAdapter.getTagName(node);\n    return `<${tn}${serializeAttributes(node, options)}>${isVoidElement(node, options) ? '' : `${serializeChildNodes(node, options)}</${tn}>`}`;\n}\nfunction serializeAttributes(node, { treeAdapter }) {\n    let html = '';\n    for (const attr of treeAdapter.getAttrList(node)) {\n        html += ' ';\n        if (attr.namespace) {\n            switch (attr.namespace) {\n                case NS.XML: {\n                    html += `xml:${attr.name}`;\n                    break;\n                }\n                case NS.XMLNS: {\n                    if (attr.name !== 'xmlns') {\n                        html += 'xmlns:';\n                    }\n                    html += attr.name;\n                    break;\n                }\n                case NS.XLINK: {\n                    html += `xlink:${attr.name}`;\n                    break;\n                }\n                default: {\n                    html += `${attr.prefix}:${attr.name}`;\n                }\n            }\n        }\n        else {\n            html += attr.name;\n        }\n        html += `=\"${escapeAttribute(attr.value)}\"`;\n    }\n    return html;\n}\nfunction serializeTextNode(node, options) {\n    const { treeAdapter } = options;\n    const content = treeAdapter.getTextNodeContent(node);\n    const parent = treeAdapter.getParentNode(node);\n    const parentTn = parent && treeAdapter.isElementNode(parent) && treeAdapter.getTagName(parent);\n    return parentTn &&\n        treeAdapter.getNamespaceURI(parent) === NS.HTML &&\n        hasUnescapedText(parentTn, options.scriptingEnabled)\n        ? content\n        : escapeText(content);\n}\nfunction serializeCommentNode(node, { treeAdapter }) {\n    return `<!--${treeAdapter.getCommentNodeContent(node)}-->`;\n}\nfunction serializeDocumentTypeNode(node, { treeAdapter }) {\n    return `<!DOCTYPE ${treeAdapter.getDocumentTypeNodeName(node)}>`;\n}\n","/**\n * @import {Options} from 'hast-util-raw'\n * @import {Comment, Doctype, Element, Nodes, RootContent, Root, Text} from 'hast'\n * @import {Raw} from 'mdast-util-to-hast'\n * @import {DefaultTreeAdapterMap, ParserOptions} from 'parse5'\n * @import {Point} from 'unist'\n */\n\n/**\n * @typedef State\n *   Info passed around about the current state.\n * @property {(node: Nodes) => undefined} handle\n *   Add a hast node to the parser.\n * @property {Options} options\n *   User configuration.\n * @property {Parser<DefaultTreeAdapterMap>} parser\n *   Current parser.\n * @property {boolean} stitches\n *   Whether there are stitches.\n */\n\n/**\n * @typedef Stitch\n *   Custom comment-like value we pass through parse5, which contains a\n *   replacement node that we’ll swap back in afterwards.\n * @property {'comment'} type\n *   Node type.\n * @property {{stitch: Nodes}} value\n *   Replacement value.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {fromParse5} from 'hast-util-from-parse5'\nimport {toParse5} from 'hast-util-to-parse5'\nimport {htmlVoidElements} from 'html-void-elements'\nimport {Parser, Token, TokenizerMode, html} from 'parse5'\nimport {pointEnd, pointStart} from 'unist-util-position'\nimport {visit} from 'unist-util-visit'\nimport {webNamespaces} from 'web-namespaces'\nimport {zwitch} from 'zwitch'\n\nconst gfmTagfilterExpression =\n  /<(\\/?)(iframe|noembed|noframes|plaintext|script|style|textarea|title|xmp)(?=[\\t\\n\\f\\r />])/gi\n\n// Node types associated with MDX.\n// <https://github.com/mdx-js/mdx/blob/8a56312/packages/mdx/lib/node-types.js>\nconst knownMdxNames = new Set([\n  'mdxFlowExpression',\n  'mdxJsxFlowElement',\n  'mdxJsxTextElement',\n  'mdxTextExpression',\n  'mdxjsEsm'\n])\n\n/** @type {ParserOptions<DefaultTreeAdapterMap>} */\nconst parseOptions = {sourceCodeLocationInfo: true, scriptingEnabled: false}\n\n/**\n * Pass a hast tree through an HTML parser, which will fix nesting, and turn\n * raw nodes into actual nodes.\n *\n * @param {Nodes} tree\n *   Original hast tree to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {Nodes}\n *   Parsed again tree.\n */\nexport function raw(tree, options) {\n  const document = documentMode(tree)\n  /** @type {(node: Nodes, state: State) => undefined} */\n  const one = zwitch('type', {\n    handlers: {root, element, text, comment, doctype, raw: handleRaw},\n    unknown\n  })\n\n  /** @type {State} */\n  const state = {\n    parser: document\n      ? new Parser(parseOptions)\n      : Parser.getFragmentParser(undefined, parseOptions),\n    handle(node) {\n      one(node, state)\n    },\n    stitches: false,\n    options: options || {}\n  }\n\n  one(tree, state)\n  resetTokenizer(state, pointStart())\n\n  const p5 = document ? state.parser.document : state.parser.getFragment()\n  const result = fromParse5(p5, {\n    // To do: support `space`?\n    file: state.options.file\n  })\n\n  if (state.stitches) {\n    visit(result, 'comment', function (node, index, parent) {\n      const stitch = /** @type {Stitch} */ (/** @type {unknown} */ (node))\n      if (stitch.value.stitch && parent && index !== undefined) {\n        /** @type {Array<RootContent>} */\n        const siblings = parent.children\n        // @ts-expect-error: assume the stitch is allowed.\n        siblings[index] = stitch.value.stitch\n        return index\n      }\n    })\n  }\n\n  // Unpack if possible and when not given a `root`.\n  if (\n    result.type === 'root' &&\n    result.children.length === 1 &&\n    result.children[0].type === tree.type\n  ) {\n    return result.children[0]\n  }\n\n  return result\n}\n\n/**\n * Transform all nodes\n *\n * @param {Array<RootContent>} nodes\n *   hast content.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction all(nodes, state) {\n  let index = -1\n\n  /* istanbul ignore else - invalid nodes, see rehypejs/rehype-raw#7. */\n  if (nodes) {\n    while (++index < nodes.length) {\n      state.handle(nodes[index])\n    }\n  }\n}\n\n/**\n * Transform a root.\n *\n * @param {Root} node\n *   hast root node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction root(node, state) {\n  all(node.children, state)\n}\n\n/**\n * Transform an element.\n *\n * @param {Element} node\n *   hast element node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction element(node, state) {\n  startTag(node, state)\n\n  all(node.children, state)\n\n  endTag(node, state)\n}\n\n/**\n * Transform a text.\n *\n * @param {Text} node\n *   hast text node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction text(node, state) {\n  // Allow `DATA` through `PLAINTEXT`,\n  // but when hanging in a tag for example,\n  // switch back to `DATA`.\n  // Note: `State` is not exposed by `parse5`, so these numbers are fragile.\n  // See: <https://github.com/inikulin/parse5/blob/46cba43/packages/parse5/lib/tokenizer/index.ts#L58>\n  if (state.parser.tokenizer.state > 4) {\n    state.parser.tokenizer.state = 0\n  }\n\n  /** @type {Token.CharacterToken} */\n  const token = {\n    type: Token.TokenType.CHARACTER,\n    chars: node.value,\n    location: createParse5Location(node)\n  }\n\n  resetTokenizer(state, pointStart(node))\n  // @ts-expect-error: private.\n  state.parser.currentToken = token\n  // @ts-expect-error: private.\n  state.parser._processToken(state.parser.currentToken)\n}\n\n/**\n * Transform a doctype.\n *\n * @param {Doctype} node\n *   hast doctype node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction doctype(node, state) {\n  /** @type {Token.DoctypeToken} */\n  const token = {\n    type: Token.TokenType.DOCTYPE,\n    name: 'html',\n    forceQuirks: false,\n    publicId: '',\n    systemId: '',\n    location: createParse5Location(node)\n  }\n\n  resetTokenizer(state, pointStart(node))\n  // @ts-expect-error: private.\n  state.parser.currentToken = token\n  // @ts-expect-error: private.\n  state.parser._processToken(state.parser.currentToken)\n}\n\n/**\n * Transform a stitch.\n *\n * @param {Nodes} node\n *   unknown node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction stitch(node, state) {\n  // Mark that there are stitches, so we need to walk the tree and revert them.\n  state.stitches = true\n\n  /** @type {Nodes} */\n  const clone = cloneWithoutChildren(node)\n\n  // Recurse, because to somewhat handle `[<x>]</x>` (where `[]` denotes the\n  // passed through node).\n  if ('children' in node && 'children' in clone) {\n    // Root in root out.\n    const fakeRoot = /** @type {Root} */ (\n      raw({type: 'root', children: node.children}, state.options)\n    )\n    clone.children = fakeRoot.children\n  }\n\n  // Hack: `value` is supposed to be a string, but as none of the tools\n  // (`parse5` or `hast-util-from-parse5`) looks at it, we can pass nodes\n  // through.\n  comment({type: 'comment', value: {stitch: clone}}, state)\n}\n\n/**\n * Transform a comment (or stitch).\n *\n * @param {Comment | Stitch} node\n *   hast comment node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction comment(node, state) {\n  /** @type {string} */\n  // @ts-expect-error: we pass stitches through.\n  const data = node.value\n\n  /** @type {Token.CommentToken} */\n  const token = {\n    type: Token.TokenType.COMMENT,\n    data,\n    location: createParse5Location(node)\n  }\n  resetTokenizer(state, pointStart(node))\n  // @ts-expect-error: private.\n  state.parser.currentToken = token\n  // @ts-expect-error: private.\n  state.parser._processToken(state.parser.currentToken)\n}\n\n/**\n * Transform a raw node.\n *\n * @param {Raw} node\n *   hast raw node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction handleRaw(node, state) {\n  // Reset preprocessor:\n  // See: <https://github.com/inikulin/parse5/blob/6f7ca60/packages/parse5/lib/tokenizer/preprocessor.ts#L18-L31>.\n  state.parser.tokenizer.preprocessor.html = ''\n  state.parser.tokenizer.preprocessor.pos = -1\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.preprocessor.lastGapPos = -2\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.preprocessor.gapStack = []\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.preprocessor.skipNextNewLine = false\n  state.parser.tokenizer.preprocessor.lastChunkWritten = false\n  state.parser.tokenizer.preprocessor.endOfChunkHit = false\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.preprocessor.isEol = false\n\n  // Now pass `node.value`.\n  setPoint(state, pointStart(node))\n\n  state.parser.tokenizer.write(\n    state.options.tagfilter\n      ? node.value.replace(gfmTagfilterExpression, '&lt;$1$2')\n      : node.value,\n    false\n  )\n  // @ts-expect-error: private.\n  state.parser.tokenizer._runParsingLoop()\n\n  // Character references hang, so if we ended there, we need to flush\n  // those too.\n  // We reset the preprocessor as if the document ends here.\n  // Then one single call to the relevant state does the trick, parse5\n  // consumes the whole token.\n\n  // Note: `State` is not exposed by `parse5`, so these numbers are fragile.\n  // See: <https://github.com/inikulin/parse5/blob/46cba43/packages/parse5/lib/tokenizer/index.ts#L58>\n  // Note: a change to `parse5`, which breaks this, was merged but not released.\n  // Investigate when it is.\n  // To do: remove next major.\n  /* c8 ignore next 12 -- removed in <https://github.com/inikulin/parse5/pull/897> */\n  if (\n    state.parser.tokenizer.state === 72 /* NAMED_CHARACTER_REFERENCE */ ||\n    // @ts-expect-error: removed.\n    state.parser.tokenizer.state === 78 /* NUMERIC_CHARACTER_REFERENCE_END */\n  ) {\n    state.parser.tokenizer.preprocessor.lastChunkWritten = true\n    /** @type {number} */\n    // @ts-expect-error: private.\n    const cp = state.parser.tokenizer._consume()\n    // @ts-expect-error: private.\n    state.parser.tokenizer._callState(cp)\n  }\n}\n\n/**\n * Crash on an unknown node.\n *\n * @param {unknown} node_\n *   unknown node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Never.\n */\nfunction unknown(node_, state) {\n  const node = /** @type {Nodes} */ (node_)\n\n  if (\n    state.options.passThrough &&\n    state.options.passThrough.includes(node.type)\n  ) {\n    stitch(node, state)\n  } else {\n    let extra = ''\n\n    if (knownMdxNames.has(node.type)) {\n      extra =\n        \". It looks like you are using MDX nodes with `hast-util-raw` (or `rehype-raw`). If you use this because you are using remark or rehype plugins that inject `'html'` nodes, then please raise an issue with that plugin, as its a bad and slow idea. If you use this because you are using markdown syntax, then you have to configure this utility (or plugin) to pass through these nodes (see `passThrough` in docs), but you can also migrate to use the MDX syntax\"\n    }\n\n    throw new Error('Cannot compile `' + node.type + '` node' + extra)\n  }\n}\n\n/**\n * Reset the tokenizer of a parser.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Point | undefined} point\n *   Point.\n * @returns {undefined}\n *   Nothing.\n */\nfunction resetTokenizer(state, point) {\n  setPoint(state, point)\n\n  // Process final characters if they’re still there after hibernating.\n  /** @type {Token.CharacterToken} */\n  // @ts-expect-error: private.\n  const token = state.parser.tokenizer.currentCharacterToken\n\n  if (token && token.location) {\n    token.location.endLine = state.parser.tokenizer.preprocessor.line\n    token.location.endCol = state.parser.tokenizer.preprocessor.col + 1\n    token.location.endOffset = state.parser.tokenizer.preprocessor.offset + 1\n    // @ts-expect-error: private.\n    state.parser.currentToken = token\n    // @ts-expect-error: private.\n    state.parser._processToken(state.parser.currentToken)\n  }\n\n  // Reset tokenizer:\n  // See: <https://github.com/inikulin/parse5/blob/6f7ca60/packages/parse5/lib/tokenizer/index.ts#L187-L223>.\n  // Especially putting it back in the `data` state is useful: some elements,\n  // like textareas and iframes, change the state.\n  // See GH-7.\n  // But also if broken HTML is in `raw`, and then a correct element is given.\n  // See GH-11.\n  // @ts-expect-error: private.\n  state.parser.tokenizer.paused = false\n  // @ts-expect-error: private.\n  state.parser.tokenizer.inLoop = false\n\n  // Note: don’t reset `state`, `inForeignNode`, or `lastStartTagName`, we\n  // manually update those when needed.\n  state.parser.tokenizer.active = false\n  // @ts-expect-error: private.\n  state.parser.tokenizer.returnState = TokenizerMode.DATA\n  // @ts-expect-error: private.\n  state.parser.tokenizer.charRefCode = -1\n  // @ts-expect-error: private.\n  state.parser.tokenizer.consumedAfterSnapshot = -1\n  // @ts-expect-error: private.\n  state.parser.tokenizer.currentLocation = null\n  // @ts-expect-error: private.\n  state.parser.tokenizer.currentCharacterToken = null\n  // @ts-expect-error: private.\n  state.parser.tokenizer.currentToken = null\n  // @ts-expect-error: private.\n  state.parser.tokenizer.currentAttr = {name: '', value: ''}\n}\n\n/**\n * Set current location.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Point | undefined} point\n *   Point.\n * @returns {undefined}\n *   Nothing.\n */\nfunction setPoint(state, point) {\n  if (point && point.offset !== undefined) {\n    /** @type {Token.Location} */\n    const location = {\n      startLine: point.line,\n      startCol: point.column,\n      startOffset: point.offset,\n      endLine: -1,\n      endCol: -1,\n      endOffset: -1\n    }\n\n    // @ts-expect-error: private.\n    // type-coverage:ignore-next-line\n    state.parser.tokenizer.preprocessor.lineStartPos = -point.column + 1 // Looks weird, but ensures we get correct positional info.\n    state.parser.tokenizer.preprocessor.droppedBufferSize = point.offset\n    state.parser.tokenizer.preprocessor.line = point.line\n    // @ts-expect-error: private.\n    state.parser.tokenizer.currentLocation = location\n  }\n}\n\n/**\n * Emit a start tag.\n *\n * @param {Element} node\n *   Element.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction startTag(node, state) {\n  const tagName = node.tagName.toLowerCase()\n\n  // Ignore tags if we’re in plain text.\n  if (state.parser.tokenizer.state === TokenizerMode.PLAINTEXT) return\n\n  resetTokenizer(state, pointStart(node))\n\n  const current = state.parser.openElements.current\n  let ns = 'namespaceURI' in current ? current.namespaceURI : webNamespaces.html\n\n  if (ns === webNamespaces.html && tagName === 'svg') {\n    ns = webNamespaces.svg\n  }\n\n  const result = toParse5(\n    // Shallow clone to not delve into `children`: we only need the attributes.\n    {...node, children: []},\n    {space: ns === webNamespaces.svg ? 'svg' : 'html'}\n  )\n\n  /** @type {Token.TagToken} */\n  const tag = {\n    type: Token.TokenType.START_TAG,\n    tagName,\n    tagID: html.getTagID(tagName),\n    // We always send start and end tags.\n    selfClosing: false,\n    ackSelfClosing: false,\n    // Always element.\n    /* c8 ignore next */\n    attrs: 'attrs' in result ? result.attrs : [],\n    location: createParse5Location(node)\n  }\n\n  // The HTML parsing algorithm works by doing half of the state management in\n  // the tokenizer and half in the parser.\n  // We can’t use the tokenizer here, as we don’t have strings.\n  // So we act *as if* the tokenizer emits tokens:\n\n  // @ts-expect-error: private.\n  state.parser.currentToken = tag\n  // @ts-expect-error: private.\n  state.parser._processToken(state.parser.currentToken)\n\n  // …but then we still need a bunch of work that the tokenizer would normally\n  // do, such as:\n\n  // Set a tag name, similar to how the tokenizer would do it.\n  state.parser.tokenizer.lastStartTagName = tagName\n\n  // `inForeignNode` is correctly set by the parser.\n}\n\n/**\n * Emit an end tag.\n *\n * @param {Element} node\n *   Element.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction endTag(node, state) {\n  const tagName = node.tagName.toLowerCase()\n  // Do not emit closing tags for HTML void elements.\n  if (\n    !state.parser.tokenizer.inForeignNode &&\n    htmlVoidElements.includes(tagName)\n  ) {\n    return\n  }\n\n  // Ignore tags if we’re in plain text.\n  if (state.parser.tokenizer.state === TokenizerMode.PLAINTEXT) return\n\n  resetTokenizer(state, pointEnd(node))\n\n  /** @type {Token.TagToken} */\n  const tag = {\n    type: Token.TokenType.END_TAG,\n    tagName,\n    tagID: html.getTagID(tagName),\n    selfClosing: false,\n    ackSelfClosing: false,\n    attrs: [],\n    location: createParse5Location(node)\n  }\n\n  // The HTML parsing algorithm works by doing half of the state management in\n  // the tokenizer and half in the parser.\n  // We can’t use the tokenizer here, as we don’t have strings.\n  // So we act *as if* the tokenizer emits tokens:\n\n  // @ts-expect-error: private.\n  state.parser.currentToken = tag\n  // @ts-expect-error: private.\n  state.parser._processToken(state.parser.currentToken)\n\n  // …but then we still need a bunch of work that the tokenizer would normally\n  // do, such as:\n\n  // Switch back to the data state after alternative states that don’t accept\n  // tags:\n  if (\n    // Current element is closed.\n    tagName === state.parser.tokenizer.lastStartTagName &&\n    // `<textarea>` and `<title>`\n    (state.parser.tokenizer.state === TokenizerMode.RCDATA ||\n      // `<iframe>`, `<noembed>`, `<noframes>`, `<style>`, `<xmp>`\n      state.parser.tokenizer.state === TokenizerMode.RAWTEXT ||\n      // `<script>`\n      state.parser.tokenizer.state === TokenizerMode.SCRIPT_DATA)\n    // Note: `<plaintext>` not needed, as it’s the last element.\n  ) {\n    state.parser.tokenizer.state = TokenizerMode.DATA\n  }\n}\n\n/**\n * Check if `node` represents a whole document or a fragment.\n *\n * @param {Nodes} node\n *   hast node.\n * @returns {boolean}\n *   Whether this represents a whole document or a fragment.\n */\nfunction documentMode(node) {\n  const head = node.type === 'root' ? node.children[0] : node\n  return Boolean(\n    head &&\n      (head.type === 'doctype' ||\n        (head.type === 'element' && head.tagName.toLowerCase() === 'html'))\n  )\n}\n\n/**\n * Get a `parse5` location from a node.\n *\n * @param {Nodes | Stitch} node\n *   hast node.\n * @returns {Token.Location}\n *   `parse5` location.\n */\nfunction createParse5Location(node) {\n  const start = pointStart(node) || {\n    line: undefined,\n    column: undefined,\n    offset: undefined\n  }\n  const end = pointEnd(node) || {\n    line: undefined,\n    column: undefined,\n    offset: undefined\n  }\n\n  /** @type {Record<keyof Token.Location, number | undefined>} */\n  const location = {\n    startLine: start.line,\n    startCol: start.column,\n    startOffset: start.offset,\n    endLine: end.line,\n    endCol: end.column,\n    endOffset: end.offset\n  }\n\n  // @ts-expect-error: unist point values can be `undefined` in hast, which\n  // `parse5` types don’t want.\n  return location\n}\n\n/**\n * @template {Nodes} NodeType\n *   Node type.\n * @param {NodeType} node\n *   Node to clone.\n * @returns {NodeType}\n *   Cloned node, without children.\n */\nfunction cloneWithoutChildren(node) {\n  return 'children' in node\n    ? structuredClone({...node, children: []})\n    : structuredClone(node)\n}\n","/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast-util-raw').Options} RawOptions\n * @typedef {import('vfile').VFile} VFile\n */\n\n/**\n * @typedef {Omit<RawOptions, 'file'>} Options\n *   Configuration.\n */\n\nimport {raw} from 'hast-util-raw'\n\n/**\n * Parse the tree (and raw nodes) again, keeping positional info okay.\n *\n * @param {Options | null | undefined}  [options]\n *   Configuration (optional).\n * @returns\n *   Transform.\n */\nexport default function rehypeRaw(options) {\n  /**\n   * @param {Root} tree\n   *   Tree.\n   * @param {VFile} file\n   *   File.\n   * @returns {Root}\n   *   New tree.\n   */\n  return function (tree, file) {\n    // Assume root in -> root out.\n    const result = /** @type {Root} */ (raw(tree, {...options, file}))\n    return result\n  }\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n"],"names":["hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","replace","style","TypeError","lineno","column","updatePosition","lines","match","lastIndexOf","position","start","line","node","Position","whitespace","this","end","source","content","errorsList","error","msg","err","Error","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","charAt","type","declaration","prop","val","ret","property","decl","decls","declarations","iterator","styleObject","hasIterator","forEach","env","self","globalThis","deserialize","serialized","$","_","as","out","index","set","unpair","has","get","object","Date","flags","RegExp","map","Map","Set","add","message","BigInt","deserializer","EMPTY","keys","typeOf","asString","includes","shouldSkip","TYPE","serializer","strict","json","pair","entry","valueOf","toJSON","entries","toISOString","serialize","lossy","structuredClone","any","parse","tokens","input","String","indexOf","token","stringify","values","settings","join","padRight","padLeft","ok","unreachable","Schema","normal","space","merge","definitions","assign","own","create","definition","properties","info","DefinedInfo","transform","attributes","mustUseProperty","normalize","attribute","xlink","toLowerCase","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","booleanish","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","number","ariaColIndex","ariaColSpan","ariaControls","spaceSeparated","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","html","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","commaSeparated","acceptCharset","accessKey","action","allow","allowFullScreen","boolean","allowPaymentRequest","allowUserMedia","alt","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","checked","cite","className","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","data","dateTime","decoding","default","defer","dir","dirName","disabled","download","overloadedBoolean","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","href","hrefLang","htmlFor","httpEquiv","id","imageSizes","imageSrcSet","inert","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","label","lang","language","list","loading","loop","low","manifest","max","maxLength","media","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeToggle","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","open","optimum","pattern","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rows","rowSpan","sandbox","scope","scoped","seamless","selected","shadowRootClonable","shadowRootDelegatesFocus","shadowRootMode","shape","size","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","step","tabIndex","title","translate","typeMustMatch","useMap","width","wrap","writingSuggestions","align","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","clear","code","codeBase","codeType","color","compact","declare","event","face","frame","frameBorder","hSpace","leftMargin","link","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","text","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","prefix","results","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","commaOrSpaceSeparated","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","d","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","from","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","handler","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","mask","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","offset","opacity","operator","order","orient","orientation","origin","overflow","overlay","path","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","result","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","string","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","htmlBase","svgBase","valid","dash","cap","find","schema","Type","Info","test","rest","camelcase","toUpperCase","dashes","kebab","$0","checks","types","mark","check","defined","powers","increment","nameRe","nameReJsx","emptyOptions","jsx","empty","hastToReact","StyleToObject","_construct","Parent","args","Class","isNativeReflectConstruct","Reflect","construct","a","apply","instance","Function","bind","setPrototypeOf","_wrapNativeSuper","_cache","undefined","fn","Wrapper","getPrototypeOf","stringifyPosition","point","VFileMessage","causeOrReason","optionsOrParentOrPlace","legacyCause","place","ancestors","cause","ruleId","parent","fatal","file","stack","actual","expected","note","url","emptyMap","dashSomething","tableElements","tableCellElement","docs","toJsxRuntime","tree","Fragment","filePath","development","jsxDEV","props","isStaticChildren","children","pointStart","columnNumber","fileName","lineNumber","developmentCreate","jsxs","productionCreate","state","components","elementAttributeNameCase","evaluater","createEvaluater","ignoreInvalidStyle","passKeys","passNode","stylePropertyNameCase","tableCellAlignToStyle","one","parentSchema","tagName","findComponentFromName","alignValue","createProperty","createElementProps","createChildren","child","thing","addNode","addChildren","pop","element","estree","expression","body","assert","evaluateExpression","crashEstree","mdxExpression","objectExpression","argument","createJsxElementProps","mdxJsxElement","evaluateProgram","mdxEsm","root","countsByName","count","Number","isNaN","commas","spaces","styleToObject","replacer","toCamel","parseStyle","domCasing","cssCasing","transformStyleToCssCasing","transformStylesToCssCasing","allowExpression","identifiers","split","isIdentifierName","computed","Boolean","optional","toDash","$1","urlAttributes","icon","includeImageAlt","includeHtml","all","splice","remove","items","parameters","chunkStart","unshift","SpliceBuffer","initial","left","right","RangeError","setCursor","stop","POSITIVE_INFINITY","reverse","concat","deleteCount","Math","trunc","removed","chunkedPush","item","n","subtokenize","eventsArray","lineIndex","otherIndex","otherEvent","subevents","more","jumps","events","_tokenizer","_isInFirstContentOfListItem","contentType","subcontent","_container","eventIndex","stream","previous","context","startPosition","startPositions","tokenizer","parser","childEvents","gaps","current","adjust","breaks","sliceStream","next","defineSkip","_gfmTasklistFirstContentOfListItem","write","syntaxExtension","extension","hook","constructs","existing","before","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","fromCharCode","factorySpace","effects","limit","enter","consume","exit","tokenize","contentStart","attempt","contentInitial","lineStart","document","childFlow","childToken","lineStartOffset","continued","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","containerContinue","flow","flowContinue","writeToChild","endOfFile","seen","nok","disable","null","blankLine","partial","after","resolve","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","flowInitial","afterConstruct","resolver","resolveAll","createResolver","initializeFactory","field","resolveAllLineSuffixes","notText","atBreak","extraResolver","chunks","bufferIndex","tabs","chunk","charCodeAt","_bufferIndex","_index","thematicBreak","marker","sequence","furtherBlankLines","initialBlankLine","notInCurrentItem","indentConstruct","initialSize","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","blockQuote","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","escape","factoryWhitespace","normalizeIdentifier","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","resolveTo","heading","paragraph","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","createElement","decodeNamedCharacterReference","characterReference","innerHTML","textContent","numeric","characterEscape","lineEnding","called","labelEnd","newEvents","close","_inactive","_balanced","group","insideSpan","labelStart","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","classifyCharacter","attention","openingSequence","closingSequence","use","nextEvents","_close","_open","movePoint","attentionMarkers","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","returnState","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","tailExitIndex","headEnterIndex","between","resolveText","createTokenizer","initialize","columnStart","resolveAllConstructs","constructFactory","addResult","onsuccessfulcheck","accountForPotentialSkip","fields","expandTabs","atTab","serializeChunks","main","view","startIndex","startBufferIndex","endIndex","endBufferIndex","head","shift","sliceChunks","chunkIndex","go","restore","onreturn","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","extensions","combineExtensions","defaultConstructs","search","decodeNumericCharacterReference","base","parseInt","fromCodePoint","characterEscapeOrReference","decode","$2","hex","fromMarkdown","encoding","config","transforms","canContainEols","opener","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcharacterreference","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tokenStack","resume","listStack","prepareList","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","expectingFirstListItemValue","flowCodeInside","depth","setextHeadingSlurpLineEnding","codePointAt","siblings","atHardBreak","inReference","referenceType","ancestor","decodeString","fragment","characterReferenceType","ordered","spread","compiler","postprocess","atCarriageReturn","endPosition","TextDecoder","lastIndex","ceil","preprocess","combined","remarkParse","doc","normalizeUri","skip","encodeURIComponent","defaultFootnoteBackContent","rereferenceIndex","defaultFootnoteBackLabel","referenceIndex","revert","subtype","suffix","contents","listItemLoose","trimLines","last","trimLine","handlers","blockquote","patch","applyData","break","delete","footnoteReference","counter","clobberPrefix","safeId","footnoteOrder","reuseCounter","footnoteCounts","dataFootnoteRef","sup","allowDangerousHtml","imageReference","definitionById","inlineCode","linkReference","loose","listLoose","table","firstRow","tableContent","pointEnd","tableCell","tableRow","cellIndex","cells","cell","toml","ignore","yaml","footnoteDefinition","hName","hChildren","hProperties","defaultUnknownHandler","nodes","trimMarkdownSpaceStart","toHast","footnoteById","defaultHandlers","handle","passThrough","shallow","unknownHandler","visit","createState","foot","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","backReferences","counts","dataFootnoteBackref","tailTail","dataFootnotes","footer","remarkRehype","destination","hastTree","run","bail","Symbol","toStringTag","middleware","callback","fnExpectsCallback","done","exception","then","output","minpath","basename","extname","assertPath","seenNonSlash","firstNonSlashEnd","extnameIndex","dirname","unmatchedSlash","startPart","startDot","preDotState","joined","segments","sep","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","normalizeString","JSON","minproc","cwd","isUrl","fileUrlOrPath","protocol","auth","urlToPath","URL","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","VFile","isUint8Array","history","messages","stored","assertNonEmpty","assertPart","stem","part","CallableInstance","proto","Processor","Compiler","Parser","attachers","freezeIndex","frozen","namespace","transformers","fns","pipeline","middlewareIndex","middelware","trough","attacher","assertUnfrozen","transformer","freeze","realFile","vfile","assertParser","assertCompiler","executor","Promise","reject","parseTree","realDone","compileTree","compileResult","complete","process","assertDone","assertNode","outputTree","resultingTree","addPlugin","addList","addPreset","plugins","plugin","entryIndex","primary","currentPrimary","isPlainObj","unified","asyncName","looksLikeAVFile","emptyPlugins","emptyRemarkRehypeOptions","safeProtocol","deprecations","Markdown","allowedElements","allowElement","disallowedElements","rehypePlugins","remarkPlugins","remarkRehypeOptions","skipHtml","unwrapDisallowed","urlTransform","defaultUrlTransform","processor","deprecation","mdastTree","runSync","colon","questionMark","numberSign","parseSelector","selector","defaultTagName","subvalue","createH","caseSensitive","createAdjustMap","isChild","addProperty","addChild","record","parsePrimitive","finalResult","h","s","cr","lf","webNamespaces","mathml","fromParse5","location","verbose","nodeName","quirksMode","childNodes","loc","indices","toOffset","eol","toPoint","namespaceURI","attrs","sourceCodeLocation","startTag","endTag","opening","closing","createLocation","startLine","startCol","endLine","endCol","endOffset","zwitch","invalid","unknown","currentSchema","parentNode","doctype","publicId","systemId","CODE_POINTS","htmlVoidElements","UNDEFINED_CODE_POINTS","REPLACEMENT_CHARACTER","ERR","SEQUENCES","isSurrogate","cp","isControlCodePoint","isUndefinedCodePoint","TokenType","Preprocessor","lastGapPos","gapStack","skipNextNewLine","lastChunkWritten","endOfChunkHit","bufferWaterline","isEol","lineStartPos","droppedBufferSize","lastErrOffset","cpOffset","col","onParseError","getError","nextCp","isSurrogatePair","_addGap","_err","surrogateInInputStream","willDropParsedChunk","substring","isLastChunk","startsWith","advance","_processSurrogate","_checkForProblematicCharacters","controlCharacterInInputStream","noncharacterInInputStream","getTokenAttr","attrName","CharCodes","Uint16Array","decodeMap","_a","codePoint","replaceCodePoint","BinTrieFlags","EntityDecoderState","DecodingMode","isNumber","ZERO","NINE","isEntityInAttributeInvalidEnd","EQUALS","UPPER_A","UPPER_Z","LOWER_A","LOWER_Z","isAsciiAlphaNumeric","EntityDecoder","decodeTree","emitCodePoint","errors","EntityStart","Strict","decodeMode","treeIndex","excess","consumed","NUM","NumericStart","stateNumericStart","NamedEntity","stateNamedEntity","NumericDecimal","stateNumericDecimal","NumericHex","stateNumericHex","LOWER_X","digitCount","pow","substr","startIdx","UPPER_F","LOWER_F","addToNumericResult","emitNumericEntity","lastCp","expectedLength","absenceOfDigitsInNumericCharacterReference","SEMI","missingSemicolonAfterCharacterReference","validateNumericCharacterReference","valueLength","VALUE_LENGTH","determineBranch","Attribute","emitNotTerminatedNamedEntity","emitNamedEntityData","getDecoder","decoder","startEntity","len","nodeIdx","branchCount","BRANCH_LENGTH","jumpOffset","JUMP_TABLE","lo","hi","mid","midVal","htmlDecodeTree","xmlDecodeTree","NS","ATTRS","DOCUMENT_MODE","TAG_NAMES","TAG_ID","TAG_NAME_TO_ID","A","ADDRESS","ANNOTATION_XML","APPLET","AREA","ARTICLE","ASIDE","B","BASE","BASEFONT","BGSOUND","BIG","BLOCKQUOTE","BODY","BR","BUTTON","CAPTION","CENTER","CODE","COL","COLGROUP","DD","DESC","DETAILS","DIALOG","DIR","DIV","DL","DT","EM","EMBED","FIELDSET","FIGCAPTION","FIGURE","FONT","FOOTER","FOREIGN_OBJECT","FORM","FRAME","FRAMESET","H1","H2","H3","H4","H5","H6","HEAD","HEADER","HGROUP","HR","HTML","I","IMG","IMAGE","INPUT","IFRAME","KEYGEN","LABEL","LI","LINK","LISTING","MAIN","MALIGNMARK","MARQUEE","MATH","MENU","META","MGLYPH","MI","MO","MN","MS","MTEXT","NAV","NOBR","NOFRAMES","NOEMBED","NOSCRIPT","OBJECT","OL","OPTGROUP","OPTION","P","PARAM","PLAINTEXT","PRE","RB","RP","RT","RTC","RUBY","S","SCRIPT","SEARCH","SECTION","SELECT","SOURCE","SMALL","SPAN","STRIKE","STRONG","STYLE","SUB","SUMMARY","SUP","TABLE","TBODY","TEMPLATE","TEXTAREA","TFOOT","TD","TH","THEAD","TITLE","TR","TRACK","TT","U","UL","SVG","VAR","WBR","XMP","getTagID","UNKNOWN","State","SPECIAL_ELEMENTS","MATHML","XLINK","XML","XMLNS","NUMBERED_HEADERS","TokenizerMode","DATA","RCDATA","RAWTEXT","SCRIPT_DATA","CDATA_SECTION","isAsciiUpper","isAsciiLetter","isAsciiLower","isAsciiDigit","toAsciiLower","isWhitespace","isScriptDataDoubleEscapeSequenceEnd","EntryType","Tokenizer","paused","inLoop","inForeignNode","lastStartTagName","active","entityStartPos","consumedAfterSnapshot","currentCharacterToken","currentToken","currentAttr","preprocessor","currentLocation","getCurrentLocation","entityDecoder","_flushCodePointConsumedAsCharacterReference","nullCharacterReference","characterReferenceOutsideUnicodeRange","surrogateCharacterReference","noncharacterCharacterReference","controlCharacterReference","getErrorForNumericCharacterReference","_b","sourceCodeLocationInfo","_consume","_ensureHibernation","_callState","writeCallback","_runParsingLoop","insertHtmlAtCurrentPos","retreat","_advanceBy","START_TAG","tagID","selfClosing","ackSelfClosing","END_TAG","COMMENT","initialName","DOCTYPE","forceQuirks","chars","attrNameFirstCh","_leaveAttrValue","duplicateAttribute","ct","_emitCurrentCharacterToken","prepareToken","onStartTag","endTagWithAttributes","endTagWithTrailingSolidus","onEndTag","dropParsedChunk","onComment","onDoctype","nextLocation","CHARACTER","onCharacter","NULL_CHARACTER","onNullCharacter","WHITESPACE_CHARACTER","onWhitespaceCharacter","onEof","EOF","ch","_createCharacterToken","_appendCharToCurrentCharacterToken","CHARACTER_REFERENCE","_isCharacterReferenceInAttribute","Legacy","ATTRIBUTE_VALUE_DOUBLE_QUOTED","ATTRIBUTE_VALUE_SINGLE_QUOTED","ATTRIBUTE_VALUE_UNQUOTED","_emitCodePoint","_stateData","_stateRcdata","_stateRawtext","_stateScriptData","_statePlaintext","TAG_OPEN","_stateTagOpen","END_TAG_OPEN","_stateEndTagOpen","TAG_NAME","_stateTagName","RCDATA_LESS_THAN_SIGN","_stateRcdataLessThanSign","RCDATA_END_TAG_OPEN","_stateRcdataEndTagOpen","RCDATA_END_TAG_NAME","_stateRcdataEndTagName","RAWTEXT_LESS_THAN_SIGN","_stateRawtextLessThanSign","RAWTEXT_END_TAG_OPEN","_stateRawtextEndTagOpen","RAWTEXT_END_TAG_NAME","_stateRawtextEndTagName","SCRIPT_DATA_LESS_THAN_SIGN","_stateScriptDataLessThanSign","SCRIPT_DATA_END_TAG_OPEN","_stateScriptDataEndTagOpen","SCRIPT_DATA_END_TAG_NAME","_stateScriptDataEndTagName","SCRIPT_DATA_ESCAPE_START","_stateScriptDataEscapeStart","SCRIPT_DATA_ESCAPE_START_DASH","_stateScriptDataEscapeStartDash","SCRIPT_DATA_ESCAPED","_stateScriptDataEscaped","SCRIPT_DATA_ESCAPED_DASH","_stateScriptDataEscapedDash","SCRIPT_DATA_ESCAPED_DASH_DASH","_stateScriptDataEscapedDashDash","SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN","_stateScriptDataEscapedLessThanSign","SCRIPT_DATA_ESCAPED_END_TAG_OPEN","_stateScriptDataEscapedEndTagOpen","SCRIPT_DATA_ESCAPED_END_TAG_NAME","_stateScriptDataEscapedEndTagName","SCRIPT_DATA_DOUBLE_ESCAPE_START","_stateScriptDataDoubleEscapeStart","SCRIPT_DATA_DOUBLE_ESCAPED","_stateScriptDataDoubleEscaped","SCRIPT_DATA_DOUBLE_ESCAPED_DASH","_stateScriptDataDoubleEscapedDash","SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH","_stateScriptDataDoubleEscapedDashDash","SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN","_stateScriptDataDoubleEscapedLessThanSign","SCRIPT_DATA_DOUBLE_ESCAPE_END","_stateScriptDataDoubleEscapeEnd","BEFORE_ATTRIBUTE_NAME","_stateBeforeAttributeName","ATTRIBUTE_NAME","_stateAttributeName","AFTER_ATTRIBUTE_NAME","_stateAfterAttributeName","BEFORE_ATTRIBUTE_VALUE","_stateBeforeAttributeValue","_stateAttributeValueDoubleQuoted","_stateAttributeValueSingleQuoted","_stateAttributeValueUnquoted","AFTER_ATTRIBUTE_VALUE_QUOTED","_stateAfterAttributeValueQuoted","SELF_CLOSING_START_TAG","_stateSelfClosingStartTag","BOGUS_COMMENT","_stateBogusComment","MARKUP_DECLARATION_OPEN","_stateMarkupDeclarationOpen","COMMENT_START","_stateCommentStart","COMMENT_START_DASH","_stateCommentStartDash","_stateComment","COMMENT_LESS_THAN_SIGN","_stateCommentLessThanSign","COMMENT_LESS_THAN_SIGN_BANG","_stateCommentLessThanSignBang","COMMENT_LESS_THAN_SIGN_BANG_DASH","_stateCommentLessThanSignBangDash","COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH","_stateCommentLessThanSignBangDashDash","COMMENT_END_DASH","_stateCommentEndDash","COMMENT_END","_stateCommentEnd","COMMENT_END_BANG","_stateCommentEndBang","_stateDoctype","BEFORE_DOCTYPE_NAME","_stateBeforeDoctypeName","DOCTYPE_NAME","_stateDoctypeName","AFTER_DOCTYPE_NAME","_stateAfterDoctypeName","AFTER_DOCTYPE_PUBLIC_KEYWORD","_stateAfterDoctypePublicKeyword","BEFORE_DOCTYPE_PUBLIC_IDENTIFIER","_stateBeforeDoctypePublicIdentifier","DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED","_stateDoctypePublicIdentifierDoubleQuoted","DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED","_stateDoctypePublicIdentifierSingleQuoted","AFTER_DOCTYPE_PUBLIC_IDENTIFIER","_stateAfterDoctypePublicIdentifier","BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS","_stateBetweenDoctypePublicAndSystemIdentifiers","AFTER_DOCTYPE_SYSTEM_KEYWORD","_stateAfterDoctypeSystemKeyword","BEFORE_DOCTYPE_SYSTEM_IDENTIFIER","_stateBeforeDoctypeSystemIdentifier","DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED","_stateDoctypeSystemIdentifierDoubleQuoted","DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED","_stateDoctypeSystemIdentifierSingleQuoted","AFTER_DOCTYPE_SYSTEM_IDENTIFIER","_stateAfterDoctypeSystemIdentifier","BOGUS_DOCTYPE","_stateBogusDoctype","_stateCdataSection","CDATA_SECTION_BRACKET","_stateCdataSectionBracket","CDATA_SECTION_END","_stateCdataSectionEnd","_stateCharacterReference","AMBIGUOUS_AMPERSAND","_stateAmbiguousAmpersand","_startCharacterReference","unexpectedNullCharacter","_emitEOFToken","_emitChars","_createStartTagToken","unexpectedQuestionMarkInsteadOfTagName","_createCommentToken","eofBeforeTagName","invalidFirstCharacterOfTagName","_createEndTagToken","missingEndTagName","emitCurrentTagToken","eofInTag","_cp","peek","handleSpecialEndTag","eofInScriptHtmlCommentLikeText","$$","unexpectedEqualsSignBeforeAttributeName","_createAttr","_leaveAttrName","unexpectedCharacterInAttributeName","missingAttributeValue","unexpectedCharacterInUnquotedAttributeValue","missingWhitespaceBetweenAttributes","unexpectedSolidusInTag","emitCurrentComment","_consumeSequenceIfMatch","cdataInHtmlContent","incorrectlyOpenedComment","abruptClosingOfEmptyComment","eofInComment","nestedComment","incorrectlyClosedComment","eofInDoctype","_createDoctypeToken","emitCurrentDoctype","missingWhitespaceBeforeDoctypeName","missingDoctypeName","invalidCharacterSequenceAfterDoctypeName","missingWhitespaceAfterDoctypePublicKeyword","missingDoctypePublicIdentifier","missingQuoteBeforeDoctypePublicIdentifier","abruptDoctypePublicIdentifier","missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers","missingQuoteBeforeDoctypeSystemIdentifier","missingWhitespaceAfterDoctypeSystemKeyword","missingDoctypeSystemIdentifier","abruptDoctypeSystemIdentifier","unexpectedCharacterAfterDoctypeSystemIdentifier","eofInCdata","unknownNamedCharacterReference","IMPLICIT_END_TAG_REQUIRED","IMPLICIT_END_TAG_REQUIRED_THOROUGHLY","SCOPING_ELEMENTS_HTML","SCOPING_ELEMENTS_HTML_LIST","SCOPING_ELEMENTS_HTML_BUTTON","SCOPING_ELEMENTS_MATHML","SCOPING_ELEMENTS_SVG","TABLE_ROW_CONTEXT","TABLE_BODY_CONTEXT","TABLE_CONTEXT","TABLE_CELLS","OpenElementStack","treeAdapter","tagIDs","stackTop","tmplCount","currentTagId","_isInTemplate","getTemplateContent","getNamespaceURI","onItemPush","popped","_updateCurrentElement","onItemPop","oldElement","newElement","idx","_indexOf","referenceElement","newElementID","insertionIdx","targetIdx","shortenToLength","tagNames","targetNS","_indexOfTagNames","popUntilPopped","clearBackTo","elementIdx","htmlScope","tn","hasInDynamicScope","exclusionId","MARKER","Marker","FormattingElementList","bookmark","neAttrs","candidates","neAttrsLength","neTagName","getTagName","neNamespaceURI","elementAttrs","getAttrList","_getNoahArkConditionCandidates","neAttrsMap","neAttr","validCandidates","candidate","every","cAttr","_ensureNoahArkCondition","Element","bookmarkIdx","markerIdx","defaultTreeAdapter","createDocument","NO_QUIRKS","createDocumentFragment","createCommentNode","createTextNode","appendChild","newNode","insertBefore","referenceNode","setTemplateContent","templateElement","contentElement","setDocumentType","doctypeNode","setDocumentMode","getDocumentMode","detachNode","insertText","prevNode","isTextNode","insertTextBefore","adoptAttributes","recipient","recipientAttrsMap","attr","j","getFirstChild","getChildNodes","getParentNode","getTextNodeContent","textNode","getCommentNodeContent","commentNode","getDocumentTypeNodeName","getDocumentTypeNodePublicId","getDocumentTypeNodeSystemId","isCommentNode","isDocumentTypeNode","isElementNode","setNodeSourceCodeLocation","getNodeSourceCodeLocation","updateNodeSourceCodeLocation","endLocation","VALID_DOCTYPE_NAME","QUIRKS_MODE_PUBLIC_ID_PREFIXES","QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES","QUIRKS_MODE_PUBLIC_IDS","LIMITED_QUIRKS_PUBLIC_ID_PREFIXES","LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES","hasPrefix","prefixes","some","MIME_TYPES","SVG_ATTRS_ADJUSTMENT_MAP","XML_ATTRS_ADJUSTMENT_MAP","SVG_TAG_NAMES_ADJUSTMENT_MAP","EXITS_FOREIGN_CONTENT","adjustTokenMathMLAttrs","adjustTokenSVGAttrs","adjustedAttrName","adjustTokenXMLAttrs","adjustedAttrEntry","isIntegrationPoint","ns","foreignNS","ENCODING","isHtmlIntegrationPoint","isMathMLTextIntegrationPoint","InsertionMode","BASE_LOC","TABLE_STRUCTURE_TAGS","defaultParserOptions","scriptingEnabled","fragmentContext","scriptHandler","stopped","insertionMode","INITIAL","originalInsertionMode","headElement","formElement","currentNotInHTML","tmplInsertionModeStack","pendingCharacterTokens","hasNonWhitespacePendingCharacterToken","framesetOk","fosterParentingEnabled","activeFormattingElements","fragmentContextID","_setContextModes","openElements","rootElement","_adoptNodes","beforeToken","tid","isTop","_setEndLocation","isHTML","_isIntegrationPoint","nextTokenizerState","_insertElement","TEXT","IN_BODY","TN","docTypeNode","_shouldFosterParentOnInsertion","_fosterParentElement","currentTmplContentOrNode","_attachElementToTree","tmpl","beforeElement","_findFosterParentingLocation","textNodeIdx","donor","closingToken","ctLoc","endLoc","_processStartTag","foreignContent","listLength","findIndex","contains","generateImpliedEndTags","popUntilTableCellPopped","clearToLastMarker","IN_ROW","generateImpliedEndTagsWithExclusion","popUntilTagNamePopped","IN_TABLE_BODY","IN_CAPTION","IN_COLUMN_GROUP","IN_TABLE","IN_FRAMESET","_resetInsertionModeForSelect","AFTER_HEAD","BEFORE_HEAD","IN_CELL","IN_HEAD","selectIdx","IN_SELECT_IN_TABLE","IN_SELECT","_isElementCausesFosterParenting","openElement","p","_insertCharacters","characterInForeignContent","tokenInInitialMode","BEFORE_HTML","tokenBeforeHtml","tokenBeforeHead","tokenInHead","IN_HEAD_NO_SCRIPT","tokenInHeadNoScript","tokenAfterHead","IN_TEMPLATE","characterInBody","characterInTable","IN_TABLE_TEXT","characterInTableText","tokenInColumnGroup","AFTER_BODY","tokenAfterBody","AFTER_AFTER_BODY","tokenAfterAfterBody","nullCharacterInForeignContent","appendComment","AFTER_FRAMESET","tokenInTableText","_appendCommentNode","appendCommentToRootHtmlElement","AFTER_AFTER_FRAMESET","appendCommentToDocument","_setDocumentType","QUIRKS","LIMITED_QUIRKS","nonConformingDoctype","doctypeInInitialMode","misplacedDoctype","nonVoidHtmlElementStartTagWithTrailingSolidus","shouldProcessStartTagTokenInForeignContent","startTagToken","COLOR","SIZE","FACE","popUntilHtmlOrIntegrationPoint","_startTagOutsideForeignContent","_getAdjustedCurrentElement","currentNs","adjustedTagName","_appendElement","startTagInForeignContent","startTagBeforeHtml","startTagInBody","startTagBeforeHead","startTagInHead","nestedNoscriptInHead","startTagInHeadNoScript","abandonedHeadElementChild","misplacedStartTagForHeadElement","startTagAfterHead","startTagInTable","TABLE_VOID_ELEMENTS","hasInTableScope","startTagInCaption","startTagInColumnGroup","startTagInTableBody","startTagInRow","_closeTableCell","startTagInCell","startTagInSelect","_resetInsertionMode","startTagInSelectInTable","startTagInTemplate","startTagAfterBody","startTagInFrameset","startTagAfterFrameset","startTagAfterAfterBody","startTagAfterAfterFrameset","_endTagOutsideForeignContent","endTagInForeignContent","endTagBeforeHtml","endTagWithoutMatchingOpenElement","endTagBeforeHead","templateEndTagInHead","endTagInHead","endTagInHeadNoScript","endTagAfterHead","endTagInBody","endTagInText","endTagInTable","endTagInCaption","endTagInColumnGroup","endTagInTableBody","endTagInRow","endTagInCell","endTagInSelect","endTagInSelectInTable","endTagInTemplate","endTagAfterBody","isRootHtmlElementCurrent","endTagInFrameset","endTagAfterFrameset","eofInBody","eofInElementThatCanContainOnlyText","eofInText","eofInTemplate","stopParsing","whitespaceCharacterInBody","whitespaceCharacterInTableText","opts","documentMock","_initTokenizerForFragmentParsing","_insertFakeRootElement","_findFormInFragmentContext","aaObtainFormattingElementEntry","formattingElementEntry","getElementEntryInScopeWithTagName","hasInScope","removeEntry","genericEndTagInBody","aaObtainFurthestBlock","furthestBlock","_isSpecialElement","aaInnerLoop","formattingElement","lastElement","nextElement","getCommonAncestor","elementEntry","getElementEntry","counterOverflow","aaRecreateElementFromEntry","aaInsertLastNodeInCommonAncestor","commonAncestor","aaReplaceFormattingElement","insertElementAfterBookmark","insertAfter","callAdoptionAgency","htmlElement","htmlLocation","bodyElement","bodyLocation","missingDoctype","_processToken","_insertFakeElement","_switchToTextParsing","_insertTemplate","insertMarker","generateImpliedEndTagsThoroughly","closingOfElementWithOpenChildElements","errCode","openElementsLeftAfterEof","disallowedContentInNoscriptInHead","modeInBody","_reconstructActiveFormattingElements","areaStartTagInBody","isHiddenInput","inputType","rawTextStartTagInBody","genericStartTagInBody","pushElement","bStartTagInBody","activeElementEntry","aStartTagInBody","hasInButtonScope","_closePElement","numberedHeaderStartTagInBody","addressStartTagInBody","elementId","listItemStartTagInBody","hrStartTagInBody","rbStartTagInBody","rtStartTagInBody","preStartTagInBody","xmpStartTagInBody","svgStartTagInBody","htmlStartTagInBody","tryPeekProperlyNestedBodyElement","bodyStartTagInBody","inTemplate","formStartTagInBody","nobrStartTagInBody","mathStartTagInBody","tableStartTagInBody","inputStartTagInBody","paramStartTagInBody","imageStartTagInBody","buttonStartTagInBody","appletStartTagInBody","iframeStartTagInBody","selectStartTagInBody","optgroupStartTagInBody","popAllUpToHtmlElement","framesetStartTagInBody","textareaStartTagInBody","plaintextStartTagInBody","pEndTagInBody","addressEndTagInBody","hasInListItemScope","liEndTagInBody","ddEndTagInBody","hasNumberedHeaderInScope","popUntilNumberedHeaderPopped","numberedHeaderEndTagInBody","brEndTagInBody","bodyEndTagInBody","htmlEndTagInBody","formEndTagInBody","appletEndTagInBody","tokenInTable","clearBackToTableContext","tdStartTagInTable","colStartTagInTable","formStartTagInTable","tableStartTagInTable","tbodyStartTagInTable","inputStartTagInTable","captionStartTagInTable","colgroupStartTagInTable","savedFosterParentingState","clearBackToTableBodyContext","hasTableBodyContextInTableScope","clearBackToTableRowContext","hasInSelectScope","xmlCodeMap","getEscaper","lastIdx","gfmTagfilterExpression","knownMdxNames","parseOptions","documentMode","handleRaw","stitches","resetTokenizer","getFragment","stitch","toParse5","tag","Token","createParse5Location","cloneWithoutChildren","fakeRoot","setPoint","tagfilter","node_","extra","charRefCode","rehypeRaw","convert","castFactory","anyFactory","checkAsRecord","nodeAsRecord","propsFactory","typeFactory","tests","testFunction","looksLikeANode","visitParents","visitor","factory","parents","subresult","grandparents","toResult","nodeAsParent","testOrVisitor","visitorOrReverse","maybeReverse"],"sourceRoot":""}